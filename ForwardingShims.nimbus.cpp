/******************************************************************************
 *                                                                         
 *               Nimbus auto-generated file
 *               !!! WARNING !!! -- DO NOT DIRECTLY EDIT THE CONTENTS OF THIS FILE.
 *				 Changes will be OVERWRITTEN by NIMBUS.
 *
 *****************************************************************************/
#include "StdAfx.h"
#include "CoTkdpo2k3k4k.h"
#include "CoTkdpo2k3k4kChannel.h"
#include "CoTkdpo2k3k4kBus.h"
#include "CoTkdpo2k3k4kMath.h"
#include "CoTkdpo2k3k4kMeasurementSlot.h"
#include "CoTkdpo2k3k4kSearch.h"
#include "CoTkdpo2k3k4kReference.h"
#include "CoTkdpo2k3k4kDigitalChannel.h"


HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Channels(Tkdpo2k3k4k* pT, ITkdpo2k3k4kChannels** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Channels"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Channels"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Channels"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Channels(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Acquisition(Tkdpo2k3k4k* pT, ITkdpo2k3k4kAcquisition** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Acquisition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Acquisition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Acquisition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Acquisition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Trigger(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTrigger** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Trigger"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Trigger"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Trigger"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Trigger(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Buses(Tkdpo2k3k4k* pT, ITkdpo2k3k4kBuses** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Buses"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Buses"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Buses"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Buses(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Cursor(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursor** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Cursor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Cursor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Cursor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Cursor(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Display(Tkdpo2k3k4k* pT, ITkdpo2k3k4kDisplay** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Display"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Display"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Display"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Display(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_HardCopy(Tkdpo2k3k4k* pT, ITkdpo2k3k4kHardCopy** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_HardCopy"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HardCopy"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_HardCopy"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_HardCopy(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Histogram(Tkdpo2k3k4k* pT, ITkdpo2k3k4kHistogram** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Histogram"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Histogram"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Histogram"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Histogram(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Horizontal(Tkdpo2k3k4k* pT, ITkdpo2k3k4kHorizontal** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Horizontal"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Horizontal"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Horizontal"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Horizontal(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Mark(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMark** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Mark"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mark"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Mark"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Mark(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Maths(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMaths** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Maths"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Maths"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Maths"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Maths(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_MeasurementImmediate(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMeasurementImmediate** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_MeasurementImmediate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MeasurementImmediate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_MeasurementImmediate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_MeasurementImmediate(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Measurements(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMeasurements** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Measurements"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Measurements"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Measurements"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Measurements(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_SaveRecall(Tkdpo2k3k4k* pT, ITkdpo2k3k4kSaveRecall** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_SaveRecall"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SaveRecall"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_SaveRecall"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_SaveRecall(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Searches(Tkdpo2k3k4k* pT, ITkdpo2k3k4kSearches** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Searches"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Searches"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Searches"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Searches(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_References(Tkdpo2k3k4k* pT, ITkdpo2k3k4kReferences** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_References"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_References"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_References"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_References(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_DigitalChannels(Tkdpo2k3k4k* pT, ITkdpo2k3k4kDigitalChannels** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_DigitalChannels"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DigitalChannels"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_DigitalChannels"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_DigitalChannels(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Zoom(Tkdpo2k3k4k* pT, ITkdpo2k3k4kZoom** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Zoom"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Zoom"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Zoom"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Zoom(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_WaveformTransfer(Tkdpo2k3k4k* pT, ITkdpo2k3k4kWaveformTransfer** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_WaveformTransfer"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_WaveformTransfer"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_WaveformTransfer"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_WaveformTransfer(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_UtilityEx(Tkdpo2k3k4k* pT, ITkdpo2k3k4kUtilityEx** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_UtilityEx"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_UtilityEx"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_UtilityEx"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_UtilityEx(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_InstrumentIO(Tkdpo2k3k4k* pT, ITkdpo2k3k4kInstrumentIO** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_InstrumentIO"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InstrumentIO"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_InstrumentIO"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_InstrumentIO(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_PowerAnalysis(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysis** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_PowerAnalysis"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_PowerAnalysis"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_PowerAnalysis"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_PowerAnalysis(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4k_get_Frequency(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequency** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4k), _T("ITkdpo2k3k4k"), _T("get_Frequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Frequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4k"), _T("get_Frequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4k_get_Frequency(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_Initialize(Tkdpo2k3k4k* pT, BSTR ResourceName, VARIANT_BOOL IdQuery, VARIANT_BOOL Reset, BSTR OptionString)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("Initialize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("Initialize"), &hr, IN_PARAM(ResourceName), IN_PARAM(IdQuery), IN_PARAM(Reset), IN_PARAM(OptionString), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_Initialize(ResourceName, IdQuery, Reset, OptionString);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_Close(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("Close"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("Close"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_Close();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_get_DriverOperation(Tkdpo2k3k4k* pT, IIviDriverOperation** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("get_DriverOperation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DriverOperation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("get_DriverOperation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_get_DriverOperation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_get_Identity(Tkdpo2k3k4k* pT, IIviDriverIdentity** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("get_Identity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Identity"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("get_Identity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_get_Identity(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_get_Utility(Tkdpo2k3k4k* pT, IIviDriverUtility** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("get_Utility"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Utility"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("get_Utility"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_get_Utility(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriver_get_Initialized(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriver), _T("IIviDriver"), _T("get_Initialized"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Initialized"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriver"), _T("get_Initialized"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriver_get_Initialized(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_InvalidateAllAttributes(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("InvalidateAllAttributes"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("InvalidateAllAttributes"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_InvalidateAllAttributes();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_ClearInterchangeWarnings(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("ClearInterchangeWarnings"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("ClearInterchangeWarnings"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_ClearInterchangeWarnings();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_GetNextInterchangeWarning(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("GetNextInterchangeWarning"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetNextInterchangeWarning"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("GetNextInterchangeWarning"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_GetNextInterchangeWarning(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_ResetInterchangeCheck(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("ResetInterchangeCheck"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("ResetInterchangeCheck"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_ResetInterchangeCheck();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_GetNextCoercionRecord(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("GetNextCoercionRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetNextCoercionRecord"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("GetNextCoercionRecord"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_GetNextCoercionRecord(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_LogicalName(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_LogicalName"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LogicalName"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_LogicalName"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_LogicalName(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_IoResourceDescriptor(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_IoResourceDescriptor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IoResourceDescriptor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_IoResourceDescriptor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_IoResourceDescriptor(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_Cache(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_Cache"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Cache"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_Cache"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_Cache(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_Cache(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_Cache"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_Cache"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_Cache(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_InterchangeCheck(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_InterchangeCheck"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InterchangeCheck"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_InterchangeCheck"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_InterchangeCheck(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_InterchangeCheck(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_InterchangeCheck"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_InterchangeCheck"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_InterchangeCheck(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_QueryInstrumentStatus(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_QueryInstrumentStatus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_QueryInstrumentStatus"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_QueryInstrumentStatus"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_QueryInstrumentStatus(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_QueryInstrumentStatus(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_QueryInstrumentStatus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_QueryInstrumentStatus"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_QueryInstrumentStatus(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_RangeCheck(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_RangeCheck"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RangeCheck"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_RangeCheck"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_RangeCheck(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_RangeCheck(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_RangeCheck"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_RangeCheck"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_RangeCheck(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_RecordCoercions(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_RecordCoercions"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RecordCoercions"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_RecordCoercions"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_RecordCoercions(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_RecordCoercions(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_RecordCoercions"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_RecordCoercions"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_RecordCoercions(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_Simulate(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_Simulate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Simulate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_Simulate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_Simulate(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_put_Simulate(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("put_Simulate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("put_Simulate"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_put_Simulate(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverOperation_get_DriverSetup(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverOperation), _T("IIviDriverOperation"), _T("get_DriverSetup"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DriverSetup"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverOperation"), _T("get_DriverSetup"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverOperation_get_DriverSetup(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_InstrumentManufacturer(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_InstrumentManufacturer"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InstrumentManufacturer"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_InstrumentManufacturer"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_InstrumentManufacturer(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_InstrumentModel(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_InstrumentModel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InstrumentModel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_InstrumentModel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_InstrumentModel(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_InstrumentFirmwareRevision(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_InstrumentFirmwareRevision"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InstrumentFirmwareRevision"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_InstrumentFirmwareRevision"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_InstrumentFirmwareRevision(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_Identifier(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_Identifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Identifier"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_Identifier"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_Identifier(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_SupportedInstrumentModels(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_SupportedInstrumentModels"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SupportedInstrumentModels"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_SupportedInstrumentModels"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_SupportedInstrumentModels(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_SpecificationMajorVersion(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_SpecificationMajorVersion"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpecificationMajorVersion"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_SpecificationMajorVersion"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_SpecificationMajorVersion(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_SpecificationMinorVersion(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_SpecificationMinorVersion"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpecificationMinorVersion"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_SpecificationMinorVersion"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_SpecificationMinorVersion(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverIdentity_get_GroupCapabilities(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverIdentity), _T("IIviDriverIdentity"), _T("get_GroupCapabilities"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GroupCapabilities"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverIdentity"), _T("get_GroupCapabilities"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverIdentity_get_GroupCapabilities(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviComponentIdentity_get_Description(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviComponentIdentity), _T("IIviComponentIdentity"), _T("get_Description"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Description"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviComponentIdentity"), _T("get_Description"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviComponentIdentity_get_Description(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviComponentIdentity_get_Revision(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviComponentIdentity), _T("IIviComponentIdentity"), _T("get_Revision"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Revision"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviComponentIdentity"), _T("get_Revision"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviComponentIdentity_get_Revision(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviComponentIdentity_get_Vendor(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviComponentIdentity), _T("IIviComponentIdentity"), _T("get_Vendor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Vendor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviComponentIdentity"), _T("get_Vendor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviComponentIdentity_get_Vendor(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_Reset(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("Reset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("Reset"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_Reset();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_ResetWithDefaults(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("ResetWithDefaults"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("ResetWithDefaults"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_ResetWithDefaults();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_Disable(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("Disable"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("Disable"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_Disable();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_SelfTest(Tkdpo2k3k4k* pT, long* TestResult, BSTR* TestMessage)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("SelfTest"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (TestResult == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("SelfTest"), _T("TestResult"));
	if (TestMessage == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("SelfTest"), _T("TestMessage"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("SelfTest"), &hr, OUT_PARAM(TestResult), OUT_PARAM(TestMessage), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_SelfTest(TestResult, TestMessage);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_ErrorQuery(Tkdpo2k3k4k* pT, long* ErrorCode, BSTR* ErrorMessage)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("ErrorQuery"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (ErrorCode == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ErrorQuery"), _T("ErrorCode"));
	if (ErrorMessage == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ErrorQuery"), _T("ErrorMessage"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("ErrorQuery"), &hr, OUT_PARAM(ErrorCode), OUT_PARAM(ErrorMessage), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_ErrorQuery(ErrorCode, ErrorMessage);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_LockObject(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("LockObject"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("LockObject"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_LockObject();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviDriverUtility_UnlockObject(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviDriverUtility), _T("IIviDriverUtility"), _T("UnlockObject"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviDriverUtility"), _T("UnlockObject"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviDriverUtility_UnlockObject();
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeAutoZero(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeAutoZero"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeAutoZero"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:AUTOZ EXEC"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeAutoZero();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeCommand(Tkdpo2k3k4k* pT, BSTR Command, BSTR State)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeCommand"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeCommand"), &hr, IN_PARAM(Command), IN_PARAM(State), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:COMMAND %$BQs,%$BQs"), Command, State);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeCommand(Command, State);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeDegauss(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeDegauss"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("SetAUXInTekVPIProbeDegauss"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:DEGAU EXEC"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_SetAUXInTekVPIProbeDegauss();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kChannels_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kChannel** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kChannels_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kChannels_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeSignal(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelProbeSignalEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeSignal"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeSignal"), _T("val"));
	*val = (Tkdpo2k3k4kChannelProbeSignalEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeSignal"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>(_T("ITkdpo2k3k4kChannels.AUXInProbeSignal"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kChannelProbeSignalPASS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUXIN:PROBE:SIGNAL?"));
		strResp = _T("%{Tkdpo2k3k4kChannelProbeSignalEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeSignal(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_put_AUXInProbeSignal(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelProbeSignalEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("put_AUXInProbeSignal"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("put_AUXInProbeSignal"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>(_T("ITkdpo2k3k4kChannels.AUXInProbeSignal"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUXIN:PROBE:SIGNAL %{Tkdpo2k3k4kChannelProbeSignalEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_put_AUXInProbeSignal(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeGain(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeGain"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeGain"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeGain"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PROBE:GAIN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeGain(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeResistance(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeResistance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeResistance"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeResistance"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PROBE:RESISTANCE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeResistance(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeSerialNumber(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeSerialNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeSerialNumber"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeSerialNumber"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ProbeSerialNumber \"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PROBE:ID:SERNUMBER?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeSerialNumber(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeType(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeType"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ProbeType\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PROBE:ID:TYPE?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInProbeUnits(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInProbeUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInProbeUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"Units\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PROBE:UNITS?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInProbeUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInTekVPIProbeDegaussState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kProbeDegaussStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInTekVPIProbeDegaussState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInTekVPIProbeDegaussState"), _T("val"));
	*val = (Tkdpo2k3k4kProbeDegaussStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInTekVPIProbeDegaussState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kProbeDegaussStateNEEDED;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:DEGAU:STATE?"));
		strResp = _T("%{Tkdpo2k3k4kProbeDegaussStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInTekVPIProbeDegaussState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_get_AUXInTekVPIProbeRange(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInTekVPIProbeRange"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AUXInTekVPIProbeRange"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("get_AUXInTekVPIProbeRange"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannels.AUXInTekVPIProbeRange"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:FORCEDR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_get_AUXInTekVPIProbeRange(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannels_put_AUXInTekVPIProbeRange(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannels), _T("ITkdpo2k3k4kChannels"), _T("put_AUXInTekVPIProbeRange"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannels"), _T("put_AUXInTekVPIProbeRange"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannels.AUXInTekVPIProbeRange"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUX:PRO:FORCEDR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannels_put_AUXInTekVPIProbeRange(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScope_get_Acquisition(Tkdpo2k3k4k* pT, IIviScopeAcquisition** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScope), _T("IIviScope"), _T("get_Acquisition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Acquisition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScope"), _T("get_Acquisition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScope_get_Acquisition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScope_get_Channels(Tkdpo2k3k4k* pT, IIviScopeChannels** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScope), _T("IIviScope"), _T("get_Channels"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Channels"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScope"), _T("get_Channels"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScope_get_Channels(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScope_get_Measurements(Tkdpo2k3k4k* pT, IIviScopeMeasurements** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScope), _T("IIviScope"), _T("get_Measurements"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Measurements"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScope"), _T("get_Measurements"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScope_get_Measurements(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScope_get_ReferenceLevel(Tkdpo2k3k4k* pT, IIviScopeReferenceLevel** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScope), _T("IIviScope"), _T("get_ReferenceLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScope"), _T("get_ReferenceLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScope_get_ReferenceLevel(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScope_get_Trigger(Tkdpo2k3k4k* pT, IIviScopeTrigger** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScope), _T("IIviScope"), _T("get_Trigger"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Trigger"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScope"), _T("get_Trigger"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScope_get_Trigger(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_ConfigureRecord(Tkdpo2k3k4k* pT, double TimePerRecord, long MinNumPts, double AcquisitionStartTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("ConfigureRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("ConfigureRecord"), &hr, IN_PARAM(TimePerRecord), IN_PARAM(MinNumPts), IN_PARAM(AcquisitionStartTime), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeAcquisition_ConfigureRecord(TimePerRecord, MinNumPts, AcquisitionStartTime);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_NumberOfAverages(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_NumberOfAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfAverages"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_NumberOfAverages"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 2;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_NumberOfAverages(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_NumberOfAverages(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_NumberOfAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_NumberOfAverages"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_NumberOfAverages(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_NumberOfEnvelopes(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_NumberOfEnvelopes"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfEnvelopes"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_NumberOfEnvelopes"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_NumberOfEnvelopes(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_NumberOfEnvelopes(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_NumberOfEnvelopes"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_NumberOfEnvelopes"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_NumberOfEnvelopes(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_Interpolation(Tkdpo2k3k4k* pT, IviScopeInterpolationEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_Interpolation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Interpolation"), _T("val"));
	*val = (IviScopeInterpolationEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_Interpolation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_Interpolation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_Interpolation(Tkdpo2k3k4k* pT, IviScopeInterpolationEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_Interpolation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_Interpolation"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_Interpolation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_RecordLength(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_RecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_RecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_RecordLength(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_SampleMode(Tkdpo2k3k4k* pT, IviScopeSampleModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_SampleMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SampleMode"), _T("val"));
	*val = (IviScopeSampleModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_SampleMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_SampleMode(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_SampleRate(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_SampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_SampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_SampleRate(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_Type(Tkdpo2k3k4k* pT, IviScopeAcquisitionTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (IviScopeAcquisitionTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = IviScopeAcquisitionTypeNormal;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_Type(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_Type(Tkdpo2k3k4k* pT, IviScopeAcquisitionTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_Type(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_NumberOfPointsMin(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_NumberOfPointsMin"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfPointsMin"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_NumberOfPointsMin"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_NumberOfPointsMin(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_NumberOfPointsMin(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_NumberOfPointsMin"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_NumberOfPointsMin"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_NumberOfPointsMin(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_StartTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_StartTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StartTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_StartTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 5.000000E-001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_get_StartTime(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_StartTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_StartTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_StartTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeAcquisition_put_StartTime(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_get_TimePerRecord(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("get_TimePerRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TimePerRecord"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("get_TimePerRecord"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E-008;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:SCALE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeAcquisition_get_TimePerRecord(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeAcquisition_put_TimePerRecord(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeAcquisition), _T("IIviScopeAcquisition"), _T("put_TimePerRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeAcquisition"), _T("put_TimePerRecord"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:SCALE %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeAcquisition_put_TimePerRecord(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_Initiate(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("Initiate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("Initiate"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_Initiate();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_Abort(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("Abort"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("Abort"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_Abort();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_AutoSetup(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("AutoSetup"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("AutoSetup"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_AutoSetup();
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_Status(Tkdpo2k3k4k* pT, IviScopeAcquisitionStatusEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("Status"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Status"), _T("val"));
	*val = (IviScopeAcquisitionStatusEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("Status"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_Status(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_IsWaveformElementInvalid(Tkdpo2k3k4k* pT, double Element, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("IsWaveformElementInvalid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("IsWaveformElementInvalid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("IsWaveformElementInvalid"), &hr, IN_PARAM(Element), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_IsWaveformElementInvalid(Element, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_get_Item(Tkdpo2k3k4k* pT, BSTR Name, IIviScopeMeasurement** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurements_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurements), _T("IIviScopeMeasurements"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurements"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurements_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannels_get_Item(Tkdpo2k3k4k* pT, BSTR Name, IIviScopeChannel** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannels), _T("IIviScopeChannels"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannels"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannels_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannels_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannels), _T("IIviScopeChannels"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannels"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannels_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannels_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannels), _T("IIviScopeChannels"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannels"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannels_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_Configure(Tkdpo2k3k4k* pT, double Low, double Mid, double High)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("Configure"), &hr, IN_PARAM(Low), IN_PARAM(Mid), IN_PARAM(High), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:LOW %0.15lg;MID %0.15lg;HIGH %0.15lg"), Low, Mid, High);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeReferenceLevel_Configure(Low, Mid, High);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_get_High(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("get_High"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_High"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("get_High"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_get_High(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_put_High(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("put_High"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("put_High"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_put_High(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_get_Low(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("get_Low"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Low"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("get_Low"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_get_Low(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_put_Low(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("put_Low"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("put_Low"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_put_Low(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_get_Mid(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("get_Mid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("get_Mid"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_get_Mid(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeReferenceLevel_put_Mid(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeReferenceLevel), _T("IIviScopeReferenceLevel"), _T("put_Mid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeReferenceLevel"), _T("put_Mid"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeReferenceLevel_put_Mid(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_Configure(Tkdpo2k3k4k* pT, IviScopeTriggerTypeEnum Type, double Holdoff)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("Configure"), &hr, IN_PARAM(Type), IN_PARAM(Holdoff), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_Configure(Type, Holdoff);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Continuous(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Continuous"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Continuous"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Continuous"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Continuous(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Continuous(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Continuous"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Continuous"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_put_Continuous(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Coupling(Tkdpo2k3k4k* pT, IviScopeTriggerCouplingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Coupling"), _T("val"));
	*val = (IviScopeTriggerCouplingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Coupling"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = IviScopeTriggerCouplingDC;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:COUP?"));
		strResp = _T("%{IviScopeTriggerCouplingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTrigger_get_Coupling(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Coupling(Tkdpo2k3k4k* pT, IviScopeTriggerCouplingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Coupling"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:COUP %{IviScopeTriggerCouplingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTrigger_put_Coupling(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Level(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Level"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Level"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Level(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Level(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Level"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_put_Level(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Modifier(Tkdpo2k3k4k* pT, IviScopeTriggerModifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Modifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Modifier"), _T("val"));
	*val = (IviScopeTriggerModifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Modifier"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Modifier(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Modifier(Tkdpo2k3k4k* pT, IviScopeTriggerModifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Modifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Modifier"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_put_Modifier(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Source(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"CH1");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:EDGE:SOURCE?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTrigger_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Source(Tkdpo2k3k4k* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:EDGE:SOURCE %$Bs"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTrigger_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Holdoff(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Holdoff"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Holdoff"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Holdoff"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Holdoff(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Holdoff(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Holdoff"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Holdoff"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_put_Holdoff(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Type(Tkdpo2k3k4k* pT, IviScopeTriggerTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (IviScopeTriggerTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Type(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_put_Type(Tkdpo2k3k4k* pT, IviScopeTriggerTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_put_Type(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_AcLine(Tkdpo2k3k4k* pT, IIviScopeTriggerAcLine** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_AcLine"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AcLine"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_AcLine"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_AcLine(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Edge(Tkdpo2k3k4k* pT, IIviScopeTriggerEdge** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Edge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Edge"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Edge"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Edge(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Glitch(Tkdpo2k3k4k* pT, IIviScopeTriggerGlitch** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Glitch"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Glitch"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Glitch"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Glitch(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Runt(Tkdpo2k3k4k* pT, IIviScopeTriggerRunt** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Runt"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Runt"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Runt"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Runt(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_TV(Tkdpo2k3k4k* pT, IIviScopeTriggerTv** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_TV"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TV"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_TV"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_TV(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTrigger_get_Width(Tkdpo2k3k4k* pT, IIviScopeTriggerWidth** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTrigger), _T("IIviScopeTrigger"), _T("get_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Width"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTrigger"), _T("get_Width"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTrigger_get_Width(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerAcLine_get_Slope(Tkdpo2k3k4k* pT, IviScopeACLineSlopeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerAcLine), _T("IIviScopeTriggerAcLine"), _T("get_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Slope"), _T("val"));
	*val = (IviScopeACLineSlopeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerAcLine"), _T("get_Slope"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerAcLine_get_Slope(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerAcLine_put_Slope(Tkdpo2k3k4k* pT, IviScopeACLineSlopeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerAcLine), _T("IIviScopeTriggerAcLine"), _T("put_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerAcLine"), _T("put_Slope"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerAcLine_put_Slope(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerEdge_Configure(Tkdpo2k3k4k* pT, BSTR Source, double Level, IviScopeTriggerSlopeEnum Slope)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerEdge), _T("IIviScopeTriggerEdge"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerEdge"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(Slope), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:EDGE:SOURCE %$Bs;SLOPE %{IviScopeTriggerSlopeEnum}s;:TRIGGER:A:LEVEL %0.15lg"), Source, Slope, Level);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerEdge_Configure(Source, Level, Slope);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerEdge_get_Slope(Tkdpo2k3k4k* pT, IviScopeTriggerSlopeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerEdge), _T("IIviScopeTriggerEdge"), _T("get_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Slope"), _T("val"));
	*val = (IviScopeTriggerSlopeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerEdge"), _T("get_Slope"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerEdge_get_Slope(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerEdge_put_Slope(Tkdpo2k3k4k* pT, IviScopeTriggerSlopeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerEdge), _T("IIviScopeTriggerEdge"), _T("put_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerEdge"), _T("put_Slope"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerEdge_put_Slope(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_Configure(Tkdpo2k3k4k* pT, BSTR Source, double Level, double Width, IviScopeGlitchPolarityEnum polarity, IviScopeGlitchConditionEnum condition)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(Width), IN_PARAM(polarity), IN_PARAM(condition), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_Configure(Source, Level, Width, polarity, condition);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_get_condition(Tkdpo2k3k4k* pT, IviScopeGlitchConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("get_condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_condition"), _T("val"));
	*val = (IviScopeGlitchConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("get_condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_get_condition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_put_condition(Tkdpo2k3k4k* pT, IviScopeGlitchConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("put_condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("put_condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_put_condition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_get_polarity(Tkdpo2k3k4k* pT, IviScopeGlitchPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("get_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_polarity"), _T("val"));
	*val = (IviScopeGlitchPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("get_polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_get_polarity(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_put_polarity(Tkdpo2k3k4k* pT, IviScopeGlitchPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("put_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("put_polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_put_polarity(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_get_Width(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("get_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Width"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("get_Width"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_get_Width(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerGlitch_put_Width(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerGlitch), _T("IIviScopeTriggerGlitch"), _T("put_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerGlitch"), _T("put_Width"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerGlitch_put_Width(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_Configure(Tkdpo2k3k4k* pT, BSTR Source, double ThresholdLow, double ThresholdHigh, IviScopeRuntPolarityEnum polarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(ThresholdLow), IN_PARAM(ThresholdHigh), IN_PARAM(polarity), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE LOGIC;:TRIG:A:PUL:CLA RUN;:TRIGGER:A:RUNT:SOU %$Bs;:TRIGGER:A:RUNT:POLARITY %{IviScopeRuntPolarityEnum}s;:TRIG:A:UPP:%$Bs %0.15lg;:TRIG:A:LOWERTHRESHOLD:%$Bs %0.15lg"), Source, polarity, Source, ThresholdHigh, Source, ThresholdLow);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerRunt_Configure(Source, ThresholdLow, ThresholdHigh, polarity);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_get_polarity(Tkdpo2k3k4k* pT, IviScopeRuntPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("get_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_polarity"), _T("val"));
	*val = (IviScopeRuntPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("get_polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = IviScopeRuntPolarityPositive;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:POL?"));
		strResp = _T("%{IviScopeRuntPolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerRunt_get_polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_put_polarity(Tkdpo2k3k4k* pT, IviScopeRuntPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("put_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("put_polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:POL %{IviScopeRuntPolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerRunt_put_polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_get_ThresholdHigh(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("get_ThresholdHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThresholdHigh"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("get_ThresholdHigh"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerRunt_get_ThresholdHigh(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_put_ThresholdHigh(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("put_ThresholdHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("put_ThresholdHigh"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerRunt_put_ThresholdHigh(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_get_ThresholdLow(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("get_ThresholdLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThresholdLow"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("get_ThresholdLow"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerRunt_get_ThresholdLow(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerRunt_put_ThresholdLow(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerRunt), _T("IIviScopeTriggerRunt"), _T("put_ThresholdLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerRunt"), _T("put_ThresholdLow"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerRunt_put_ThresholdLow(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_Configure(Tkdpo2k3k4k* pT, BSTR Source, IviScopeTVSignalFormatEnum SignalFormat, IviScopeTVTriggerEventEnum Event, IviScopeTVTriggerPolarityEnum polarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(SignalFormat), IN_PARAM(Event), IN_PARAM(polarity), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:SOU %$Bs"), Source);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerTv_Configure(Source, SignalFormat, Event, polarity);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_get_LineNumber(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("get_LineNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LineNumber"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("get_LineNumber"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_get_LineNumber(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_put_LineNumber(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("put_LineNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("put_LineNumber"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_put_LineNumber(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_get_Event(Tkdpo2k3k4k* pT, IviScopeTVTriggerEventEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("get_Event"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Event"), _T("val"));
	*val = (IviScopeTVTriggerEventEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("get_Event"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_get_Event(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_put_Event(Tkdpo2k3k4k* pT, IviScopeTVTriggerEventEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("put_Event"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("put_Event"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_put_Event(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_get_polarity(Tkdpo2k3k4k* pT, IviScopeTVTriggerPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("get_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_polarity"), _T("val"));
	*val = (IviScopeTVTriggerPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("get_polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_get_polarity(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_put_polarity(Tkdpo2k3k4k* pT, IviScopeTVTriggerPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("put_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("put_polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_put_polarity(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_get_SignalFormat(Tkdpo2k3k4k* pT, IviScopeTVSignalFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("get_SignalFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SignalFormat"), _T("val"));
	*val = (IviScopeTVSignalFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("get_SignalFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_get_SignalFormat(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerTv_put_SignalFormat(Tkdpo2k3k4k* pT, IviScopeTVSignalFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerTv), _T("IIviScopeTriggerTv"), _T("put_SignalFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerTv"), _T("put_SignalFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerTv_put_SignalFormat(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_Configure(Tkdpo2k3k4k* pT, BSTR Source, double Level, double ThresholdLow, double ThresholdHigh, IviScopeWidthPolarityEnum polarity, IviScopeWidthConditionEnum condition)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(ThresholdLow), IN_PARAM(ThresholdHigh), IN_PARAM(polarity), IN_PARAM(condition), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE PULSE;:TRIG:A:PUL:CLA WID;:TRIGGER:A:PULSEW:SOU %$Bs;:TRIG:A:UPP:%$Bs %0.15lg;:TRIG:A:LOWERTHRESHOLD:%$Bs %0.15lg;:TRIGGER:A:PULSEW:WHEN %{IviScopeWidthConditionEnum}s;:TRIGGER:A:PULSEW:POLARITY %{IviScopeWidthPolarityEnum}s;:TRIGGER:A:PULSEW:WIDTH %0.15lg"), Source, Source, ThresholdHigh, Source, ThresholdLow, condition, polarity, Level);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerWidth_Configure(Source, Level, ThresholdLow, ThresholdHigh, polarity, condition);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_get_condition(Tkdpo2k3k4k* pT, IviScopeWidthConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("get_condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_condition"), _T("val"));
	*val = (IviScopeWidthConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("get_condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_get_condition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_put_condition(Tkdpo2k3k4k* pT, IviScopeWidthConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("put_condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("put_condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_put_condition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_get_polarity(Tkdpo2k3k4k* pT, IviScopeWidthPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("get_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_polarity"), _T("val"));
	*val = (IviScopeWidthPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("get_polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = IviScopeWidthPolarityPositive;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:POL?"));
		strResp = _T("%{IviScopeWidthPolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerWidth_get_polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_put_polarity(Tkdpo2k3k4k* pT, IviScopeWidthPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("put_polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("put_polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:POL %{IviScopeWidthPolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeTriggerWidth_put_polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_get_ThresholdLow(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("get_ThresholdLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThresholdLow"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("get_ThresholdLow"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_get_ThresholdLow(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_put_ThresholdLow(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("put_ThresholdLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("put_ThresholdLow"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_put_ThresholdLow(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_get_ThresholdHigh(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("get_ThresholdHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThresholdHigh"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("get_ThresholdHigh"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_get_ThresholdHigh(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeTriggerWidth_put_ThresholdHigh(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeTriggerWidth), _T("IIviScopeTriggerWidth"), _T("put_ThresholdHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeTriggerWidth"), _T("put_ThresholdHigh"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeTriggerWidth_put_ThresholdHigh(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_ConfigureRecord(Tkdpo2k3k4k* pT, double TimePerRecord, long MinNumPts, double AcquisitionStartTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("ConfigureRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("ConfigureRecord"), &hr, IN_PARAM(TimePerRecord), IN_PARAM(MinNumPts), IN_PARAM(AcquisitionStartTime), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kAcquisition_ConfigureRecord(TimePerRecord, MinNumPts, AcquisitionStartTime);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_AutoSet(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("AutoSet"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("AutoSet"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("AUTOSET EXECUTE"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_AutoSet();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_SetAverageMode(Tkdpo2k3k4k* pT, long NumberAverages)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("SetAverageMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("SetAverageMode"), &hr, IN_PARAM(NumberAverages), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:MODE AVERAGE;:ACQUIRE:NUMAVG"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_SetAverageMode(NumberAverages);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_Start(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("Start"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("Start"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STATE ON"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_Start();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_Stop(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("Stop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("Stop"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STATE OFF"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_Stop();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_NumberAverages(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberAverages"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberAverages"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kAcquisition.NumberAverages"));
		if (!pSimData->GetValue(val))
		{
			*val = 16;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:NUMAVG?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_NumberAverages(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_NumberAverages(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_NumberAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_NumberAverages"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kAcquisition.NumberAverages"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:NUMAVG %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_NumberAverages(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_RecordLength(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_RecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_RecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 10000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:RECORDLENGTH?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_RecordLength(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_SampleRate(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_SampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_SampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:MAIN:SAMPLERATE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_SampleRate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_NumberOfPointsMin(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberOfPointsMin"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfPointsMin"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberOfPointsMin"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kAcquisition.NumberOfPointsMin"));
		if (!pSimData->GetValue(val))
		{
			*val = 10000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:RECORDLENGTH?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_NumberOfPointsMin(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_NumberOfPointsMin(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_NumberOfPointsMin"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_NumberOfPointsMin"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kAcquisition.NumberOfPointsMin"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:RECORDLENGTH %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_NumberOfPointsMin(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_StartTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_StartTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StartTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_StartTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kAcquisition_get_StartTime(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_StartTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_StartTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_StartTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kAcquisition_put_StartTime(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_TimePerRecord(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_TimePerRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TimePerRecord"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_TimePerRecord"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:SCALE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_TimePerRecord(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_TimePerRecord(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_TimePerRecord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_TimePerRecord"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:SCALE %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_TimePerRecord(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_State(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.State"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_State(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kAcquisitionModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mode"), _T("val"));
	*val = (Tkdpo2k3k4kAcquisitionModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_Mode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kAcquisitionModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kAcquisitionModeEnum>(_T("ITkdpo2k3k4kAcquisition.Mode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kAcquisitionModeSample;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:MODE?"));
		strResp = _T("%{Tkdpo2k3k4kAcquisitionModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_Mode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kAcquisitionModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_Mode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kAcquisitionModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kAcquisitionModeEnum>(_T("ITkdpo2k3k4kAcquisition.Mode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:MODE %{Tkdpo2k3k4kAcquisitionModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_Mode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_NumberAcquisitions(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberAcquisitions"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberAcquisitions"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_NumberAcquisitions"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:NUMACQ?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_NumberAcquisitions(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_RunStop(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_RunStop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RunStop"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_RunStop"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.RunStop"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STOPAFTER?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_RunStop(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_RunStop(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_RunStop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_RunStop"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.RunStop"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STOPAFTER %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_RunStop(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_SingleSequence(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_SingleSequence"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SingleSequence"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_SingleSequence"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.SingleSequence"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STOPAFTER?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_SingleSequence(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_SingleSequence(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_SingleSequence"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_SingleSequence"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.SingleSequence"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STOPAFTER %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_SingleSequence(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_MagniVuState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_MagniVuState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MagniVuState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_MagniVuState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MagniVuState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MagniVuState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.MagniVuState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQ:MAG?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_MagniVuState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_put_MagniVuState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("put_MagniVuState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("put_MagniVuState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MagniVuState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MagniVuState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kAcquisition.MagniVuState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQ:MAG %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_put_MagniVuState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_MaxSampleRate(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_MaxSampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MaxSampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_MaxSampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 250000000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQ:MAXS?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_MaxSampleRate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kAcquisition_get_SamplingMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kAcquisitionSamplingModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kAcquisition), _T("ITkdpo2k3k4kAcquisition"), _T("get_SamplingMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SamplingMode"), _T("val"));
	*val = (Tkdpo2k3k4kAcquisitionSamplingModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kAcquisition"), _T("get_SamplingMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kAcquisitionSamplingModeRT;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:SAMPLINGMODE?"));
		strResp = _T("%{Tkdpo2k3k4kAcquisitionSamplingModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kAcquisition_get_SamplingMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureAIndependentParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double Level, double UpperThreshold, double LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAIndependentParameters"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(UpperThreshold), IN_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LEVEL:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), Source, Level, Source, UpperThreshold, Source, LowerThreshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureAIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ReadAIndependentParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double* Level, double* UpperThreshold, double* LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ReadAIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("Level"));
	if (UpperThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("UpperThreshold"));
	if (LowerThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("LowerThreshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ReadAIndependentParameters"), &hr, IN_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(UpperThreshold), OUT_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LEVEL:%{Tkdpo2k3k4kChannelEnum}s?;:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?;:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?"), Source, Source, Source);
		strResp = _T("%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ReadAIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureAOnlyTrigger(Tkdpo2k3k4k* pT, double HoldoffTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAOnlyTrigger"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAOnlyTrigger"), &hr, IN_PARAM(HoldoffTime), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:HOLDOFF:TIME %0.15lg;:TRIGGER:B:STATE 0"), HoldoffTime);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureAOnlyTrigger(HoldoffTime);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureAThenBAfterEventsTrigger(Tkdpo2k3k4k* pT, double HoldoffTime, long Events)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAThenBAfterEventsTrigger"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAThenBAfterEventsTrigger"), &hr, IN_PARAM(HoldoffTime), IN_PARAM(Events), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:HOLDOFF:TIME %0.15lg;:TRIGGER:B:STATE 1;BY EVENTS;EVENTS:COUNT %d"), HoldoffTime, Events);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureAThenBAfterEventsTrigger(HoldoffTime, Events);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureAThenBAfterTimeTrigger(Tkdpo2k3k4k* pT, double HoldoffTime, double DelayTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAThenBAfterTimeTrigger"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureAThenBAfterTimeTrigger"), &hr, IN_PARAM(HoldoffTime), IN_PARAM(DelayTime), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:HOLDOFF:TIME %0.15lg;:TRIGGER:B:STATE 1;BY TIME;TIME %0.15lg"), HoldoffTime, DelayTime);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureAThenBAfterTimeTrigger(HoldoffTime, DelayTime);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureBIndependentParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double Level, double UpperThreshold, double LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureBIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureBIndependentParameters"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(UpperThreshold), IN_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:LEVEL:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:TRIGGER:B:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:TRIGGER:B:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), Source, Level, Source, UpperThreshold, Source, LowerThreshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureBIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ReadBIndependentParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double* Level, double* UpperThreshold, double* LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ReadBIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBIndependentParameters"), _T("Level"));
	if (UpperThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBIndependentParameters"), _T("UpperThreshold"));
	if (LowerThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBIndependentParameters"), _T("LowerThreshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ReadBIndependentParameters"), &hr, IN_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(UpperThreshold), OUT_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:LEVEL:%{Tkdpo2k3k4kChannelEnum}s?;:TRIGGER:B:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?;:TRIGGER:B:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?"), Source, Source, Source);
		strResp = _T("%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ReadBIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ReadARFIndependentParameters(Tkdpo2k3k4k* pT, double* UpperThreshold, double* LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ReadARFIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (UpperThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadARFIndependentParameters"), _T("UpperThreshold"));
	if (LowerThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadARFIndependentParameters"), _T("LowerThreshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ReadARFIndependentParameters"), &hr, OUT_PARAM(UpperThreshold), OUT_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:UPPERTHRESHOLD:RF?;:TRIGGER:A:LOWERTHRESHOLD:RF?"));
		strResp = _T("%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ReadARFIndependentParameters(UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_ConfigureARFIndependentParameters(Tkdpo2k3k4k* pT, double UpperThreshold, double LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureARFIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("ConfigureARFIndependentParameters"), &hr, IN_PARAM(UpperThreshold), IN_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:UPPERTHRESHOLD:RF %0.15lg;:TRIGGER:A:LOWERTHRESHOLD:RF %0.15lg"), UpperThreshold, LowerThreshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_ConfigureARFIndependentParameters(UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_AHoldoffTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_AHoldoffTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AHoldoffTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_AHoldoffTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.AHoldoffTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 2.000000E-008;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:HOLD:TIM?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_AHoldoffTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_AHoldoffTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_AHoldoffTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_AHoldoffTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.AHoldoffTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:HOLD:TIM %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_AHoldoffTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kTriggerEdge;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("%{Tkdpo2k3k4kTriggerTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("%{Tkdpo2k3k4kTriggerTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_AEdge(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerAEdge** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_AEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AEdge"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_AEdge"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_AEdge(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_BState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_BState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_BState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kTrigger.BState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_BState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_BState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_BState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_BState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kTrigger.BState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_BState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_BDelayTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_BDelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BDelayTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_BDelayTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BDelayTime"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BDelayTime"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.BDelayTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:TIME?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_BDelayTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_BDelayTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_BDelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_BDelayTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BDelayTime"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BDelayTime"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.BDelayTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:TIME %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_BDelayTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_CurrentState(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_CurrentState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CurrentState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_CurrentState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ARMED\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:STATE?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_CurrentState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_EventCount(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_EventCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_EventCount"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_EventCount"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EventCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EventCount"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTrigger.EventCount"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:EVENTS:COUNT?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_EventCount(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_EventCount(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_EventCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_EventCount"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EventCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EventCount"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTrigger.EventCount"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:EVENTS:COUNT %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_EventCount(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_BLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_BLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_BLevel"), &hr, IN_PARAM(Source), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_BLevel"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.BLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:LEVEL:%{Tkdpo2k3k4kChannelEnum}s?"), Source);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_BLevel(Source, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_BLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum Source, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_BLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_BLevel"), &hr, IN_PARAM(Source), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_BLevel"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.BLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:LEVEL:%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), Source, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_BLevel(Source, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_TriggerBBy(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerBByEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_TriggerBBy"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TriggerBBy"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerBByEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_TriggerBBy"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerBBy"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerBBy"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerBByEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerBByEnum>(_T("ITkdpo2k3k4kTrigger.TriggerBBy"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerBByTime;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:BY?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerBByEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_TriggerBBy(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_TriggerBBy(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerBByEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_TriggerBBy"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_TriggerBBy"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerBBy"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerBBy"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerBByEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerBByEnum>(_T("ITkdpo2k3k4kTrigger.TriggerBBy"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:BY %{Tkdpo2k3k4kTriggerBByEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_TriggerBBy(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_Frequency(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_Frequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Frequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_Frequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:FREQ?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_Frequency(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ProbeAttenuation(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ProbeAttenuation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeAttenuation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ProbeAttenuation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.ProbeAttenuation"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:EXT:PRO?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_ProbeAttenuation(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_ProbeAttenuation(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_ProbeAttenuation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_ProbeAttenuation"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTrigger.ProbeAttenuation"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:EXT:PRO %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_ProbeAttenuation(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_VerticalUnitValue(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_VerticalUnitValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalUnitValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_VerticalUnitValue"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"A\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:EXT:YUNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_VerticalUnitValue(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ABus(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABus** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ABus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ABus"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ABus"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_ABus(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ALogic(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerALogic** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ALogic"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ALogic"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ALogic"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_ALogic(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_AWidth(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerAWidth** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_AWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AWidth"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_AWidth"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_AWidth(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ARunt(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerARunt** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ARunt"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ARunt"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ARunt"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_ARunt(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ASetupHold(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerASetupHold** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ASetupHold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ASetupHold"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ASetupHold"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_ASetupHold(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_ATransition(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerATransition** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_ATransition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ATransition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_ATransition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_ATransition(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_AVideo(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerAVideo** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_AVideo"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AVideo"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_AVideo"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_AVideo(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_BEdge(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerBEdge** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_BEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BEdge"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_BEdge"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTrigger_get_BEdge(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_get_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("get_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mode"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("get_Mode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerModeEnum>(_T("ITkdpo2k3k4kTrigger.Mode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerModeAUTO;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:MODE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_get_Mode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTrigger_put_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTrigger), _T("ITkdpo2k3k4kTrigger"), _T("put_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTrigger"), _T("put_Mode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerModeEnum>(_T("ITkdpo2k3k4kTrigger.Mode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:MODE %{Tkdpo2k3k4kTriggerModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTrigger_put_Mode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_Configure(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum Source, double Level, Tkdpo2k3k4kTriggerSlopeEnum Slope, Tkdpo2k3k4kTriggerEdgeCouplingEnum Coupling)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(Slope), IN_PARAM(Coupling), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYP EDGE;:TRIG:A:EDGE:SLO %{Tkdpo2k3k4kTriggerSlopeEnum}s;:TRIG:A:EDGE:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s;:TRIG:A:LEV %0.15lg;:TRIG:A:EDGE:COUP %{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s"), Slope, Source, Level, Coupling);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_Configure(Source, Level, Slope, Coupling);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_Read(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* Source, double* Level, Tkdpo2k3k4kTriggerSlopeEnum* Slope, Tkdpo2k3k4kTriggerEdgeCouplingEnum* Coupling)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source"));
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Level"));
	if (Slope == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Slope"));
	if (Coupling == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Coupling"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("Read"), &hr, OUT_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(Slope), OUT_PARAM(Coupling), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:SLO?;:TRIG:A:EDGE:SOU?;:TRIG:A:LEV?;:TRIG:A:EDGE:COUP?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}[^;];%{Tkdpo2k3k4kTriggerSource2Enum}[^;];%lg;%{Tkdpo2k3k4kTriggerEdgeCouplingEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_Read(Source, Level, Slope, Coupling);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_ConfigureLevelTo50Percent(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("ConfigureLevelTo50Percent"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("ConfigureLevelTo50Percent"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A SETLEVEL"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_ConfigureLevelTo50Percent();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_get_Slope(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Slope"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSlopeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Slope"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerAEdge.Slope"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSlopeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:SLO?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_get_Slope(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_put_Slope(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Slope"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerAEdge.Slope"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:SLO %{Tkdpo2k3k4kTriggerSlopeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_put_Slope(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSource2Enum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerAEdge.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSource2CH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSource2Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerAEdge.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_get_Coupling(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerEdgeCouplingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Coupling"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerEdgeCouplingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Coupling"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>(_T("ITkdpo2k3k4kTriggerAEdge.Coupling"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerEdgeCouplingDC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:COUP?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_get_Coupling(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_put_Coupling(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerEdgeCouplingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Coupling"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>(_T("ITkdpo2k3k4kTriggerAEdge.Coupling"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:EDGE:COUP %{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_put_Coupling(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_get_Level(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Level"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("get_Level"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAEdge.Level"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LEV?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_get_Level(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_put_Level(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_Level"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAEdge.Level"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LEV %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_put_Level(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAEdge_put_LevelEnum(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLevelEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAEdge), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_LevelEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAEdge"), _T("put_LevelEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LEV %{Tkdpo2k3k4kTriggerLevelEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAEdge_put_LevelEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBuses_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBuses), _T("ITkdpo2k3k4kBuses"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBuses"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kBuses_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBuses_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBuses), _T("ITkdpo2k3k4kBuses"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBuses"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kBuses_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBuses_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kBus** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBuses), _T("ITkdpo2k3k4kBuses"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBuses"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kBuses_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_DDT(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_DDT"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DDT"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_DDT"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DDT"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DDT"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:DDT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_get_DDT(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_TrackMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorTrackModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_TrackMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TrackMode"), _T("val"));
	*val = (Tkdpo2k3k4kCursorTrackModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_TrackMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorTrackModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorTrackModeEnum>(_T("ITkdpo2k3k4kCursor.TrackMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorTrackModeIndependent;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:MODE?"));
		strResp = _T("%{Tkdpo2k3k4kCursorTrackModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_get_TrackMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_put_TrackMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorTrackModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("put_TrackMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("put_TrackMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorTrackModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorTrackModeEnum>(_T("ITkdpo2k3k4kCursor.TrackMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:MODE %{Tkdpo2k3k4kCursorTrackModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_put_TrackMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kCursorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorTypeEnum>(_T("ITkdpo2k3k4kCursor.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorTypeOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:FUNC?"));
		strResp = _T("%{Tkdpo2k3k4kCursorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorTypeEnum>(_T("ITkdpo2k3k4kCursor.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:FUNC %{Tkdpo2k3k4kCursorTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_HBars(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorHBars** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_HBars"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HBars"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_HBars"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursor_get_HBars(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_VBars(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorVBars** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_VBars"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VBars"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_VBars"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursor_get_VBars(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_XY(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorXY** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_XY"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_XY"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_XY"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursor_get_XY(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kCursorSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorSourceEnum>(_T("ITkdpo2k3k4kCursor.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorSourceAUTO;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kCursorSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursor_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursor), _T("ITkdpo2k3k4kCursor"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursor"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorSourceEnum>(_T("ITkdpo2k3k4kCursor.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:SOU %{Tkdpo2k3k4kCursorSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursor_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_SetMeasurementScale(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorMeasurementScaleEnum MeasurementScale)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("SetMeasurementScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("SetMeasurementScale"), &hr, IN_PARAM(MeasurementScale), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:UNITS PER;:CURS:VBA:USE %{Tkdpo2k3k4kCursorMeasurementScaleEnum}s"), MeasurementScale);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_SetMeasurementScale(MeasurementScale);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_get_Units(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorHBarsUnitsEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = (Tkdpo2k3k4kCursorHBarsUnitsEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorHBarsUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorHBarsUnitsEnum>(_T("ITkdpo2k3k4kCursorHBars.Units"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorHBarsUnitsBase;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:HBA:UNI?"));
		strResp = _T("%{Tkdpo2k3k4kCursorHBarsUnitsEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_put_Units(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorHBarsUnitsEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Units"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorHBarsUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorHBarsUnitsEnum>(_T("ITkdpo2k3k4kCursorHBars.Units"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:HBA:UNI %{Tkdpo2k3k4kCursorHBarsUnitsEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_put_Units(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_get_Delta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Delta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Delta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Delta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:HBA:DELT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_get_Delta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_get_Position1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Position1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorHBars.Position1"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:HBARS:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_get_Position1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_put_Position1(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Position1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorHBars.Position1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:HBARS:POSITION1 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_put_Position1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_get_Position2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("get_Position2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorHBars.Position2"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:HBARS:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_get_Position2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorHBars_put_Position2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorHBars), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorHBars"), _T("put_Position2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorHBars.Position2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:HBARS:POSITION2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorHBars_put_Position2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_SetMeasurementScale(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorMeasurementScaleEnum MeasurementScale)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("SetMeasurementScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("SetMeasurementScale"), &hr, IN_PARAM(MeasurementScale), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:UNITS PER;:CURS:VBA:USE %{Tkdpo2k3k4kCursorMeasurementScaleEnum}s"), MeasurementScale);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_SetMeasurementScale(MeasurementScale);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_Delta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Delta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Delta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Delta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:DELT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_Delta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_Position1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Position1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorVBars.Position1"));
		if (!pSimData->GetValue(val))
		{
			*val = -1.200000E-005;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_Position1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_put_Position1(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Position1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorVBars.Position1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:POSITION1 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_put_Position1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_Position2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Position2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorVBars.Position2"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.200000E-005;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_Position2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_put_Position2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Position2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorVBars.Position2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURSOR:VBARS:POSITION2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_put_Position2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_Units(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorVBarsUnitsEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = (Tkdpo2k3k4kCursorVBarsUnitsEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorVBarsUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorVBarsUnitsEnum>(_T("ITkdpo2k3k4kCursorVBars.Units"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorVBarsUnitsSeconds;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:UNI?"));
		strResp = _T("%{Tkdpo2k3k4kCursorVBarsUnitsEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_put_Units(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorVBarsUnitsEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("put_Units"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorVBarsUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorVBarsUnitsEnum>(_T("ITkdpo2k3k4kCursorVBars.Units"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:UNI %{Tkdpo2k3k4kCursorVBarsUnitsEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_put_Units(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_HorizontalPosition1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_HorizontalPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalPosition1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_HorizontalPosition1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:HPOS1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_HorizontalPosition1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_HorizontalPosition2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_HorizontalPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalPosition2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_HorizontalPosition2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:HPOS2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_HorizontalPosition2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_VDelta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_VDelta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VDelta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_VDelta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:VDELT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_VDelta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_AlternativeReadout1(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_AlternativeReadout1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AlternativeReadout1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_AlternativeReadout1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"0");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:ALTERNATE1?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_AlternativeReadout1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorVBars_get_AlternativeReadout2(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorVBars), _T("ITkdpo2k3k4kCursorVBars"), _T("get_AlternativeReadout2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AlternativeReadout2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorVBars"), _T("get_AlternativeReadout2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"0");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:VBA:ALTERNATE2?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorVBars_get_AlternativeReadout2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_get_Readout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorXYReadoutEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("get_Readout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Readout"), _T("val"));
	*val = (Tkdpo2k3k4kCursorXYReadoutEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("get_Readout"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Readout"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Readout"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorXYReadoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorXYReadoutEnum>(_T("ITkdpo2k3k4kCursorXY.Readout"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kCursorXYReadoutRectangular;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:READOUT?"));
		strResp = _T("%{Tkdpo2k3k4kCursorXYReadoutEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXY_get_Readout(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_put_Readout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kCursorXYReadoutEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("put_Readout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("put_Readout"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Readout"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Readout"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kCursorXYReadoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kCursorXYReadoutEnum>(_T("ITkdpo2k3k4kCursorXY.Readout"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:READOUT %{Tkdpo2k3k4kCursorXYReadoutEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXY_put_Readout(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_get_Rectangle(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorXYRectangle** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("get_Rectangle"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Rectangle"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("get_Rectangle"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursorXY_get_Rectangle(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_get_Ratio(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorXYRatio** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("get_Ratio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Ratio"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("get_Ratio"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursorXY_get_Ratio(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_get_Product(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorXYProduct** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("get_Product"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Product"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("get_Product"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursorXY_get_Product(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXY_get_PolarCoordinates(Tkdpo2k3k4k* pT, ITkdpo2k3k4kCursorXYPolarCoordinates** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXY), _T("ITkdpo2k3k4kCursorXY"), _T("get_PolarCoordinates"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_PolarCoordinates"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXY"), _T("get_PolarCoordinates"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kCursorXY_get_PolarCoordinates(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_XDelta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XDelta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_XDelta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XDelta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_XDelta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_XPosition1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_XPosition1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XPosition1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.XPosition1"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_XPosition1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_put_XPosition1(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_XPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_XPosition1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.XPosition1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:POSITION1 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_put_XPosition1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_XPosition2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_XPosition2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XPosition2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.XPosition2"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_XPosition2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_put_XPosition2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_XPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_XPosition2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.XPosition2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:POSITION2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_put_XPosition2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_XUnits(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_XUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_XUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"XUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:X:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_XUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_YDelta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YDelta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_YDelta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YDelta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_YDelta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_YPosition1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_YPosition1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YPosition1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.YPosition1"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_YPosition1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_put_YPosition1(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_YPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_YPosition1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.YPosition1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:POSITION1 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_put_YPosition1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_YPosition2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_YPosition2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YPosition2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.YPosition2"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_YPosition2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_put_YPosition2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_YPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("put_YPosition2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kCursorXYRectangle.YPosition2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:POSITION2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_put_YPosition2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRectangle_get_YUnits(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRectangle), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_YUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRectangle"), _T("get_YUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"YUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RECT:Y:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRectangle_get_YUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRatio_get_Delta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRatio), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Delta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Delta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Delta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RATIO:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRatio_get_Delta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRatio_get_Position1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRatio), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Position1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RATIO:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRatio_get_Position1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRatio_get_Position2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRatio), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Position2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RATIO:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRatio_get_Position2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYRatio_get_Units(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYRatio), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYRatio"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"RatioUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:RATIO:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYRatio_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYProduct_get_Delta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYProduct), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Delta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Delta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Delta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:PRODUCT:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYProduct_get_Delta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYProduct_get_Position1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYProduct), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Position1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:PRODUCT:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYProduct_get_Position1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYProduct_get_Position2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYProduct), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Position2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:PRODUCT:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYProduct_get_Position2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYProduct_get_Units(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYProduct), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYProduct"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ProductUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:PRODUCT:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYProduct_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaDelta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaDelta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThetaDelta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaDelta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:THETA:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaDelta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaPosition1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaPosition1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThetaPosition1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaPosition1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:THETA:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaPosition1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaPosition2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaPosition2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThetaPosition2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaPosition2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:THETA:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaPosition2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaUnits(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ThetaUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_ThetaUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ThetaUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:THETA:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_ThetaUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_Delta(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Delta"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Delta"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Delta"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:RADIUS:DEL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_Delta(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_Position1(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Position1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position1"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Position1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:RADIUS:POSITION1?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_Position1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_Position2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Position2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Position2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:RADIUS:POSITION2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_Position2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kCursorXYPolarCoordinates_get_Units(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kCursorXYPolarCoordinates), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kCursorXYPolarCoordinates"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"Units\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CURS:XY:POL:RADIUS:UNI?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kCursorXYPolarCoordinates_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_SetMessageBoxCoordinates(Tkdpo2k3k4k* pT, long X1, long Y1, long X2, long Y2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("SetMessageBoxCoordinates"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("SetMessageBoxCoordinates"), &hr, IN_PARAM(X1), IN_PARAM(Y1), IN_PARAM(X2), IN_PARAM(Y2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:BOX %d,%d,%d,%d"), X1, Y1, X2, Y2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_SetMessageBoxCoordinates(X1, Y1, X2, Y2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_GetMessageBoxCoordinates(Tkdpo2k3k4k* pT, long* X1, long* Y1, long* X2, long* Y2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("GetMessageBoxCoordinates"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (X1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMessageBoxCoordinates"), _T("X1"));
	if (Y1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMessageBoxCoordinates"), _T("Y1"));
	if (X2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMessageBoxCoordinates"), _T("X2"));
	if (Y2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMessageBoxCoordinates"), _T("Y2"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("GetMessageBoxCoordinates"), &hr, OUT_PARAM(X1), OUT_PARAM(Y1), OUT_PARAM(X2), OUT_PARAM(Y2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:BOX?"));
		strResp = _T("%d,%d,%d,%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_GetMessageBoxCoordinates(X1, Y1, X2, Y2);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_ShowMessage(Tkdpo2k3k4k* pT, BSTR Message)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("ShowMessage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("ShowMessage"), &hr, IN_PARAM(Message), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:SHOW %$BQs"), Message);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_ShowMessage(Message);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_ClearMessage(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("ClearMessage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("ClearMessage"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:CLEAR"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_ClearMessage();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_GetDisplayMessage(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("GetDisplayMessage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetDisplayMessage"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("GetDisplayMessage"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:SHOW?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_GetDisplayMessage(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_ClockState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayClockStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_ClockState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ClockState"), _T("val"));
	*val = (Tkdpo2k3k4kDisplayClockStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_ClockState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayClockStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayClockStateEnum>(_T("ITkdpo2k3k4kDisplay.ClockState"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDisplayClockStateOn;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DISPLAY:CLOCK?"));
		strResp = _T("%{Tkdpo2k3k4kDisplayClockStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_ClockState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_ClockState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayClockStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_ClockState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_ClockState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayClockStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayClockStateEnum>(_T("ITkdpo2k3k4kDisplay.ClockState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DISPLAY:CLOCK %{Tkdpo2k3k4kDisplayClockStateEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_ClockState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_BackLightIntensity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayBackLightIntensityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_BackLightIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BackLightIntensity"), _T("val"));
	*val = (Tkdpo2k3k4kDisplayBackLightIntensityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_BackLightIntensity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayBackLightIntensityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayBackLightIntensityEnum>(_T("ITkdpo2k3k4kDisplay.BackLightIntensity"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDisplayBackLightIntensityHigh;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:BACKL?"));
		strResp = _T("%{Tkdpo2k3k4kDisplayBackLightIntensityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_BackLightIntensity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_BackLightIntensity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayBackLightIntensityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_BackLightIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_BackLightIntensity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayBackLightIntensityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayBackLightIntensityEnum>(_T("ITkdpo2k3k4kDisplay.BackLightIntensity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:BACKL %{Tkdpo2k3k4kDisplayBackLightIntensityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_BackLightIntensity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_Format(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayDisplayFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_Format"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Format"), _T("val"));
	*val = (Tkdpo2k3k4kDisplayDisplayFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_Format"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayDisplayFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayDisplayFormatEnum>(_T("ITkdpo2k3k4kDisplay.Format"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDisplayDisplayFormatYT;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:FORM?"));
		strResp = _T("%{Tkdpo2k3k4kDisplayDisplayFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_Format(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_Format(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayDisplayFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_Format"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_Format"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayDisplayFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayDisplayFormatEnum>(_T("ITkdpo2k3k4kDisplay.Format"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:FORM %{Tkdpo2k3k4kDisplayDisplayFormatEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_Format(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_GraticuleStyle(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayGraticuleEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_GraticuleStyle"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GraticuleStyle"), _T("val"));
	*val = (Tkdpo2k3k4kDisplayGraticuleEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_GraticuleStyle"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayGraticuleEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayGraticuleEnum>(_T("ITkdpo2k3k4kDisplay.GraticuleStyle"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDisplayGraticuleFull;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:GRA?"));
		strResp = _T("%{Tkdpo2k3k4kDisplayGraticuleEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_GraticuleStyle(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_GraticuleStyle(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayGraticuleEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_GraticuleStyle"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_GraticuleStyle"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDisplayGraticuleEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDisplayGraticuleEnum>(_T("ITkdpo2k3k4kDisplay.GraticuleStyle"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:GRA %{Tkdpo2k3k4kDisplayGraticuleEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_GraticuleStyle(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_Persistence(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_Persistence"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Persistence"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_Persistence"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDisplay.Persistence"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:PERS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_Persistence(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_Persistence(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_Persistence"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_Persistence"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDisplay.Persistence"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:PERS %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_Persistence(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_PersistenceEnum(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDisplayPersistenceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_PersistenceEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_PersistenceEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:PERS %{Tkdpo2k3k4kDisplayPersistenceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_PersistenceEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_WaveformIntensity(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_WaveformIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_WaveformIntensity"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_WaveformIntensity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.WaveformIntensity"));
		if (!pSimData->GetValue(val))
		{
			*val = 35;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DISPLAY:INTENSITY:WAVEFORM?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_WaveformIntensity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_WaveformIntensity(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_WaveformIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_WaveformIntensity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.WaveformIntensity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DISPLAY:INTENSITY:WAVEFORM %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_WaveformIntensity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_GraticuleIntensity(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_GraticuleIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GraticuleIntensity"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_GraticuleIntensity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.GraticuleIntensity"));
		if (!pSimData->GetValue(val))
		{
			*val = 75;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:GRA?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_GraticuleIntensity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_GraticuleIntensity(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_GraticuleIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_GraticuleIntensity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.GraticuleIntensity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:GRA %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_GraticuleIntensity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_DotsOnly(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_DotsOnly"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DotsOnly"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_DotsOnly"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DotsOnly"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DotsOnly"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.DotsOnly"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:STY:DOT?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_DotsOnly(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_DotsOnly(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_DotsOnly"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_DotsOnly"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DotsOnly"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DotsOnly"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.DotsOnly"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:STY:DOT %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_DotsOnly(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_DisplayMessageBox(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_DisplayMessageBox"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayMessageBox"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_DisplayMessageBox"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.DisplayMessageBox"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_DisplayMessageBox(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_DisplayMessageBox(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_DisplayMessageBox"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_DisplayMessageBox"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.DisplayMessageBox"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MESS:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_DisplayMessageBox(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_GlitchCaptureState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_GlitchCaptureState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GlitchCaptureState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_GlitchCaptureState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchCaptureState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.GlitchCaptureState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:GLIT?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_GlitchCaptureState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_GlitchCaptureState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_GlitchCaptureState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_GlitchCaptureState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchCaptureState"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchCaptureState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kDisplay.GlitchCaptureState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:GLIT %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_GlitchCaptureState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_get_GlitchIntensity(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("get_GlitchIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GlitchIntensity"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("get_GlitchIntensity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GlitchIntensity"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.GlitchIntensity"));
		if (!pSimData->GetValue(val))
		{
			*val = 100;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:GLIT?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_get_GlitchIntensity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDisplay_put_GlitchIntensity(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDisplay), _T("ITkdpo2k3k4kDisplay"), _T("put_GlitchIntensity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDisplay"), _T("put_GlitchIntensity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchIntensity"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GlitchIntensity"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kDisplay.GlitchIntensity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DIS:INTENSIT:GLIT %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDisplay_put_GlitchIntensity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHardCopy_Print(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHardCopy), _T("ITkdpo2k3k4kHardCopy"), _T("Print"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHardCopy"), _T("Print"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HARDC START"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHardCopy_Print();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHardCopy_get_Layout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPrintLayoutEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHardCopy), _T("ITkdpo2k3k4kHardCopy"), _T("get_Layout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Layout"), _T("val"));
	*val = (Tkdpo2k3k4kPrintLayoutEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHardCopy"), _T("get_Layout"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Layout"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Layout"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPrintLayoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPrintLayoutEnum>(_T("ITkdpo2k3k4kHardCopy.Layout"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPrintLayoutLandscape;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HARDC:LAY?"));
		strResp = _T("%{Tkdpo2k3k4kPrintLayoutEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHardCopy_get_Layout(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHardCopy_put_Layout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPrintLayoutEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHardCopy), _T("ITkdpo2k3k4kHardCopy"), _T("put_Layout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHardCopy"), _T("put_Layout"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Layout"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Layout"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPrintLayoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPrintLayoutEnum>(_T("ITkdpo2k3k4kHardCopy.Layout"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HARDC:LAY %{Tkdpo2k3k4kPrintLayoutEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHardCopy_put_Layout(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHardCopy_get_InkSaver(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHardCopy), _T("ITkdpo2k3k4kHardCopy"), _T("get_InkSaver"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InkSaver"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHardCopy"), _T("get_InkSaver"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kHardCopy.InkSaver"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HARDC:INKS?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHardCopy_get_InkSaver(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHardCopy_put_InkSaver(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHardCopy), _T("ITkdpo2k3k4kHardCopy"), _T("put_InkSaver"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHardCopy"), _T("put_InkSaver"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kHardCopy.InkSaver"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HARDC:INKS %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHardCopy_put_InkSaver(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_Configure(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSource1Enum Source, Tkdpo2k3k4kHistogramModeEnum Mode)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Mode), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:MOD %{Tkdpo2k3k4kHistogramModeEnum}s;:HIS:SOU %{Tkdpo2k3k4kSource1Enum}s"), Mode, Source);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_Configure(Source, Mode);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_Read(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSource1Enum* Source, Tkdpo2k3k4kHistogramModeEnum* Mode)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source"));
	if (Mode == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Mode"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("Read"), &hr, OUT_PARAM(Source), OUT_PARAM(Mode), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:MOD?;SOU?"));
		strResp = _T("%{Tkdpo2k3k4kHistogramModeEnum}[^;];%{Tkdpo2k3k4kSource1Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_Read(Source, Mode);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_ConfigureBoxCoordinates(Tkdpo2k3k4k* pT, double Top, double Left, double Right, double Bottom)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("ConfigureBoxCoordinates"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("ConfigureBoxCoordinates"), &hr, IN_PARAM(Top), IN_PARAM(Left), IN_PARAM(Right), IN_PARAM(Bottom), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinates"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:BOX %0.15lg,%0.15lg,%0.15lg,%0.15lg"), Top, Left, Right, Bottom);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_ConfigureBoxCoordinates(Top, Left, Right, Bottom);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_ReadBoxCoordinates(Tkdpo2k3k4k* pT, double* Top, double* Left, double* Right, double* Bottom)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("ReadBoxCoordinates"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Top == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinates"), _T("Top"));
	if (Left == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinates"), _T("Left"));
	if (Right == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinates"), _T("Right"));
	if (Bottom == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinates"), _T("Bottom"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("ReadBoxCoordinates"), &hr, OUT_PARAM(Top), OUT_PARAM(Left), OUT_PARAM(Right), OUT_PARAM(Bottom), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinates"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinates"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:BOX?"));
		strResp = _T("%lg,%lg,%lg,%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_ReadBoxCoordinates(Top, Left, Right, Bottom);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_ConfigureBoxCoordinatesPercent(Tkdpo2k3k4k* pT, double Top, double Left, double Right, double Bottom)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("ConfigureBoxCoordinatesPercent"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("ConfigureBoxCoordinatesPercent"), &hr, IN_PARAM(Top), IN_PARAM(Left), IN_PARAM(Right), IN_PARAM(Bottom), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureBoxCoordinatesPercent"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:BOXP %0.15lg,%0.15lg,%0.15lg,%0.15lg"), Top, Left, Right, Bottom);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_ConfigureBoxCoordinatesPercent(Top, Left, Right, Bottom);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_ReadBoxCoordinatesPercent(Tkdpo2k3k4k* pT, double* Top, double* Left, double* Right, double* Bottom)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("ReadBoxCoordinatesPercent"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Top == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinatesPercent"), _T("Top"));
	if (Left == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinatesPercent"), _T("Left"));
	if (Right == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinatesPercent"), _T("Right"));
	if (Bottom == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadBoxCoordinatesPercent"), _T("Bottom"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("ReadBoxCoordinatesPercent"), &hr, OUT_PARAM(Top), OUT_PARAM(Left), OUT_PARAM(Right), OUT_PARAM(Bottom), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinatesPercent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadBoxCoordinatesPercent"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:BOXP?"));
		strResp = _T("%lg,%lg,%lg,%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_ReadBoxCoordinatesPercent(Top, Left, Right, Bottom);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_Reset(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("Reset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("Reset"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Reset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Reset"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Reset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Reset"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:COUN RESET"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_Reset();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_get_Data(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("get_Data"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Data"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("get_Data"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Data"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Data"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Data"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Data"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:DAT?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_get_Data(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_get_Display(Tkdpo2k3k4k* pT, Tkdpo2k3k4kHistogramDisplayEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("get_Display"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Display"), _T("val"));
	*val = (Tkdpo2k3k4kHistogramDisplayEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("get_Display"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Display"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Display"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Display"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Display"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kHistogramDisplayEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kHistogramDisplayEnum>(_T("ITkdpo2k3k4kHistogram.Display"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kHistogramDisplayLinear;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:DIS?"));
		strResp = _T("%{Tkdpo2k3k4kHistogramDisplayEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_get_Display(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_put_Display(Tkdpo2k3k4k* pT, Tkdpo2k3k4kHistogramDisplayEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("put_Display"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("put_Display"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Display"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Display"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Display"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Display"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kHistogramDisplayEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kHistogramDisplayEnum>(_T("ITkdpo2k3k4kHistogram.Display"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:DIS %{Tkdpo2k3k4kHistogramDisplayEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_put_Display(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_get_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kHistogramModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("get_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mode"), _T("val"));
	*val = (Tkdpo2k3k4kHistogramModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("get_Mode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kHistogramModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kHistogramModeEnum>(_T("ITkdpo2k3k4kHistogram.Mode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kHistogramModeOff;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:MOD?"));
		strResp = _T("%{Tkdpo2k3k4kHistogramModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_get_Mode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_put_Mode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kHistogramModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("put_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("put_Mode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Mode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Mode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kHistogramModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kHistogramModeEnum>(_T("ITkdpo2k3k4kHistogram.Mode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:MOD %{Tkdpo2k3k4kHistogramModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_put_Mode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSource1Enum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kSource1Enum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSource1Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSource1Enum>(_T("ITkdpo2k3k4kHistogram.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSource1CH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kSource1Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHistogram_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSource1Enum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHistogram), _T("ITkdpo2k3k4kHistogram"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHistogram"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSource1Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSource1Enum>(_T("ITkdpo2k3k4kHistogram.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HIS:SOU %{Tkdpo2k3k4kSource1Enum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHistogram_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_Configure(Tkdpo2k3k4k* pT, double Position, double Scale, long RecordLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("Configure"), &hr, IN_PARAM(Position), IN_PARAM(Scale), IN_PARAM(RecordLength), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:POSITION %0.15lg;SCALE %0.15lg;RECORDLENGTH %d"), Position, Scale, RecordLength);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_Configure(Position, Scale, RecordLength);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_ConfigureDelay(Tkdpo2k3k4k* pT, VARIANT_BOOL Mode, double Time)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("ConfigureDelay"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("ConfigureDelay"), &hr, IN_PARAM(Mode), IN_PARAM(Time), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:MOD %{VARIANT_BOOL}s;TIM %0.15lg"), Mode, Time);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_ConfigureDelay(Mode, Time);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_Read(Tkdpo2k3k4k* pT, double* Position, double* Scale, long* RecordLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Position == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Position"));
	if (Scale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Scale"));
	if (RecordLength == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("RecordLength"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("Read"), &hr, OUT_PARAM(Position), OUT_PARAM(Scale), OUT_PARAM(RecordLength), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HORIZONTAL:POSITION?;SCALE?;RECORDLENGTH?"));
		strResp = _T("%lg;%lg;%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_Read(Position, Scale, RecordLength);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_ReadDelay(Tkdpo2k3k4k* pT, VARIANT_BOOL* Mode, double* Time)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("ReadDelay"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Mode == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Mode"));
	if (Time == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Time"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("ReadDelay"), &hr, OUT_PARAM(Mode), OUT_PARAM(Time), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:MOD?;TIM?"));
		strResp = _T("%{VARIANT_BOOL}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_ReadDelay(Mode, Time);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DelayMode(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DelayMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayMode"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DelayMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kHorizontal.DelayMode"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:MOD?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DelayMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_DelayMode(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_DelayMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_DelayMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kHorizontal.DelayMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:MOD %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_DelayMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DelayTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DelayTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.DelayTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:TIM?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DelayTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_DelayTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_DelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_DelayTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.DelayTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DEL:TIM %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_DelayTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DigitalMainRecordLength(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMainRecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DigitalMainRecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMainRecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DIG:RECO:MAIN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DigitalMainRecordLength(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DigitalMagniVuRecordLength(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMagniVuRecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DigitalMagniVuRecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMagniVuRecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DigitalMagniVuRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DigitalMagniVuRecordLength"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DIG:RECO:MAG?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DigitalMagniVuRecordLength(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DigitalMainSampleRate(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMainSampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DigitalMainSampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMainSampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DIG:SAMPLER:MAIN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DigitalMainSampleRate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_DigitalMagniVuSampleRate(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMagniVuSampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DigitalMagniVuSampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_DigitalMagniVuSampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DigitalMagniVuSampleRate"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DigitalMagniVuSampleRate"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:DIG:SAMPLER:MAG?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_DigitalMagniVuSampleRate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_Scale(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_Scale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Scale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_Scale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.Scale"));
		if (!pSimData->GetValue(val))
		{
			*val = 4.000000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:SCA?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_Scale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_Scale(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_Scale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_Scale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.Scale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:SCA %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_Scale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_Position(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:POS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_Position(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:POS %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_Resolution(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_Resolution"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Resolution"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_Resolution"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Resolution"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kHorizontal.Resolution"));
		if (!pSimData->GetValue(val))
		{
			*val = 10000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:RESO?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_Resolution(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_Resolution(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_Resolution"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_Resolution"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Resolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Resolution"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kHorizontal.Resolution"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:RESO %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_Resolution(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_RecordLength(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_RecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_RecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 10000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:RECO?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_RecordLength(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_RecordLength(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_RecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_RecordLength"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:RECO %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_RecordLength(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_SampleRate(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_SampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SampleRate"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_SampleRate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.SampleRate"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+003;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:SAMPLER?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_SampleRate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_SampleRate(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_SampleRate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_SampleRate"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kHorizontal.SampleRate"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:SAMPLER %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_SampleRate(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_get_TriggerPosition(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("get_TriggerPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TriggerPosition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("get_TriggerPosition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TriggerPosition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kHorizontal.TriggerPosition"));
		if (!pSimData->GetValue(val))
		{
			*val = 50;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:TRIG:POS?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_get_TriggerPosition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kHorizontal_put_TriggerPosition(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kHorizontal), _T("ITkdpo2k3k4kHorizontal"), _T("put_TriggerPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kHorizontal"), _T("put_TriggerPosition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TriggerPosition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kHorizontal.TriggerPosition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("HOR:TRIG:POS %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kHorizontal_put_TriggerPosition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_MoveZoomToMark(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMarkMoveZoomToMarkEnum Mark)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("MoveZoomToMark"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("MoveZoomToMark"), &hr, IN_PARAM(Mark), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARK %{Tkdpo2k3k4kMarkMoveZoomToMarkEnum}s"), Mark);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_MoveZoomToMark(Mark);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_CreateMark(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMarkEnum Mark)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("CreateMark"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("CreateMark"), &hr, IN_PARAM(Mark), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:CREATE %{Tkdpo2k3k4kMarkEnum}s"), Mark);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_CreateMark(Mark);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_DeleteMark(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMarkEnum Mark)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("DeleteMark"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("DeleteMark"), &hr, IN_PARAM(Mark), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:DELE %{Tkdpo2k3k4kMarkEnum}s"), Mark);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_DeleteMark(Mark);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_FreeMarks(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_FreeMarks"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FreeMarks"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_FreeMarks"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1024;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:FREE?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_FreeMarks(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_TotalMarks(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_TotalMarks"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TotalMarks"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_TotalMarks"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1024;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:TOT?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_TotalMarks(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedEnd(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedEnd"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedEnd"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedEnd"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:END?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedEnd(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedFocus(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedFocus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedFocus"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedFocus"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:FOCUS?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedFocus(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedMarksInColumn(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedMarksInColumn"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedMarksInColumn"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedMarksInColumn"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:MARKSINCOLUMN?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedMarksInColumn(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedOwner(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedOwner"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedOwner"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedOwner"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:OWNER?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedOwner(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedSource"), _T("val"));
	*val = (Tkdpo2k3k4kSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kSourceCH1;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:SOURCE?"));
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedStart(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedStart"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedStart"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedStart"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:START?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedStart(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = VARIANT_FALSE;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedPosition(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedPosition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedPosition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:ZOOM:POSITION?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedPosition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMark_get_SelectedLabel(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMark), _T("ITkdpo2k3k4kMark"), _T("get_SelectedLabel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SelectedLabel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMark"), _T("get_SelectedLabel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARK:SELECTED:LABEL?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMark_get_SelectedLabel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMaths_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMaths), _T("ITkdpo2k3k4kMaths"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMaths"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMaths_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMaths_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMaths), _T("ITkdpo2k3k4kMaths"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMaths"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMaths_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMaths_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kMath** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMaths), _T("ITkdpo2k3k4kMaths"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMaths"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMaths_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_Configure(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum Source, Tkdpo2k3k4kMeasurementTypeEnum Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s"), Source, Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_Configure(Source, Type);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_ConfigureDelay(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum Direction, Tkdpo2k3k4kMeasurementEdgeEnum Edge1, Tkdpo2k3k4kMeasurementEdgeEnum Edge2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigureDelay"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigureDelay"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), IN_PARAM(Direction), IN_PARAM(Edge1), IN_PARAM(Edge2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE DELAY;DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s;EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), Source1, Source2, Direction, Edge1, Edge2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_ConfigureDelay(Source1, Source2, Direction, Edge1, Edge2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_ConfigurePhase(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigurePhase"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigurePhase"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE PHASE"), Source1, Source2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_ConfigurePhase(Source1, Source2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_ConfigureReferenceLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementMethodEnum Method, Tkdpo2k3k4kMeasurementUnitEnum Unit, double High, double Low, double Mid, double Mid2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigureReferenceLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ConfigureReferenceLevel"), &hr, IN_PARAM(Method), IN_PARAM(Unit), IN_PARAM(High), IN_PARAM(Low), IN_PARAM(Mid), IN_PARAM(Mid2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:METHOD %{Tkdpo2k3k4kMeasurementMethodEnum}s;REFLEVEL:METHOD %{Tkdpo2k3k4kMeasurementUnitEnum}s;%{Tkdpo2k3k4kMeasurementUnitEnum}s:HIGH %0.15lg;LOW %0.15lg;MID %0.15lg;MID2 %0.15lg"), Method, Unit, Unit, High, Low, Mid, Mid2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_ConfigureReferenceLevel(Method, Unit, High, Low, Mid, Mid2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_Read(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum* Source1, Tkdpo2k3k4kSourceEnum* Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum* Direction, Tkdpo2k3k4kMeasurementEdgeEnum* Edge1, Tkdpo2k3k4kMeasurementEdgeEnum* Edge2, Tkdpo2k3k4kMeasurementTypeEnum* Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source1"));
	if (Source2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source2"));
	if (Direction == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Direction"));
	if (Edge1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Edge1"));
	if (Edge2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Edge2"));
	if (Type == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Type"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("Read"), &hr, OUT_PARAM(Source1), OUT_PARAM(Source2), OUT_PARAM(Direction), OUT_PARAM(Edge1), OUT_PARAM(Edge2), OUT_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1?;SOURCE2?;TYPE?;DELAY:DIRECTION?;EDGE1?;EDGE2?"));
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kMeasurementTypeEnum}[^;];%{Tkdpo2k3k4kMeasurementDelayDirectionEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_Read(Source1, Source2, Direction, Edge1, Edge2, Type);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_ReadReferenceLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementMethodEnum* Method, Tkdpo2k3k4kMeasurementUnitEnum* Unit, double* High, double* Low, double* Mid, double* Mid2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ReadReferenceLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Method == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("Method"));
	if (Unit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("Unit"));
	if (High == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("High"));
	if (Low == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("Low"));
	if (Mid == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("Mid"));
	if (Mid2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReferenceLevel"), _T("Mid2"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ReadReferenceLevel"), &hr, OUT_PARAM(Method), OUT_PARAM(Unit), OUT_PARAM(High), OUT_PARAM(Low), OUT_PARAM(Mid), OUT_PARAM(Mid2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:METHOD?;REFLEVEL:METHOD?;REFLEVEL:(UNIT):HIGH?;LOW?;MID?;MID2?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementMethodEnum}[^;];%{Tkdpo2k3k4kMeasurementUnitEnum}[^;];%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_ReadReferenceLevel(Method, Unit, High, Low, Mid, Mid2);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_ReadValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum Direction, Tkdpo2k3k4kMeasurementEdgeEnum Edge1, Tkdpo2k3k4kMeasurementEdgeEnum Edge2, Tkdpo2k3k4kMeasurementTypeEnum Type, double* Val, BSTR* Unit)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ReadValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadValue"), _T("Val"));
	if (Unit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadValue"), _T("Unit"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("ReadValue"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), IN_PARAM(Direction), IN_PARAM(Edge1), IN_PARAM(Edge2), IN_PARAM(Type), OUT_PARAM(Val), OUT_PARAM(Unit), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s;DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s;EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;:MEASUREMENT:IMMED:VALUE?;UNIT?"), Source1, Source2, Type, Direction, Edge1, Edge2);
		strResp = _T("%lg;%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_ReadValue(Source1, Source2, Direction, Edge1, Edge2, Type, Val, Unit);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_DelayDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementDelayDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayDirection"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementDelayDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayDirection"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementDelayDirectionForward;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:DIRECTION?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_DelayDirection(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_DelayDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementDelayDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayDirection"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_DelayDirection(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_DelayEdge1(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementEdgeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayEdge1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayEdge1"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementEdgeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayEdge1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayEdge1"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementEdgeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:EDGE1?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementEdgeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_DelayEdge1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_DelayEdge1(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementEdgeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayEdge1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayEdge1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayEdge1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_DelayEdge1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_DelayEdge2(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementEdgeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayEdge2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayEdge2"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementEdgeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_DelayEdge2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayEdge2"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementEdgeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:EDGE2?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementEdgeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_DelayEdge2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_DelayEdge2(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementEdgeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayEdge2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_DelayEdge2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.DelayEdge2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:DELAY:EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_DelayEdge2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteHigh(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelAbsoluteHigh"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteHigh"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteHigh"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:HIGH?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteHigh(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteHigh(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteHigh"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteHigh"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:HIGH %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteHigh(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteLow(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelAbsoluteLow"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteLow"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteLow"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:LOW?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteLow(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteLow(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteLow"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteLow"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:LOW %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteLow(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteMid(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelAbsoluteMid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteMid"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteMid"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:MID?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteMid(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteMid(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteMid"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteMid"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:MID %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteMid(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteMid2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteMid2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelAbsoluteMid2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelAbsoluteMid2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteMid2"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:MID2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelAbsoluteMid2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteMid2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteMid2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelAbsoluteMid2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelAbsoluteMid2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:ABSOLUTE:MID2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelAbsoluteMid2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelMethod(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementMethodEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelMethod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelMethod"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementMethodEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelMethod"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementMethodEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementMethodEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelMethod"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementMethodAuto;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:METHOD?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementMethodEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelMethod(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelMethod(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementMethodEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelMethod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelMethod"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementMethodEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementMethodEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelMethod"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:METHOD %{Tkdpo2k3k4kMeasurementMethodEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelMethod(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentHigh(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelPercentHigh"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentHigh"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentHigh"));
		if (!pSimData->GetValue(val))
		{
			*val = 9.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:HIGH?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentHigh(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentHigh(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentHigh"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentHigh"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:HIGH %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentHigh(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentLow(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelPercentLow"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentLow"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentLow"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:LOW?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentLow(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentLow(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentLow"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentLow"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:LOW %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentLow(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentMid2(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentMid2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelPercentMid2"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentMid2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentMid2"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:MID2?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentMid2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentMid2(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentMid2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentMid2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentMid2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:MID2 %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentMid2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelUnit(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementUnitEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelUnit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelUnit"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementUnitEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelUnit"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementUnitEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementUnitEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelUnit"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementUnitPercent;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:METHOD?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementUnitEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelUnit(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelUnit(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementUnitEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelUnit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelUnit"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementUnitEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementUnitEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelUnit"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:METHOD %{Tkdpo2k3k4kMeasurementUnitEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelUnit(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentMid(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevelPercentMid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_ReferenceLevelPercentMid"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentMid"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:MID?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_ReferenceLevelPercentMid(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentMid(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_ReferenceLevelPercentMid"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMeasurementImmediate.ReferenceLevelPercentMid"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:REFLEVEL:PERCENT:MID %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_ReferenceLevelPercentMid(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_Source1(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Source1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source1"), _T("val"));
	*val = (Tkdpo2k3k4kSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Source1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Source1"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1?"));
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_Source1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_Source1(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Source1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Source1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Source1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_Source1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_Source2(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Source2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source2"), _T("val"));
	*val = (Tkdpo2k3k4kSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Source2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Source2"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSourceCH2;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE2?"));
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_Source2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_Source2(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Source2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Source2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Source2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:SOURCE2 %{Tkdpo2k3k4kSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_Source2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementTypePeriod;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:TYPE?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementImmediate.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_Units(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:UNITS?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementImmediate_get_Value(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementImmediate), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Value"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Value"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementImmediate"), _T("get_Value"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:IMMED:VALUE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementImmediate_get_Value(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_ClearStatistics(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("ClearStatistics"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("ClearStatistics"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ClearStatistics"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ClearStatistics"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:STATI RESET"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_ClearStatistics();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMeasurements_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMeasurements_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kMeasurementSlot** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMeasurements_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Gating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementGatingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Gating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Gating"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementGatingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Gating"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>(_T("ITkdpo2k3k4kMeasurements.Gating"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementGatingScreen;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:GATING?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementGatingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_get_Gating(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_put_Gating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementGatingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("put_Gating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("put_Gating"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>(_T("ITkdpo2k3k4kMeasurements.Gating"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:GATING %{Tkdpo2k3k4kMeasurementGatingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_put_Gating(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_StatisticsMode(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_StatisticsMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StatisticsMode"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_StatisticsMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMeasurements.StatisticsMode"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:STATISTICS:MODE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_get_StatisticsMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_put_StatisticsMode(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("put_StatisticsMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("put_StatisticsMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMeasurements.StatisticsMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:STATISTICS:MODE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_put_StatisticsMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_StatisticsWeighting(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_StatisticsWeighting"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StatisticsWeighting"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_StatisticsWeighting"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsWeighting"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsWeighting"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kMeasurements.StatisticsWeighting"));
		if (!pSimData->GetValue(val))
		{
			*val = 32;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:STATISTICS:WEIGHTING?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_get_StatisticsWeighting(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_put_StatisticsWeighting(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("put_StatisticsWeighting"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("put_StatisticsWeighting"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsWeighting"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsWeighting"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kMeasurements.StatisticsWeighting"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:STATISTICS:WEIGHTING %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurements_put_StatisticsWeighting(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Indicators(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMeasurementsIndicators** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Indicators"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Indicators"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Indicators"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMeasurements_get_Indicators(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurements_get_Frequency(Tkdpo2k3k4k* pT, ITkdpo2k3k4kMeasurementsFrequency** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurements), _T("ITkdpo2k3k4kMeasurements"), _T("get_Frequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Frequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurements"), _T("get_Frequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMeasurements_get_Frequency(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_get_State(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementIndicatorStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementIndicatorStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementIndicatorStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementIndicatorStateEnum>(_T("ITkdpo2k3k4kMeasurementsIndicators.State"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementIndicatorStateOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:STATE?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementIndicatorStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_put_State(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementIndicatorStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementIndicatorStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementIndicatorStateEnum>(_T("ITkdpo2k3k4kMeasurementsIndicators.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:STATE %{Tkdpo2k3k4kMeasurementIndicatorStateEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_get_HorizontalIndicators(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_HorizontalIndicators"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalIndicators"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_HorizontalIndicators"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:NUMHORZ?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_get_HorizontalIndicators(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_get_HorizontalValue(Tkdpo2k3k4k* pT, long Indicator, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_HorizontalValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_HorizontalValue"), &hr, IN_PARAM(Indicator), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:HORZ%d?"), Indicator);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_get_HorizontalValue(Indicator, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_get_VerticalIndicators(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_VerticalIndicators"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalIndicators"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_VerticalIndicators"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:NUMVERT?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_get_VerticalIndicators(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsIndicators_get_VerticalValue(Tkdpo2k3k4k* pT, long Indicator, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsIndicators), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_VerticalValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsIndicators"), _T("get_VerticalValue"), &hr, IN_PARAM(Indicator), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASU:INDIC:VERT%d?"), Indicator);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsIndicators_get_VerticalValue(Indicator, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_DefaultSetup(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("DefaultSetup"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("DefaultSetup"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("FACTORY"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_DefaultSetup();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_RecallSetupFromFile(Tkdpo2k3k4k* pT, BSTR FileName)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallSetupFromFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallSetupFromFile"), &hr, IN_PARAM(FileName), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RECALL:SETUP %$BQs"), FileName);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_RecallSetupFromFile(FileName);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_RecallSetupFromMemory(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMemoryLocationEnum Location)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallSetupFromMemory"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallSetupFromMemory"), &hr, IN_PARAM(Location), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RECALL:SETUP %{Tkdpo2k3k4kMemoryLocationEnum}s"), Location);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_RecallSetupFromMemory(Location);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_RecallWaveformFromFile(Tkdpo2k3k4k* pT, Tkdpo2k3k4kReferenceEnum RefMemory, BSTR FileName)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallWaveformFromFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("RecallWaveformFromFile"), &hr, IN_PARAM(RefMemory), IN_PARAM(FileName), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RECALL:WAVEFORM %$BQs, %{Tkdpo2k3k4kReferenceEnum}s"), FileName, RefMemory);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_RecallWaveformFromFile(RefMemory, FileName);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveAllDigitalChannels(Tkdpo2k3k4k* pT, BSTR FileName)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveAllDigitalChannels"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveAllDigitalChannels"), &hr, IN_PARAM(FileName), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:WAVEFORM DIGITALA,%$BQs"), FileName);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveAllDigitalChannels(FileName);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveSetupToFile(Tkdpo2k3k4k* pT, BSTR FileName)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveSetupToFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveSetupToFile"), &hr, IN_PARAM(FileName), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:SETUP %$BQs"), FileName);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveSetupToFile(FileName);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveSetupToMemory(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMemoryLocationEnum Location)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveSetupToMemory"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveSetupToMemory"), &hr, IN_PARAM(Location), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("*SAV %{Tkdpo2k3k4kMemoryLocationEnum}s"), Location);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveSetupToMemory(Location);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveWaveformToFile(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataSourceEnum Source, BSTR FileName)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveWaveformToFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveWaveformToFile"), &hr, IN_PARAM(Source), IN_PARAM(FileName), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:WAVEFORM %{Tkdpo2k3k4kDataSourceEnum}s, %$BQs"), Source, FileName);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveWaveformToFile(Source, FileName);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveWaveformToReference(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataSourceEnum Source, Tkdpo2k3k4kReferenceEnum RefMemory)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveWaveformToReference"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveWaveformToReference"), &hr, IN_PARAM(Source), IN_PARAM(RefMemory), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:WAVEFORM %{Tkdpo2k3k4kDataSourceEnum}s, %{Tkdpo2k3k4kReferenceEnum}s"), Source, RefMemory);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveWaveformToReference(Source, RefMemory);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveEventTableBusData(Tkdpo2k3k4k* pT, long Bus, BSTR Filename)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveEventTableBusData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveEventTableBusData"), &hr, IN_PARAM(Bus), IN_PARAM(Filename), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:EVENT:BUS%d %$Bs"), Bus, Filename);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveEventTableBusData(Bus, Filename);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveImage(Tkdpo2k3k4k* pT, BSTR Filename, Tkdpo2k3k4kImageFormatEnum ImageFormat, Tkdpo2k3k4kImageLayoutEnum ImageLayout)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveImage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveImage"), &hr, IN_PARAM(Filename), IN_PARAM(ImageFormat), IN_PARAM(ImageLayout), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:LAY %{Tkdpo2k3k4kImageLayoutEnum}s;:SAV:IMAG:FILEF %{Tkdpo2k3k4kImageFormatEnum}s;:SAV:IMAG %$Bs"), ImageLayout, ImageFormat, Filename);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveImage(Filename, ImageFormat, ImageLayout);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_SaveAllWaveformsToFile(Tkdpo2k3k4k* pT, BSTR FileName, Tkdpo2k3k4kSaveWaveformFileFormatEnum FileFormat)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveAllWaveformsToFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("SaveAllWaveformsToFile"), &hr, IN_PARAM(FileName), IN_PARAM(FileFormat), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:WAVE:FILEF %{Tkdpo2k3k4kSaveWaveformFileFormatEnum}s;:SAVE:WAVEFORM ALL, %$BQs"), FileFormat, FileName);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_SaveAllWaveformsToFile(FileName, FileFormat);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_SaveWaveFormFileFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSaveWaveformFileFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_SaveWaveFormFileFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SaveWaveFormFileFormat"), _T("val"));
	*val = (Tkdpo2k3k4kSaveWaveformFileFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_SaveWaveFormFileFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSaveWaveformFileFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSaveWaveformFileFormatEnum>(_T("ITkdpo2k3k4kSaveRecall.SaveWaveFormFileFormat"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSaveWaveformFileFormatSpreadSheet;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:WAVEFORM:FILEFORMAT?"));
		strResp = _T("%{Tkdpo2k3k4kSaveWaveformFileFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_SaveWaveFormFileFormat(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_SaveWaveFormFileFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSaveWaveformFileFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_SaveWaveFormFileFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_SaveWaveFormFileFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSaveWaveformFileFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSaveWaveformFileFormatEnum>(_T("ITkdpo2k3k4kSaveRecall.SaveWaveFormFileFormat"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAVE:WAVEFORM:FILEFORMAT %{Tkdpo2k3k4kSaveWaveformFileFormatEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_SaveWaveFormFileFormat(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_SaveButtonType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSaveButtonTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_SaveButtonType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SaveButtonType"), _T("val"));
	*val = (Tkdpo2k3k4kSaveButtonTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_SaveButtonType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSaveButtonTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSaveButtonTypeEnum>(_T("ITkdpo2k3k4kSaveRecall.SaveButtonType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSaveButtonTypeWaveform;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:ASSI:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kSaveButtonTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_SaveButtonType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_SaveButtonType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSaveButtonTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_SaveButtonType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_SaveButtonType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSaveButtonTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSaveButtonTypeEnum>(_T("ITkdpo2k3k4kSaveRecall.SaveButtonType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:ASSI:TYP %{Tkdpo2k3k4kSaveButtonTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_SaveButtonType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_ImageFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kImageFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_ImageFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ImageFormat"), _T("val"));
	*val = (Tkdpo2k3k4kImageFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_ImageFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kImageFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kImageFormatEnum>(_T("ITkdpo2k3k4kSaveRecall.ImageFormat"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kImageFormatPNG;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:FILEF?"));
		strResp = _T("%{Tkdpo2k3k4kImageFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_ImageFormat(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_ImageFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kImageFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_ImageFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_ImageFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kImageFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kImageFormatEnum>(_T("ITkdpo2k3k4kSaveRecall.ImageFormat"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:FILEF %{Tkdpo2k3k4kImageFormatEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_ImageFormat(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_ImageLayout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kImageLayoutEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_ImageLayout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ImageLayout"), _T("val"));
	*val = (Tkdpo2k3k4kImageLayoutEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_ImageLayout"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kImageLayoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kImageLayoutEnum>(_T("ITkdpo2k3k4kSaveRecall.ImageLayout"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kImageLayoutPortrait;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:LAY?"));
		strResp = _T("%{Tkdpo2k3k4kImageLayoutEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_ImageLayout(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_ImageLayout(Tkdpo2k3k4k* pT, Tkdpo2k3k4kImageLayoutEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_ImageLayout"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_ImageLayout"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kImageLayoutEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kImageLayoutEnum>(_T("ITkdpo2k3k4kSaveRecall.ImageLayout"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:LAY %{Tkdpo2k3k4kImageLayoutEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_ImageLayout(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_InkSaverPalette(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_InkSaverPalette"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InkSaverPalette"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_InkSaverPalette"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_InkSaverPalette"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_InkSaverPalette"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kSaveRecall.InkSaverPalette"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:INKS?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_InkSaverPalette(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_InkSaverPalette(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_InkSaverPalette"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_InkSaverPalette"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_InkSaverPalette"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_InkSaverPalette"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kSaveRecall.InkSaverPalette"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:IMAG:INKS %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_InkSaverPalette(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_get_WaveformGating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementGatingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("get_WaveformGating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_WaveformGating"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementGatingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("get_WaveformGating"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>(_T("ITkdpo2k3k4kSaveRecall.WaveformGating"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementGatingOff;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:WAVE:GATI?"));
		strResp = _T("%{Tkdpo2k3k4kMeasurementGatingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_get_WaveformGating(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSaveRecall_put_WaveformGating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kMeasurementGatingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSaveRecall), _T("ITkdpo2k3k4kSaveRecall"), _T("put_WaveformGating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSaveRecall"), _T("put_WaveformGating"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementGatingEnum>(_T("ITkdpo2k3k4kSaveRecall.WaveformGating"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:WAVE:GATI %{Tkdpo2k3k4kMeasurementGatingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSaveRecall_put_WaveformGating(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearches_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearches), _T("ITkdpo2k3k4kSearches"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearches"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearches_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearches_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearches), _T("ITkdpo2k3k4kSearches"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearches"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearches_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearches_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kSearch** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearches), _T("ITkdpo2k3k4kSearches"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearches"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearches_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_Configure(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTriggerBusTypeEnum BusType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("Configure"), &hr, IN_PARAM(BusSource), IN_PARAM(BusType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE BUS;BUS:SOURCE %{Tkdpo2k3k4kTrigABusSourceEnum}s ;:TRIG:A:BUS %{Tkdpo2k3k4kTriggerBusTypeEnum}s"), BusSource, BusType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_Configure(BusSource, BusType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_BusSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_BusSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BusSource"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_BusSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>(_T("ITkdpo2k3k4kTriggerABus.BusSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusSourceB1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTrigABusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_get_BusSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_put_BusSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("put_BusSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("put_BusSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>(_T("ITkdpo2k3k4kTriggerABus.BusSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:SOU %{Tkdpo2k3k4kTrigABusSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_put_BusSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_ParallelData(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_ParallelData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelData"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_ParallelData"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABus.ParallelData"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:PAR:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_get_ParallelData(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_put_ParallelData(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("put_ParallelData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("put_ParallelData"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABus.ParallelData"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:PAR:VAL %$Bs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_put_ParallelData(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_BusType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerBusTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_BusType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BusType"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerBusTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_BusType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerBusTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerBusTypeEnum>(_T("ITkdpo2k3k4kTriggerABus.BusType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerBusTypeI2C;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerBusTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_get_BusType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_put_BusType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerBusTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("put_BusType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("put_BusType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerBusTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerBusTypeEnum>(_T("ITkdpo2k3k4kTriggerABus.BusType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS %{Tkdpo2k3k4kTriggerBusTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABus_put_BusType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_Audio(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusAudio** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_Audio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Audio"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_Audio"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_Audio(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_CAN(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusCAN** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_CAN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CAN"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_CAN"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_CAN(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_Flexray(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusFlexray** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_Flexray"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Flexray"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_Flexray"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_Flexray(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_I2C(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusI2C** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_I2C"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_I2C"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_I2C"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_I2C(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_LIN(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusLIN** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_LIN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LIN"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_LIN"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_LIN(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_RS232(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusRS232** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_RS232"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_RS232"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_RS232(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_SPI(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusSPI** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_SPI"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SPI"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_SPI"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_SPI(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABus_get_USB(Tkdpo2k3k4k* pT, ITkdpo2k3k4kTriggerABusUSB** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABus), _T("ITkdpo2k3k4kTriggerABus"), _T("get_USB"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_USB"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABus"), _T("get_USB"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kTriggerABus_get_USB(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:COND %{Tkdpo2k3k4kTrigABusAudioConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusAudio.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:HIVAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusAudio.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:HIVAL %$Bs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_DataOffset(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOffset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataOffset"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusAudio.DataOffset"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:OFFS?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_DataOffset(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataOffset"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusAudio.DataOffset"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:OFFS %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioDataQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioDataQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:QUAL?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioDataQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:QUAL %{Tkdpo2k3k4kTrigABusAudioDataQualifierEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusAudio.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusAudio.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:VAL %$Bs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_get_DataWord(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataWord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataWord"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("get_DataWord"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataWord"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataWord"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.DataWord"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioDataAlignmentEither;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:WORD?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_get_DataWord(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusAudio_put_DataWord(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusAudio), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataWord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusAudio"), _T("put_DataWord"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataWord"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataWord"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>(_T("ITkdpo2k3k4kTriggerABusAudio.DataWord"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:WORD %{Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusAudio_put_DataWord(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:COND %{Tkdpo2k3k4kTrigABusCANConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:QUAL?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:QUAL %{Tkdpo2k3k4kTrigABusCANQualifierEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusCAN.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusCAN.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_DataDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANDataDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataDirection"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANDataDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataDirection"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.DataDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANDataDirectionNOCARE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:DIR?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANDataDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_DataDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANDataDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataDirection"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.DataDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:DIR %{Tkdpo2k3k4kTrigABusCANDataDirectionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusCAN.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusCAN.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_FrameType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANFrameTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrameType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANFrameTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_FrameType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.FrameType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANFrameTypeData;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:FRAME?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANFrameTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_FrameType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANFrameTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_FrameType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.FrameType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:FRAME %{Tkdpo2k3k4kTrigABusCANFrameTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_AddressMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANAddressModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressMode"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANAddressModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_AddressMode"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.AddressMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANAddressModeStandard;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:MOD?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANAddressModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_AddressMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANAddressModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_AddressMode"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>(_T("ITkdpo2k3k4kTriggerABusCAN.AddressMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:MOD %{Tkdpo2k3k4kTrigABusCANAddressModeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_get_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusCAN.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusCAN_put_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusCAN), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusCAN"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusCAN.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusCAN_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ConfigureCycleCount(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureCycleCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureCycleCount"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Qualifier), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:HIVAL %$BQs;:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:VAL %$BQs"), BusSource, HighValue, BusSource, Qualifier, BusSource, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ConfigureCycleCount(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ReadCycleCount(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadCycleCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("HighValue"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("Qualifier"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadCycleCount"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Qualifier), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:HIVAL?;:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:QUAL?;:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:VAL?"), BusSource, BusSource, BusSource);
		strResp = _T("%$Bs;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ReadCycleCount(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ConfigureData(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, long Offset, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, long Size, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureData"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Offset), IN_PARAM(Qualifier), IN_PARAM(Size), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:DAT:HIVAL %$BQs;OFFS %d;QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;SIZ %d;VAL %$BQs"), BusSource, HighValue, Offset, Qualifier, Size, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ConfigureData(BusSource, HighValue, Offset, Qualifier, Size, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ReadData(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, long* Offset, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, long* Size, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("HighValue"));
	if (Offset == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Offset"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Qualifier"));
	if (Size == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Size"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadData"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Offset), OUT_PARAM(Qualifier), OUT_PARAM(Size), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:DAT:HIVAL?;OFFS?;QUAL?;SIZ?;VAL?"), BusSource);
		strResp = _T("%$Bs;%d;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%d;%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ReadData(BusSource, HighValue, Offset, Qualifier, Size, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ConfigureFrameID(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureFrameID"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureFrameID"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Qualifier), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMEID:HIVAL %$BQs;QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;VAL %$BQs"), BusSource, HighValue, Qualifier, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ConfigureFrameID(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ReadFrameID(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadFrameID"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("HighValue"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("Qualifier"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadFrameID"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Qualifier), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMEID:HIVAL?;QUAL?;VAL?"), BusSource);
		strResp = _T("%$Bs;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ReadFrameID(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ConfigureHeader(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR CRC, BSTR CycleCount, BSTR FrameID, BSTR IndicatorBits, BSTR PayloadLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureHeader"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ConfigureHeader"), &hr, IN_PARAM(BusSource), IN_PARAM(CRC), IN_PARAM(CycleCount), IN_PARAM(FrameID), IN_PARAM(IndicatorBits), IN_PARAM(PayloadLength), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:HEADER:CRC %$BQs;CYCLE %$BQs;FRAMEID %$BQs;INDB %$BQs;PAYL %$BQs"), BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ConfigureHeader(BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_ReadHeader(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* CRC, BSTR* CycleCount, BSTR* FrameID, BSTR* IndicatorBits, BSTR* PayloadLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadHeader"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (CRC == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("CRC"));
	if (CycleCount == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("CycleCount"));
	if (FrameID == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("FrameID"));
	if (IndicatorBits == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("IndicatorBits"));
	if (PayloadLength == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("PayloadLength"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("ReadHeader"), &hr, IN_PARAM(BusSource), OUT_PARAM(CRC), OUT_PARAM(CycleCount), OUT_PARAM(FrameID), OUT_PARAM(IndicatorBits), OUT_PARAM(PayloadLength), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:HEADER:CRC?;CYCLE?;FRAMEID?;INDB?;PAYL?"), BusSource);
		strResp = _T("%$Bs;%$Bs;%$Bs;%$Bs;%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_ReadHeader(BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:COND %{Tkdpo2k3k4kTrigABusFlexrayConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_get_EOFType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_EOFType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_EOFType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_EOFType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.EOFType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayEOFTypeStatic;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:EOFTYPE?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_get_EOFType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_put_EOFType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_EOFType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_EOFType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.EOFType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:EOFTYPE %{Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_put_EOFType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_get_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayErrorTypeCRCHeader;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:ERRTYPE?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_put_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:ERRTYPE %{Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_get_FrameType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrameType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("get_FrameType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.FrameType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayFrameTypeNormal;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMET?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_get_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusFlexray_put_FrameType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusFlexray), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusFlexray"), _T("put_FrameType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>(_T("ITkdpo2k3k4kTriggerABusFlexray.FrameType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMET %{Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusFlexray_put_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusI2C.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusI2C.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusI2C.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusI2C.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusI2C.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusI2C.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_DataDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CDataDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataDirection"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CDataDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_DataDirection"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.DataDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CDataDirectionNOCARE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:DIR?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CDataDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_DataDirection(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CDataDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_DataDirection"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.DataDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:DIR %{Tkdpo2k3k4kTrigABusI2CDataDirectionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CTrigConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CTrigConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CTrigConditionSTART;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CTrigConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CTrigConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:COND %{Tkdpo2k3k4kTrigABusI2CTrigConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_get_AddressMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CAddrModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressMode"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CAddrModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("get_AddressMode"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.AddressMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CAddrModeADDR7;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:MOD?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CAddrModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_get_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusI2C_put_AddressMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CAddrModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusI2C), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusI2C"), _T("put_AddressMode"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>(_T("ITkdpo2k3k4kTriggerABusI2C.AddressMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:MOD %{Tkdpo2k3k4kTrigABusI2CAddrModeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusI2C_put_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:QUAL?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_DataQualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:QUAL %{Tkdpo2k3k4kTrigABusLINQualifierEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:HIVAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:HIVAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINConditionSYNCField;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:COND %{Tkdpo2k3k4kTrigABusLINConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusLIN.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusLIN.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINErrorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINErrorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINErrorTypeSYNC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ERRTYPE?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINErrorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINErrorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>(_T("ITkdpo2k3k4kTriggerABusLIN.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ERRTYPE %{Tkdpo2k3k4kTrigABusLINErrorTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_get_IdentifierValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_IdentifierValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IdentifierValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("get_IdentifierValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.IdentifierValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ID:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_get_IdentifierValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusLIN_put_IdentifierValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusLIN), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_IdentifierValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusLIN"), _T("put_IdentifierValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusLIN.IdentifierValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ID:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusLIN_put_IdentifierValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusRS232ConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusRS232ConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>(_T("ITkdpo2k3k4kTriggerABusRS232.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusRS232ConditionTXStart;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusRS232ConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusRS232ConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>(_T("ITkdpo2k3k4kTriggerABusRS232.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:COND %{Tkdpo2k3k4kTrigABusRS232ConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_get_RXDataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_RXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RXDataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_RXDataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusRS232.RXDataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_get_RXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_put_RXDataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_RXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_RXDataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusRS232.RXDataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_put_RXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_get_RXDataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_RXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RXDataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_RXDataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusRS232.RXDataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_get_RXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_put_RXDataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_RXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_RXDataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusRS232.RXDataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:VAL %$Bs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_put_RXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_get_TXDataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_TXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TXDataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_TXDataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusRS232.TXDataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_get_TXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_put_TXDataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_TXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_TXDataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusRS232.TXDataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_put_TXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_get_TXDataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_TXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TXDataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("get_TXDataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusRS232.TXDataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_get_TXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusRS232_put_TXDataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusRS232), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_TXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusRS232"), _T("put_TXDataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusRS232.TXDataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:VAL %$Bs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusRS232_put_TXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusSPIConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusSPIConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>(_T("ITkdpo2k3k4kTriggerABusSPI.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusSPIConditionSS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusSPIConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusSPIConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>(_T("ITkdpo2k3k4kTriggerABusSPI.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:COND %{Tkdpo2k3k4kTrigABusSPIConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_get_DataINValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataINValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataINValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataINValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusSPI.DataINValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:IN:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_get_DataINValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_put_DataINValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataINValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataINValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusSPI.DataINValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:IN:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_put_DataINValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_get_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusSPI.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_put_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusSPI.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_get_DataOUTValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataOUTValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOUTValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("get_DataOUTValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusSPI.DataOUTValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:OUT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_get_DataOUTValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusSPI_put_DataOUTValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusSPI), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataOUTValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusSPI"), _T("put_DataOUTValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusSPI.DataOUTValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:OUT:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusSPI_put_DataOUTValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBConditionSYNC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:COND?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:COND %{Tkdpo2k3k4kTrigABusUSBConditionEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:HIVAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_DataHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:HIVAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_DataOffset(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOffset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataOffset"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusUSB.DataOffset"));
		if (!pSimData->GetValue(val))
		{
			*val = -1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:OFFS?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_DataOffset(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataOffset"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusUSB.DataOffset"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:OFFS %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_Qualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_Qualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Qualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_Qualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.Qualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBQualifierEQUAL;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:QUAL?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_Qualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_Qualifier(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_Qualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_Qualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.Qualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:QUAL %{Tkdpo2k3k4kTrigABusUSBQualifierEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_Qualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_DataValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusUSB.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:SIZ?"), BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_DataSize(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kTriggerABusUSB.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:SIZ %d"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_AddressValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_DataType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBDATATypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBDATATypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_DataType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.DataType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBDATATypeAny;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:TYP?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBDATATypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_DataType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_DataType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBDATATypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_DataType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.DataType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:TYP %{Tkdpo2k3k4kTrigABusUSBDATATypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_DataType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_AddressHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_AddressHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_AddressHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.AddressHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:HIVAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_AddressHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_AddressHighValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_AddressHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_AddressHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.AddressHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:HIVAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_AddressHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_EndPointValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_EndPointValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_EndPointValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_EndPointValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.EndPointValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ENDP:VAL?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_EndPointValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_EndPointValue(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_EndPointValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_EndPointValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.EndPointValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ENDP:VAL %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_EndPointValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBERRTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBERRTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBERRTypePID;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ERRTYPE?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBERRTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_ErrorType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBERRTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ERRTYPE %{Tkdpo2k3k4kTrigABusUSBERRTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_HandshakeType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_HandshakeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HandshakeType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_HandshakeType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.HandshakeType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBHandshakeTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:HANDSHAKET?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_HandshakeType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_HandshakeType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_HandshakeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_HandshakeType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.HandshakeType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:HANDSHAKET %{Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_HandshakeType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_SOFFrameNumber(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_SOFFrameNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SOFFrameNumber"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_SOFFrameNumber"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.SOFFrameNumber"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SOFFRAMENUM?"), BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_SOFFrameNumber(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_SOFFrameNumber(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_SOFFrameNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_SOFFrameNumber"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kTriggerABusUSB.SOFFrameNumber"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SOFFRAMENUM %$BQs"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_SOFFrameNumber(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_SpecialType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_SpecialType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpecialType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_SpecialType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.SpecialType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBSpecialTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SPECIALT?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_SpecialType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_SpecialType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_SpecialType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_SpecialType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.SpecialType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SPECIALT %{Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_SpecialType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_get_TokenType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBTokenTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_TokenType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TokenType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBTokenTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("get_TokenType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.TokenType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBTokenTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:TOKENT?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBTokenTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_get_TokenType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerABusUSB_put_TokenType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBTokenTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerABusUSB), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_TokenType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerABusUSB"), _T("put_TokenType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>(_T("ITkdpo2k3k4kTriggerABusUSB.TokenType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:TOKENT %{Tkdpo2k3k4kTrigABusUSBTokenTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerABusUSB_put_TokenType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_Configure(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("Configure"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE LOGI;:TRIG:A:LOGI:CLA LOGIC"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_Configure();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ConfigureSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSourceEnum Source, Tkdpo2k3k4kTriggerLogicInputChannelEnum Input, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureSource"), &hr, IN_PARAM(Source), IN_PARAM(Input), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGIC:INPUT:%{Tkdpo2k3k4kTriggerSourceEnum}s %{Tkdpo2k3k4kTriggerLogicInputChannelEnum}s;:TRIGGER:A:LOGIC:THRESHOLD:%{Tkdpo2k3k4kTriggerSourceEnum}s %0.15lg"), Source, Input, Source, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ConfigureSource(Source, Input, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ReadSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSourceEnum Source, Tkdpo2k3k4kTriggerLogicInputChannelEnum* Input, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Input == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSource"), _T("Input"));
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSource"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadSource"), &hr, IN_PARAM(Source), OUT_PARAM(Input), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGIC:INPUT:%{Tkdpo2k3k4kTriggerSourceEnum}s?;:TRIGGER:A:LOGIC:THRESHOLD:%{Tkdpo2k3k4kTriggerSourceEnum}s?"), Source, Source);
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicInputChannelEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ReadSource(Source, Input, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ConfigurePattern(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPatternConditionEnum Condition, double LessLimit, double MoreLimit, Tkdpo2k3k4kTriggerLogicOperatorTypeEnum LogicOperatorType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigurePattern"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigurePattern"), &hr, IN_PARAM(Condition), IN_PARAM(LessLimit), IN_PARAM(MoreLimit), IN_PARAM(LogicOperatorType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGI:PATTERN:WHEN %{Tkdpo2k3k4kTriggerPatternConditionEnum}s;:TRIGGER:A:LOGI:PATTERN:WHEN:LESSLIMIT %0.15lg;:TRIGGER:A:LOGI:PATTERN:WHEN:MORELIMIT %0.15lg;:TRIGGER:A:LOGIC:FUNCTION %{Tkdpo2k3k4kTriggerLogicOperatorTypeEnum}s"), Condition, LessLimit, MoreLimit, LogicOperatorType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ConfigurePattern(Condition, LessLimit, MoreLimit, LogicOperatorType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ReadPattern(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPatternConditionEnum* Condition, double* LessLimit, double* MoreLimit, Tkdpo2k3k4kTriggerLogicOperatorTypeEnum* LogicOperatorType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadPattern"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Condition == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPattern"), _T("Condition"));
	if (LessLimit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPattern"), _T("LessLimit"));
	if (MoreLimit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPattern"), _T("MoreLimit"));
	if (LogicOperatorType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPattern"), _T("LogicOperatorType"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadPattern"), &hr, OUT_PARAM(Condition), OUT_PARAM(LessLimit), OUT_PARAM(MoreLimit), OUT_PARAM(LogicOperatorType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGI:PATTERN:WHEN?;:TRIGGER:A:LOGI:PATTERN:WHEN:LESSLIMIT?;:TRIGGER:A:LOGI:PATTERN:WHEN:MORELIMIT?;:TRIGGER:A:LOGIC:FUNCTION?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerPatternConditionEnum}[^;];%lg;%lg;%{Tkdpo2k3k4kTriggerLogicOperatorTypeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ReadPattern(Condition, LessLimit, MoreLimit, LogicOperatorType);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ConfigureClock(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicClockSourceEnum Source, Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum EdgeType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureClock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureClock"), &hr, IN_PARAM(Source), IN_PARAM(EdgeType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:INP:CLOC:SOU %{Tkdpo2k3k4kTriggerLogicClockSourceEnum}s ;:TRIG:A:LOGI:INP:CLOC:EDGE %{Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum}s"), Source, EdgeType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ConfigureClock(Source, EdgeType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ReadClock(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicClockSourceEnum* Source, Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum* EdgeType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadClock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadClock"), _T("Source"));
	if (EdgeType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadClock"), _T("EdgeType"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadClock"), &hr, OUT_PARAM(Source), OUT_PARAM(EdgeType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:INP:CLOC:SOU?;:TRIG:A:LOGI:INP:CLOC:EDGE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicClockSourceEnum}[^;];%{Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ReadClock(Source, EdgeType);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ConfigureRF(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicInputChannelEnum Input, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureRF"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ConfigureRF"), &hr, IN_PARAM(Input), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRF"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGIC:INPUT:RF %{Tkdpo2k3k4kTriggerLogicInputChannelEnum}s;:TRIGGER:A:LOGIC:THRESHOLD:RF %0.15lg"), Input, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ConfigureRF(Input, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_ReadRF(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicInputChannelEnum* Input, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadRF"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Input == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRF"), _T("Input"));
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRF"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("ReadRF"), &hr, OUT_PARAM(Input), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRF"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:LOGIC:INPUT:RF?;:TRIGGER:A:LOGIC:THRESHOLD:RF?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicInputChannelEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_ReadRF(Input, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPatternConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerPatternConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_Condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPatternConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPatternConditionEnum>(_T("ITkdpo2k3k4kTriggerALogic.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerPatternConditionTrue;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerPatternConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_get_Condition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPatternConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_Condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPatternConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPatternConditionEnum>(_T("ITkdpo2k3k4kTriggerALogic.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE %{Tkdpo2k3k4kTriggerPatternConditionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_put_Condition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_get_LessLimit(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_LessLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LessLimit"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_LessLimit"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerALogic.LessLimit"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE:LESSL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_get_LessLimit(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_put_LessLimit(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_LessLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_LessLimit"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerALogic.LessLimit"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE:LESSL %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_put_LessLimit(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_get_MoreLimit(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_MoreLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MoreLimit"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_MoreLimit"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerALogic.MoreLimit"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE:MOREL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_get_MoreLimit(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_put_MoreLimit(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_MoreLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_MoreLimit"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerALogic.MoreLimit"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:PAT:WHE:MOREL %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_put_MoreLimit(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_get_Function(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicOperatorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_Function"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Function"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerLogicOperatorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("get_Function"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerLogicOperatorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerLogicOperatorTypeEnum>(_T("ITkdpo2k3k4kTriggerALogic.Function"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerLogicOperatorTypeAND;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:FUNC?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicOperatorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_get_Function(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerALogic_put_Function(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLogicOperatorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerALogic), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_Function"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerALogic"), _T("put_Function"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerLogicOperatorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerLogicOperatorTypeEnum>(_T("ITkdpo2k3k4kTriggerALogic.Function"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:LOGI:FUNC %{Tkdpo2k3k4kTriggerLogicOperatorTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerALogic_put_Function(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_Configure(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("Configure"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE PULSE;:TRIG:A:PUL:CLA WID"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_Configure();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTiggerPulseSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kTiggerPulseSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTiggerPulseSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTiggerPulseSourceEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTiggerPulseSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTiggerPulseSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTiggerPulseSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTiggerPulseSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTiggerPulseSourceEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:SOU %{Tkdpo2k3k4kTiggerPulseSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPulseWidthConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerPulseWidthConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPulseWidthConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPulseWidthConditionEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerPulseWidthConditionLESSthan;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:WHE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerPulseWidthConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_Condition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPulseWidthConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPulseWidthConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPulseWidthConditionEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:WHE %{Tkdpo2k3k4kTriggerPulseWidthConditionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_Condition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPulsePolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Polarity"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerPulsePolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPulsePolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPulsePolarityEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Polarity"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerPulsePolarityPositive;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:POL?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerPulsePolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_Polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerPulsePolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerPulsePolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerPulsePolarityEnum>(_T("ITkdpo2k3k4kTriggerAWidth.Polarity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:POL %{Tkdpo2k3k4kTriggerPulsePolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_Polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_Width(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Width"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_Width"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.Width"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:WID?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_Width(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_Width(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_Width"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.Width"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:PULSEW:WID %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_Width(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_LowerLimit(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_LowerLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LowerLimit"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_LowerLimit"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.LowerLimit"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:WIDTH:LOWLIMIT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_LowerLimit(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_LowerLimit(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_LowerLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_LowerLimit"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.LowerLimit"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:WIDTH:LOWLIMIT %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_LowerLimit(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_get_UpperLimit(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_UpperLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_UpperLimit"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("get_UpperLimit"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.UpperLimit"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.200000E-008;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:WIDTH:HIGHLIMIT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_get_UpperLimit(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAWidth_put_UpperLimit(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAWidth), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_UpperLimit"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAWidth"), _T("put_UpperLimit"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAWidth.UpperLimit"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:WIDTH:HIGHLIMIT %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAWidth_put_UpperLimit(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_Configure(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("Configure"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYPE LOGIC;:TRIG:A:PUL:CLA RUN"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_Configure();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Polarity"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerRuntPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>(_T("ITkdpo2k3k4kTriggerARunt.Polarity"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerRuntPolarityPOSitive;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:POL?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerRuntPolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_Polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>(_T("ITkdpo2k3k4kTriggerARunt.Polarity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:POL %{Tkdpo2k3k4kTriggerRuntPolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_Polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelChannelEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kChannelChannelEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelChannelEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelChannelEnum>(_T("ITkdpo2k3k4kTriggerARunt.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kChannelChannel1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kChannelChannelEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelChannelEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelChannelEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelChannelEnum>(_T("ITkdpo2k3k4kTriggerARunt.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:SOU %{Tkdpo2k3k4kChannelChannelEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerRuntConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntConditionEnum>(_T("ITkdpo2k3k4kTriggerARunt.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerRuntConditionOccurs;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:WHE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerRuntConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_Condition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntConditionEnum>(_T("ITkdpo2k3k4kTriggerARunt.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:WHE %{Tkdpo2k3k4kTriggerRuntConditionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_Condition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_Width(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Width"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_Width"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.Width"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:WID?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_Width(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_Width(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Width"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_Width"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.Width"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:RUNT:WID %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_Width(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_LowerLevel(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_LowerLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LowerLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_LowerLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.LowerLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:RUNT:THRESHOLD:LOW?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_LowerLevel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_LowerLevel(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_LowerLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_LowerLevel"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.LowerLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:RUNT:THRESHOLD:LOW %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_LowerLevel(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_get_UpperLevel(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_UpperLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_UpperLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("get_UpperLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.UpperLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:RUNT:THRESHOLD:HIGH?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_get_UpperLevel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerARunt_put_UpperLevel(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerARunt), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_UpperLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerARunt"), _T("put_UpperLevel"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerARunt.UpperLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:PULSE:RUNT:THRESHOLD:HIGH %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerARunt_put_UpperLevel(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_Configure(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("Configure"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":TRIGGER:A:TYPE LOGIC;:TRIG:A:LOGI:CLA SETH"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_Configure();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_DataSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_DataSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSource"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSource2Enum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_DataSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerASetupHold.DataSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSource2CH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:DAT:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSource2Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_DataSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_DataSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_DataSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_DataSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerASetupHold.DataSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:DAT:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_DataSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_DataLevel(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_DataLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_DataLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.DataLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 9.910000E+037;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:DAT:THR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_DataLevel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_DataLevel(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_DataLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_DataLevel"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.DataLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:DAT:THR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_DataLevel(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_ClockSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ClockSource"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSource2Enum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSource2CH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSource2Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_ClockSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_ClockSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_ClockSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_ClockEdge(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ClockEdge"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSlopeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockEdge"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockEdge"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSlopeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:EDGE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_ClockEdge(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_ClockEdge(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockEdge"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockEdge"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:EDGE %{Tkdpo2k3k4kTriggerSlopeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_ClockEdge(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_ClockLevel(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ClockLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_ClockLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:THR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_ClockLevel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_ClockLevel(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_ClockLevel"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.ClockLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:CLOC:THR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_ClockLevel(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_HoldTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_HoldTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HoldTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_HoldTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.HoldTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:HOLDT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_HoldTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_HoldTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_HoldTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_HoldTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.HoldTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:HOLDT %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_HoldTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_get_SetTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_SetTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SetTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("get_SetTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.SetTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:SETT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_get_SetTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerASetupHold_put_SetTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerASetupHold), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_SetTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerASetupHold"), _T("put_SetTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerASetupHold.SetTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:SETH:SETT %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerASetupHold_put_SetTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_Configure(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("Configure"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TYP PULS;:TRIG:A:PUL:CLA TRAN"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_Configure();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kChannelEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelEnum>(_T("ITkdpo2k3k4kTriggerATransition.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kChannel1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TRAN:SOURCE?"));
		strResp = _T("%{Tkdpo2k3k4kChannelEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelEnum>(_T("ITkdpo2k3k4kTriggerATransition.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:A:TRAN:SOURCE %{Tkdpo2k3k4kChannelEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_get_DeltaTime(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_DeltaTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DeltaTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_DeltaTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerATransition.DeltaTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:DELT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_get_DeltaTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_put_DeltaTime(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_DeltaTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_DeltaTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerATransition.DeltaTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:DELT %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_put_DeltaTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_get_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerTransitionConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerTransitionConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Condition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerTransitionConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerTransitionConditionEnum>(_T("ITkdpo2k3k4kTriggerATransition.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerTransitionConditionSlower;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:WHE?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerTransitionConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_get_Condition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_put_Condition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerTransitionConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Condition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerTransitionConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerTransitionConditionEnum>(_T("ITkdpo2k3k4kTriggerATransition.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:WHE %{Tkdpo2k3k4kTriggerTransitionConditionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_put_Condition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_get_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Polarity"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerRuntPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("get_Polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>(_T("ITkdpo2k3k4kTriggerATransition.Polarity"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerRuntPolarityPOSitive;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:POL?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerRuntPolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_get_Polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerATransition_put_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerRuntPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerATransition), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerATransition"), _T("put_Polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerRuntPolarityEnum>(_T("ITkdpo2k3k4kTriggerATransition.Polarity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:TRAN:POL %{Tkdpo2k3k4kTriggerRuntPolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerATransition_put_Polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_FieldHoldoff(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_FieldHoldoff"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FieldHoldoff"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_FieldHoldoff"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.FieldHoldoff"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:HOLD:FIELD?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_FieldHoldoff(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_FieldHoldoff(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_FieldHoldoff"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_FieldHoldoff"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.FieldHoldoff"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:HOLD:FIELD %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_FieldHoldoff(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoPolarityEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Polarity"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoPolarityEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Polarity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoPolarityEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Polarity"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoPolarityPositive;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:POL?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoPolarityEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_Polarity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_Polarity(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoPolarityEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Polarity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Polarity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoPolarityEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoPolarityEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Polarity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:POL %{Tkdpo2k3k4kTriggerVideoPolarityEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_Polarity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSourceEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSourceEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:SOU %{Tkdpo2k3k4kTriggerSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_Standard(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoStandardEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Standard"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Standard"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoStandardEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_Standard"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoStandardEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoStandardEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Standard"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoStandardNTSc;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:STAN?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoStandardEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_Standard(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_Standard(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoStandardEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Standard"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_Standard"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoStandardEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoStandardEnum>(_T("ITkdpo2k3k4kTriggerAVideo.Standard"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:STAN %{Tkdpo2k3k4kTriggerVideoStandardEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_Standard(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_TriggerOn(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoFieldsEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_TriggerOn"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TriggerOn"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoFieldsEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_TriggerOn"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoFieldsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoFieldsEnum>(_T("ITkdpo2k3k4kTriggerAVideo.TriggerOn"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoFieldsALLLines;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:FIELD?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoFieldsEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_TriggerOn(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_TriggerOn(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoFieldsEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_TriggerOn"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_TriggerOn"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoFieldsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoFieldsEnum>(_T("ITkdpo2k3k4kTriggerAVideo.TriggerOn"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:FIELD %{Tkdpo2k3k4kTriggerVideoFieldsEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_TriggerOn(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_CustomLinePeriod(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomLinePeriod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CustomLinePeriod"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomLinePeriod"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomLinePeriod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomLinePeriod"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.CustomLinePeriod"));
		if (!pSimData->GetValue(val))
		{
			*val = 6.356000E-005;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:LINEP?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_CustomLinePeriod(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_CustomLinePeriod(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomLinePeriod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomLinePeriod"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomLinePeriod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomLinePeriod"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.CustomLinePeriod"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:LINEP %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_CustomLinePeriod(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_CustomScan(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoCustomScanEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomScan"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CustomScan"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoCustomScanEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomScan"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomScan"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomScan"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoCustomScanEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoCustomScanEnum>(_T("ITkdpo2k3k4kTriggerAVideo.CustomScan"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoCustomScanRATE15K;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:SCAN?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoCustomScanEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_CustomScan(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_CustomScan(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoCustomScanEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomScan"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomScan"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomScan"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomScan"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoCustomScanEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoCustomScanEnum>(_T("ITkdpo2k3k4kTriggerAVideo.CustomScan"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:SCAN %{Tkdpo2k3k4kTriggerVideoCustomScanEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_CustomScan(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_CustomSyncInterval(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomSyncInterval"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CustomSyncInterval"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomSyncInterval"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomSyncInterval"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomSyncInterval"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.CustomSyncInterval"));
		if (!pSimData->GetValue(val))
		{
			*val = 4.720000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:SYNCI?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_CustomSyncInterval(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_CustomSyncInterval(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomSyncInterval"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomSyncInterval"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomSyncInterval"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomSyncInterval"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerAVideo.CustomSyncInterval"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:SYNCI %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_CustomSyncInterval(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_CustomFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoCustomFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CustomFormat"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoCustomFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_CustomFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomFormat"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CustomFormat"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoCustomFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoCustomFormatEnum>(_T("ITkdpo2k3k4kTriggerAVideo.CustomFormat"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoCustomFormatPROGressive;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:FORM?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoCustomFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_CustomFormat(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_CustomFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoCustomFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_CustomFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomFormat"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CustomFormat"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoCustomFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoCustomFormatEnum>(_T("ITkdpo2k3k4kTriggerAVideo.CustomFormat"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:CUST:FORM %{Tkdpo2k3k4kTriggerVideoCustomFormatEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_CustomFormat(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_get_HDTvFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoHDTvFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_HDTvFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HDTvFormat"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerVideoHDTvFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("get_HDTvFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HDTvFormat"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HDTvFormat"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoHDTvFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoHDTvFormatEnum>(_T("ITkdpo2k3k4kTriggerAVideo.HDTvFormat"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerVideoHDTvFormatHD1080P24;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:HD:FORM?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerVideoHDTvFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_get_HDTvFormat(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerAVideo_put_HDTvFormat(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerVideoHDTvFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerAVideo), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_HDTvFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerAVideo"), _T("put_HDTvFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HDTvFormat"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HDTvFormat"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerVideoHDTvFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerVideoHDTvFormatEnum>(_T("ITkdpo2k3k4kTriggerAVideo.HDTvFormat"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:VID:HD:FORM %{Tkdpo2k3k4kTriggerVideoHDTvFormatEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerAVideo_put_HDTvFormat(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_Configure(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum Source, double Level, Tkdpo2k3k4kTriggerSlopeEnum Slope, Tkdpo2k3k4kTriggerEdgeCouplingEnum Coupling)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(Slope), IN_PARAM(Coupling), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Configure"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIGGER:B:TYP EDGE;:TRIG:B:EDGE:SLO %{Tkdpo2k3k4kTriggerSlopeEnum}s;:TRIG:B:EDGE:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s;:TRIG:B:LEV %0.15lg;:TRIG:B:EDGE:COUP %{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s"), Slope, Source, Level, Coupling);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_Configure(Source, Level, Slope, Coupling);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_Read(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* Source, double* Level, Tkdpo2k3k4kTriggerSlopeEnum* Slope, Tkdpo2k3k4kTriggerEdgeCouplingEnum* Coupling)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source"));
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Level"));
	if (Slope == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Slope"));
	if (Coupling == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Coupling"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("Read"), &hr, OUT_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(Slope), OUT_PARAM(Coupling), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("Read"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:SLO?;:TRIG:B:EDGE:SOU?;:TRIG:B:LEV?;:TRIG:B:EDGE:COUP?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}[^;];%{Tkdpo2k3k4kTriggerSource2Enum}[^;];%lg;%{Tkdpo2k3k4kTriggerEdgeCouplingEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_Read(Source, Level, Slope, Coupling);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_get_Coupling(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerEdgeCouplingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Coupling"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerEdgeCouplingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Coupling"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Coupling"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Coupling"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>(_T("ITkdpo2k3k4kTriggerBEdge.Coupling"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerEdgeCouplingDC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:COUP?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_get_Coupling(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_put_Coupling(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerEdgeCouplingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Coupling"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Coupling"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Coupling"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerEdgeCouplingEnum>(_T("ITkdpo2k3k4kTriggerBEdge.Coupling"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:COUP %{Tkdpo2k3k4kTriggerEdgeCouplingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_put_Coupling(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_get_Level(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Level"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Level"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Level"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Level"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerBEdge.Level"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:LEV?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_get_Level(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_put_Level(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Level"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Level"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Level"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Level"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kTriggerBEdge.Level"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:LEV %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_put_Level(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_put_LevelEnum(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerLevelEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_LevelEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_LevelEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_LevelEnum"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_LevelEnum"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:LEV %{Tkdpo2k3k4kTriggerLevelEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_put_LevelEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_get_Slope(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Slope"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSlopeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Slope"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Slope"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Slope"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerBEdge.Slope"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSlopeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:SLO?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_get_Slope(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_put_Slope(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSlopeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Slope"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Slope"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Slope"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Slope"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSlopeEnum>(_T("ITkdpo2k3k4kTriggerBEdge.Slope"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:SLO %{Tkdpo2k3k4kTriggerSlopeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_put_Slope(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kTriggerSource2Enum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerBEdge.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTriggerSource2CH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kTriggerSource2Enum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kTriggerBEdge_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kTriggerSource2Enum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kTriggerBEdge), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kTriggerBEdge"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTriggerSource2Enum>(_T("ITkdpo2k3k4kTriggerBEdge.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:B:EDGE:SOU %{Tkdpo2k3k4kTriggerSource2Enum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kTriggerBEdge_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReferences_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReferences), _T("ITkdpo2k3k4kReferences"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReferences"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kReferences_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReferences_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReferences), _T("ITkdpo2k3k4kReferences"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReferences"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kReferences_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReferences_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kReference** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReferences), _T("ITkdpo2k3k4kReferences"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReferences"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kReferences_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannels_get_Count(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannels), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kDigitalChannels_get_Count(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannels_get_Name(Tkdpo2k3k4k* pT, long Index, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannels), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Name"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Name"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Name"), &hr, IN_PARAM(Index), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kDigitalChannels_get_Name(Index, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannels_get_Item(Tkdpo2k3k4k* pT, BSTR Name, ITkdpo2k3k4kDigitalChannel** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannels), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Item"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Item"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannels"), _T("get_Item"), &hr, IN_PARAM(Name), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kDigitalChannels_get_Item(Name, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_get_Mode(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("get_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mode"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("get_Mode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kZoom.Mode"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:MOD?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_get_Mode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_put_Mode(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("put_Mode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("put_Mode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kZoom.Mode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:MOD %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_put_Mode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_get_Position(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kZoom.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:POS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_put_Position(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kZoom.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:POS %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_get_Scale(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("get_Scale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Scale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("get_Scale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kZoom.Scale"));
		if (!pSimData->GetValue(val))
		{
			*val = 4.000000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:SCA?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_get_Scale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_put_Scale(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("put_Scale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("put_Scale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kZoom.Scale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:SCA %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_put_Scale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_get_State(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kZoom.State"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_put_State(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kZoom.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kZoom_get_Factor(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kZoom), _T("ITkdpo2k3k4kZoom"), _T("get_Factor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Factor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kZoom"), _T("get_Factor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ZOO:ZOOM1:FAC?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kZoom_get_Factor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_WriteWaveformToReference(Tkdpo2k3k4k* pT, Tkdpo2k3k4kReferenceEnum WaveformReference, SAFEARRAY** WaveformArray, double InitialX, double XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("WriteWaveformToReference"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("WriteWaveformToReference"), &hr, IN_PARAM(WaveformReference), IN_PARAM(*WaveformArray), IN_PARAM(InitialX), IN_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_WriteWaveformToReference(WaveformReference, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_SaveWaveformToFile(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, BSTR FileName, Tkdpo2k3k4kWaveformFileFormatEnum FileFormat)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("SaveWaveformToFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("SaveWaveformToFile"), &hr, IN_PARAM(WaveformSource), IN_PARAM(FileName), IN_PARAM(FileFormat), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_SaveWaveformToFile(WaveformSource, FileName, FileFormat);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_ReadWaveformMinMax(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, long MaxTimeMiliseconds, SAFEARRAY** MinWaveform, SAFEARRAY** MaxWaveform, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("ReadWaveformMinMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (MinWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("MinWaveform"));
	if (MaxWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("MaxWaveform"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("ReadWaveformMinMax"), &hr, IN_PARAM(WaveformSource), IN_PARAM(MaxTimeMiliseconds), OUT_PARAM(MinWaveform), OUT_PARAM(MaxWaveform), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_ReadWaveformMinMax(WaveformSource, MaxTimeMiliseconds, MinWaveform, MaxWaveform, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_ReadWaveform(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, long MaxTimeMiliseconds, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("ReadWaveform"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("ReadWaveform"), &hr, IN_PARAM(WaveformSource), IN_PARAM(MaxTimeMiliseconds), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_ReadWaveform(WaveformSource, MaxTimeMiliseconds, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_IsWaveformElementInvalid(Tkdpo2k3k4k* pT, double Element, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("IsWaveformElementInvalid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("IsWaveformElementInvalid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("IsWaveformElementInvalid"), &hr, IN_PARAM(Element), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kWaveformTransfer_IsWaveformElementInvalid(Element, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_InitiateAcquisition(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("InitiateAcquisition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("InitiateAcquisition"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("ACQUIRE:STATE 1"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_InitiateAcquisition();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformWithinZoom(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformWithinZoom"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinZoom"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinZoom"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinZoom"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformWithinZoom"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformWithinZoom(WaveformSource, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformWithinCursor(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformWithinCursor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinCursor"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinCursor"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformWithinCursor"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformWithinCursor"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformWithinCursor(WaveformSource, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformStartStop(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, long Start, long Stop, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformStartStop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformStartStop"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformStartStop"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformStartStop"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformStartStop"), &hr, IN_PARAM(WaveformSource), IN_PARAM(Start), IN_PARAM(Stop), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformStartStop(WaveformSource, Start, Stop, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformMinMax(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, SAFEARRAY** MinWaveform, SAFEARRAY** MaxWaveform, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformMinMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (MinWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("MinWaveform"));
	if (MaxWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("MaxWaveform"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformMinMax"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(MinWaveform), OUT_PARAM(MaxWaveform), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformMinMax(WaveformSource, MinWaveform, MaxWaveform, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformHighResolution(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformHighResolution"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformHighResolution"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformHighResolution"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformHighResolution"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformHighResolution"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformHighResolution(WaveformSource, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveformDigitizedLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kChannelEnum WaveformSource, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement, double* YZero, double* YMult, double* YOffset)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformDigitizedLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("XIncrement"));
	if (YZero == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("YZero"));
	if (YMult == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("YMult"));
	if (YOffset == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformDigitizedLevel"), _T("YOffset"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveformDigitizedLevel"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), OUT_PARAM(YZero), OUT_PARAM(YMult), OUT_PARAM(YOffset), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveformDigitizedLevel(WaveformSource, WaveformArray, InitialX, XIncrement, YZero, YMult, YOffset);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_FetchWaveform(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveform"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("FetchWaveform"), &hr, IN_PARAM(WaveformSource), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_FetchWaveform(WaveformSource, WaveformArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_CopyWaveformToClipboard(Tkdpo2k3k4k* pT, Tkdpo2k3k4kSourceEnum WaveformSource, long Start, long Stop, long* PointsCopied)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("CopyWaveformToClipboard"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (PointsCopied == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("CopyWaveformToClipboard"), _T("PointsCopied"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("CopyWaveformToClipboard"), &hr, IN_PARAM(WaveformSource), IN_PARAM(Start), IN_PARAM(Stop), INOUT_PARAM(PointsCopied), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_CopyWaveformToClipboard(WaveformSource, Start, Stop, PointsCopied);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_GetAvailableDataCompositions(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("GetAvailableDataCompositions"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetAvailableDataCompositions"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("GetAvailableDataCompositions"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableDataCompositions"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:COMP:AVAIL?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_GetAvailableDataCompositions(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_GetAvailableFilterVuFrequencies(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("GetAvailableFilterVuFrequencies"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetAvailableFilterVuFrequencies"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("GetAvailableFilterVuFrequencies"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetAvailableFilterVuFrequencies"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("FILTERV:FREQ:AVAIL?"));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_GetAvailableFilterVuFrequencies(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataWidth(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataWidth"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataWidth"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataWidth"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("WFMO:BYT_N?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataWidth(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataWidth(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataWidth"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataWidth"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("WFMO:BYT_N %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataWidth(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataStop(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataStop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataStop"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataStop"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataStop"));
		if (!pSimData->GetValue(val))
		{
			*val = 10000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:STOP?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataStop(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataStop(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataStop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataStop"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataStop"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:STOP %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataStop(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataStart(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataStart"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataStart"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataStart"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataStart"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:STAR?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataStart(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataStart(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataStart"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataStart"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kWaveformTransfer.DataStart"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:STAR %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataStart(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSource"), _T("val"));
	*val = (Tkdpo2k3k4kDataSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataSourceEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDataSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DATA:SOURCE?"));
		strResp = _T("%{Tkdpo2k3k4kDataSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataSourceEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DATA:SOURCE %{Tkdpo2k3k4kDataSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_WaveformRecordLength(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_WaveformRecordLength"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_WaveformRecordLength"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_WaveformRecordLength"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_WaveformRecordLength"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+004;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("WFMO:RECO?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_WaveformRecordLength(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataComposition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataCompositionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataComposition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataComposition"), _T("val"));
	*val = (Tkdpo2k3k4kDataCompositionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataComposition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataComposition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataCompositionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataCompositionEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataComposition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDataCompositionSingularYT;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:COMP?"));
		strResp = _T("%{Tkdpo2k3k4kDataCompositionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataComposition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataComposition(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataCompositionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataComposition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataComposition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataComposition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataCompositionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataCompositionEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataComposition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:COMP %{Tkdpo2k3k4kDataCompositionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataComposition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_DataResolution(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataResolutionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataResolution"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataResolution"), _T("val"));
	*val = (Tkdpo2k3k4kDataResolutionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_DataResolution"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataResolution"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataResolutionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataResolutionEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataResolution"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDataResolutionFull;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:RESO?"));
		strResp = _T("%{Tkdpo2k3k4kDataResolutionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_DataResolution(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_DataResolution(Tkdpo2k3k4k* pT, Tkdpo2k3k4kDataResolutionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataResolution"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_DataResolution"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataResolution"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDataResolutionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDataResolutionEnum>(_T("ITkdpo2k3k4kWaveformTransfer.DataResolution"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DAT:RESO %{Tkdpo2k3k4kDataResolutionEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_DataResolution(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_get_FillterVuFrequency(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_FillterVuFrequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FillterVuFrequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("get_FillterVuFrequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FillterVuFrequency"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kWaveformTransfer.FillterVuFrequency"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+008;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("FILTERV:FREQ?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_get_FillterVuFrequency(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kWaveformTransfer_put_FillterVuFrequency(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kWaveformTransfer), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_FillterVuFrequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kWaveformTransfer"), _T("put_FillterVuFrequency"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MDO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FillterVuFrequency"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kWaveformTransfer.FillterVuFrequency"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("FILTERV:FREQ %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kWaveformTransfer_put_FillterVuFrequency(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kUtilityEx_Calibrate(Tkdpo2k3k4k* pT, Tkdpo2k3k4kUtilityExCalibrationStatusEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kUtilityEx), _T("ITkdpo2k3k4kUtilityEx"), _T("Calibrate"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Calibrate"), _T("val"));
	*val = (Tkdpo2k3k4kUtilityExCalibrationStatusEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kUtilityEx"), _T("Calibrate"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("%{Tkdpo2k3k4kUtilityExCalibrationStatusEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kUtilityEx_Calibrate(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kUtilityEx_SelfTest(Tkdpo2k3k4k* pT, long* TestResult, BSTR* TestMessage)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kUtilityEx), _T("ITkdpo2k3k4kUtilityEx"), _T("SelfTest"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (TestResult == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("SelfTest"), _T("TestResult"));
	if (TestMessage == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("SelfTest"), _T("TestMessage"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kUtilityEx"), _T("SelfTest"), &hr, OUT_PARAM(TestResult), OUT_PARAM(TestMessage), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kUtilityEx_SelfTest(TestResult, TestMessage);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kUtilityEx_get_FrontPanelLock(Tkdpo2k3k4k* pT, Tkdpo2k3k4kUtilityExFrontPanelLockEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kUtilityEx), _T("ITkdpo2k3k4kUtilityEx"), _T("get_FrontPanelLock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrontPanelLock"), _T("val"));
	*val = (Tkdpo2k3k4kUtilityExFrontPanelLockEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kUtilityEx"), _T("get_FrontPanelLock"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kUtilityExFrontPanelLockEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kUtilityExFrontPanelLockEnum>(_T("ITkdpo2k3k4kUtilityEx.FrontPanelLock"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kUtilityExFrontPanelLockNone;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("LOCK?"));
		strResp = _T("%{Tkdpo2k3k4kUtilityExFrontPanelLockEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kUtilityEx_get_FrontPanelLock(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kUtilityEx_put_FrontPanelLock(Tkdpo2k3k4k* pT, Tkdpo2k3k4kUtilityExFrontPanelLockEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kUtilityEx), _T("ITkdpo2k3k4kUtilityEx"), _T("put_FrontPanelLock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kUtilityEx"), _T("put_FrontPanelLock"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kUtilityExFrontPanelLockEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kUtilityExFrontPanelLockEnum>(_T("ITkdpo2k3k4kUtilityEx.FrontPanelLock"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("LOCK %{Tkdpo2k3k4kUtilityExFrontPanelLockEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kUtilityEx_put_FrontPanelLock(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_GetOPC(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("GetOPC"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetOPC"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("GetOPC"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kInstrumentIO_GetOPC(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_Query(Tkdpo2k3k4k* pT, BSTR Command, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("Query"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Query"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("Query"), &hr, IN_PARAM(Command), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("%$Bs"), Command);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kInstrumentIO_Query(Command, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_ReadPartialString(Tkdpo2k3k4k* pT, long Length, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("ReadPartialString"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPartialString"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("ReadPartialString"), &hr, IN_PARAM(Length), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kInstrumentIO_ReadPartialString(Length, val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_ReadString(Tkdpo2k3k4k* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("ReadString"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadString"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("ReadString"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kInstrumentIO_ReadString(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_WriteString(Tkdpo2k3k4k* pT, BSTR Command)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("WriteString"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("WriteString"), &hr, IN_PARAM(Command), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("%$Bs"), Command);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kInstrumentIO_WriteString(Command);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kInstrumentIO_get_IOSession(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kInstrumentIO), _T("ITkdpo2k3k4kInstrumentIO"), _T("get_IOSession"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IOSession"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kInstrumentIO"), _T("get_IOSession"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kInstrumentIO_get_IOSession(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_ConfigureRefLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, double ReferenceLevelHysteresis, double Mid)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ConfigureRefLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ConfigureRefLevel"), &hr, IN_PARAM(ReferenceLevelType), IN_PARAM(ReferenceLevelHysteresis), IN_PARAM(Mid), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureRefLevel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:METH %{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s;HYST %0.15lg;%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:MID %0.15lg"), ReferenceLevelType, ReferenceLevelHysteresis, ReferenceLevelType, Mid);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_ConfigureRefLevel(ReferenceLevelType, ReferenceLevelHysteresis, Mid);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_ReadRefLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum* ReferenceLevelType, double* ReferenceLevelHysteresis, double* Mid)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ReadRefLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (ReferenceLevelType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRefLevel"), _T("ReferenceLevelType"));
	if (ReferenceLevelHysteresis == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRefLevel"), _T("ReferenceLevelHysteresis"));
	if (Mid == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRefLevel"), _T("Mid"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ReadRefLevel"), &hr, OUT_PARAM(ReferenceLevelType), OUT_PARAM(ReferenceLevelHysteresis), OUT_PARAM(Mid), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadRefLevel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:METH?;HYST?"));
		strResp = _T("%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_ReadRefLevel(ReferenceLevelType, ReferenceLevelHysteresis, Mid);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_SetDefaultRefLevel(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("SetDefaultRefLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("SetDefaultRefLevel"), &hr, IN_PARAM(ReferenceLevelType), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetDefaultRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetDefaultRefLevel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s SETTODEF"), ReferenceLevelType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_SetDefaultRefLevel(ReferenceLevelType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_ResetStatistics(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ResetStatistics"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("ResetStatistics"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ResetStatistics"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ResetStatistics"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:STATI RESET"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_ResetStatistics();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kPowerTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysis.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerTypeNONe;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kPowerTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysis.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:TYP %{Tkdpo2k3k4kPowerTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_VoltageSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_VoltageSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VoltageSource"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_VoltageSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VoltageSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VoltageSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.VoltageSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:VOLTAGESO?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_VoltageSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_VoltageSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_VoltageSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_VoltageSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VoltageSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VoltageSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.VoltageSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:VOLTAGESO %{Tkdpo2k3k4kPowerSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_VoltageSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_CurrentSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_CurrentSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CurrentSource"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_CurrentSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CurrentSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CurrentSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.CurrentSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSourceCH2;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:CURRENTSO?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_CurrentSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_CurrentSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_CurrentSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_CurrentSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CurrentSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CurrentSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.CurrentSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:CURRENTSO %{Tkdpo2k3k4kPowerSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_CurrentSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_DisplayState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_DisplayState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysis.DisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:DIS?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_DisplayState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_DisplayState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_DisplayState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysis.DisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:DIS %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_DisplayState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Indicator(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Indicator"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Indicator"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Indicator"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysis.Indicator"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:INDIC?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Indicator(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_Indicator(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Indicator"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Indicator"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysis.Indicator"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:INDIC %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_Indicator(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_GateSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGateSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_GateSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_GateSource"), _T("val"));
	*val = (Tkdpo2k3k4kPowerGateSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_GateSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GateSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_GateSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerGateSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerGateSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.GateSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerGateSourceNone;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:GATESO?"));
		strResp = _T("%{Tkdpo2k3k4kPowerGateSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_GateSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_GateSource(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGateSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_GateSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_GateSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GateSource"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_GateSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerGateSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerGateSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysis.GateSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:GATESO %{Tkdpo2k3k4kPowerGateSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_GateSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Gating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGatingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Gating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Gating"), _T("val"));
	*val = (Tkdpo2k3k4kPowerGatingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Gating"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Gating"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Gating"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerGatingEnum>(_T("ITkdpo2k3k4kPowerAnalysis.Gating"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerGatingOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:GAT?"));
		strResp = _T("%{Tkdpo2k3k4kPowerGatingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Gating(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_Gating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGatingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Gating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_Gating"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Gating"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Gating"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerGatingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerGatingEnum>(_T("ITkdpo2k3k4kPowerAnalysis.Gating"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:GAT %{Tkdpo2k3k4kPowerGatingEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_Gating(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_RefLevelHigh(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RefLevelHigh"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelHigh"), &hr, IN_PARAM(ReferenceLevelType), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelHigh"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelHigh"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysis.RefLevelHigh"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:HIGH?"), ReferenceLevelType);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_RefLevelHigh(ReferenceLevelType, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_RefLevelHigh(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelHigh"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelHigh"), &hr, IN_PARAM(ReferenceLevelType), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelHigh"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelHigh"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysis.RefLevelHigh"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:HIGH %0.15lg"), ReferenceLevelType, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_RefLevelHigh(ReferenceLevelType, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_RefLevelLow(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RefLevelLow"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelLow"), &hr, IN_PARAM(ReferenceLevelType), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLow"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLow"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysis.RefLevelLow"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOW?"), ReferenceLevelType);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_RefLevelLow(ReferenceLevelType, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_RefLevelLow(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelLow"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelLow"), &hr, IN_PARAM(ReferenceLevelType), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLow"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLow"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysis.RefLevelLow"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOW %0.15lg"), ReferenceLevelType, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_RefLevelLow(ReferenceLevelType, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_RefLevelMid(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, long Number, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RefLevelMid"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_RefLevelMid"), &hr, IN_PARAM(ReferenceLevelType), IN_PARAM(Number), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelMid"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelMid"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:MID%d?"), ReferenceLevelType, Number);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_RefLevelMid(ReferenceLevelType, Number, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_RefLevelMid(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum ReferenceLevelType, long Number, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelMid"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_RefLevelMid"), &hr, IN_PARAM(ReferenceLevelType), IN_PARAM(Number), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelMid"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelMid"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:MID%d %0.15lg"), ReferenceLevelType, Number, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_RefLevelMid(ReferenceLevelType, Number, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_StatisticsMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerStatisticsModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_StatisticsMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StatisticsMode"), _T("val"));
	*val = (Tkdpo2k3k4kPowerStatisticsModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_StatisticsMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerStatisticsModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerStatisticsModeEnum>(_T("ITkdpo2k3k4kPowerAnalysis.StatisticsMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerStatisticsModeALL;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:STATI:MODE?"));
		strResp = _T("%{Tkdpo2k3k4kPowerStatisticsModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_StatisticsMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_StatisticsMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerStatisticsModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_StatisticsMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_StatisticsMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerStatisticsModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerStatisticsModeEnum>(_T("ITkdpo2k3k4kPowerAnalysis.StatisticsMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:STATI:MODE %{Tkdpo2k3k4kPowerStatisticsModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_StatisticsMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_StatisticsSamples(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_StatisticsSamples"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StatisticsSamples"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_StatisticsSamples"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsSamples"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StatisticsSamples"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kPowerAnalysis.StatisticsSamples"));
		if (!pSimData->GetValue(val))
		{
			*val = 32;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:STATI:WEI?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_get_StatisticsSamples(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_put_StatisticsSamples(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_StatisticsSamples"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("put_StatisticsSamples"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsSamples"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_StatisticsSamples"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetRangeCheck())
	{
		if (val < 2 || val > 1000)
		{
			hr = pT->ReportInvalidValueError(_T("put_StatisticsSamples"), _T("val"), val);
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kPowerAnalysis.StatisticsSamples"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:STATI:WEI %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysis_put_StatisticsSamples(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Quality(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisQuality** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Quality"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Quality"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Quality"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Quality(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_SwitchingLoss(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisSwitchingLoss** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_SwitchingLoss"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SwitchingLoss"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_SwitchingLoss"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_SwitchingLoss(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Harmonics(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisHarmonics** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Harmonics"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Harmonics"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Harmonics"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Harmonics(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Ripple(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisRipple** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Ripple"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Ripple"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Ripple"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Ripple(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_Modulation(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisModulation** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Modulation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Modulation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_Modulation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_Modulation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysis_get_SafeOperatingArea(Tkdpo2k3k4k* pT, ITkdpo2k3k4kPowerAnalysisSafeOperatingArea** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysis), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_SafeOperatingArea"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SafeOperatingArea"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysis"), _T("get_SafeOperatingArea"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysis_get_SafeOperatingArea(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_FrequencyReference(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_FrequencyReference"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrequencyReference"), _T("val"));
	*val = (Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_FrequencyReference"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrequencyReference"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrequencyReference"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum>(_T("ITkdpo2k3k4kPowerAnalysisQuality.FrequencyReference"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerQualityFrequencyReferenceVoltage;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:FREQREF?"));
		strResp = _T("%{Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_FrequencyReference(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_put_FrequencyReference(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_FrequencyReference"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_FrequencyReference"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrequencyReference"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrequencyReference"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum>(_T("ITkdpo2k3k4kPowerAnalysisQuality.FrequencyReference"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:FREQREF %{Tkdpo2k3k4kPowerQualityFrequencyReferenceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_put_FrequencyReference(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_put_AllMeasDisplayState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_AllMeasDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_AllMeasDisplayState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AllMeasDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AllMeasDisplayState"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:DIS:APP %{VARIANT_BOOL}s;FREQ %{VARIANT_BOOL}s;ICREST %{VARIANT_BOOL}s;IRMS %{VARIANT_BOOL}s;PHASE %{VARIANT_BOOL}s;POWERFAC %{VARIANT_BOOL}s;REACT %{VARIANT_BOOL}s;TRUE %{VARIANT_BOOL}s;VCREST %{VARIANT_BOOL}s;VRMS %{VARIANT_BOOL}s"), val, val, val, val, val, val, val, val, val, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_put_AllMeasDisplayState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_MeasDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerQualityDisplayMeasurementEnum DisplayMeasurement, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_MeasDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MeasDisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_MeasDisplayState"), &hr, IN_PARAM(DisplayMeasurement), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MeasDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MeasDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysisQuality.MeasDisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:DIS:%{Tkdpo2k3k4kPowerQualityDisplayMeasurementEnum}s?"), DisplayMeasurement);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_MeasDisplayState(DisplayMeasurement, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_put_MeasDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerQualityDisplayMeasurementEnum DisplayMeasurement, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_MeasDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("put_MeasDisplayState"), &hr, IN_PARAM(DisplayMeasurement), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MeasDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MeasDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysisQuality.MeasDisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:DIS:%{Tkdpo2k3k4kPowerQualityDisplayMeasurementEnum}s %{VARIANT_BOOL}s"), DisplayMeasurement, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_put_MeasDisplayState(DisplayMeasurement, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_ApparentPower(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ApparentPower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ApparentPower"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ApparentPower"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ApparentPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ApparentPower"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+002;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:APP?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_ApparentPower(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_Frequency(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_Frequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Frequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_Frequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Frequency"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 6.000000E+001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:FREQ?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_Frequency(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_ICrestFactor(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ICrestFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ICrestFactor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ICrestFactor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ICrestFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ICrestFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:ICREST?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_ICrestFactor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_PhaseAngle(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_PhaseAngle"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_PhaseAngle"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_PhaseAngle"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PhaseAngle"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PhaseAngle"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:PHASE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_PhaseAngle(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_PowerFactor(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_PowerFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_PowerFactor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_PowerFactor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PowerFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PowerFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:POWERFAC?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_PowerFactor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_ReactivePower(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ReactivePower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReactivePower"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_ReactivePower"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReactivePower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReactivePower"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+002;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:REACT?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_ReactivePower(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_TruePower(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_TruePower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TruePower"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_TruePower"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TruePower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TruePower"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+003;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:TRUE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_TruePower(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_VRMS(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_VRMS"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VRMS"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_VRMS"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VRMS"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VRMS"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:VRMS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_VRMS(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_IRMS(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_IRMS"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IRMS"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_IRMS"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IRMS"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IRMS"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:IRMS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_IRMS(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisQuality_get_VCrestFactor(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisQuality), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_VCrestFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VCrestFactor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisQuality"), _T("get_VCrestFactor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VCrestFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VCrestFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:QUAL:VCREST?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisQuality_get_VCrestFactor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ConfigureGating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGatingPolarityEnum Polarity, double TurnOn)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ConfigureGating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ConfigureGating"), &hr, IN_PARAM(Polarity), IN_PARAM(TurnOn), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureGating"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureGating"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:GAT:POL %{Tkdpo2k3k4kPowerGatingPolarityEnum}s;TURNON %0.15lg"), Polarity, TurnOn);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ConfigureGating(Polarity, TurnOn);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadGating(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerGatingPolarityEnum* Polarity, double* TurnOn)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadGating"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Polarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadGating"), _T("Polarity"));
	if (TurnOn == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadGating"), _T("TurnOn"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadGating"), &hr, OUT_PARAM(Polarity), OUT_PARAM(TurnOn), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadGating"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadGating"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:GAT:POL?;TURNON?"));
		strResp = _T("%{Tkdpo2k3k4kPowerGatingPolarityEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadGating(Polarity, TurnOn);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTOffLosses(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossTypeEnum Type, double Mean, double Min, double Max)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTOffLosses"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTOffLosses"), &hr, IN_PARAM(Type), IN_PARAM(Mean), IN_PARAM(Min), IN_PARAM(Max), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTOffLosses"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTOffLosses"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:TOFF:%{Tkdpo2k3k4kPowerSwitchingLossTypeEnum}s:MEAN?;MIN?;MAX?"), Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTOffLosses(Type, Mean, Min, Max);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTOnLosses(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossTypeEnum Type, double Mean, double Min, double Max)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTOnLosses"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTOnLosses"), &hr, IN_PARAM(Type), IN_PARAM(Mean), IN_PARAM(Min), IN_PARAM(Max), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTOnLosses"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTOnLosses"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:TON:%{Tkdpo2k3k4kPowerSwitchingLossTypeEnum}s:MEAN?;MIN?;MAX?"), Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTOnLosses(Type, Mean, Min, Max);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTotalLosses(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossTypeEnum Type, double Mean, double Min, double Max)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTotalLosses"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadTotalLosses"), &hr, IN_PARAM(Type), IN_PARAM(Mean), IN_PARAM(Min), IN_PARAM(Max), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTotalLosses"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadTotalLosses"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:TOTAL:%{Tkdpo2k3k4kPowerSwitchingLossTypeEnum}s:MEAN?;MIN?;MAX?"), Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadTotalLosses(Type, Mean, Min, Max);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadConductionLosses(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossTypeEnum Type, double Mean, double Min, double Max)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadConductionLosses"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("ReadConductionLosses"), &hr, IN_PARAM(Type), IN_PARAM(Mean), IN_PARAM(Min), IN_PARAM(Max), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadConductionLosses"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadConductionLosses"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:COND:%{Tkdpo2k3k4kPowerSwitchingLossTypeEnum}s:MEAN?;MIN?;MAX?"), Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_ReadConductionLosses(Type, Mean, Min, Max);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RefLevelLowVoltage(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum Type, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RefLevelLowVoltage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RefLevelLowVoltage"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RefLevelLowVoltage"), &hr, IN_PARAM(Type), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLowVoltage"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLowVoltage"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.RefLevelLowVoltage"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOWV?"), Type);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RefLevelLowVoltage(Type, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RefLevelLowVoltage(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum Type, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RefLevelLowVoltage"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RefLevelLowVoltage"), &hr, IN_PARAM(Type), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLowVoltage"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLowVoltage"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.RefLevelLowVoltage"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOWV %0.15lg"), Type, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RefLevelLowVoltage(Type, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RefLevelLowCurrent(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum Type, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RefLevelLowCurrent"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RefLevelLowCurrent"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RefLevelLowCurrent"), &hr, IN_PARAM(Type), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLowCurrent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RefLevelLowCurrent"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOWC?"), Type);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RefLevelLowCurrent(Type, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RefLevelLowCurrent(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerReferenceLevelTypeEnum Type, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RefLevelLowCurrent"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RefLevelLowCurrent"), &hr, IN_PARAM(Type), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLowCurrent"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RefLevelLowCurrent"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:REFL:%{Tkdpo2k3k4kPowerReferenceLevelTypeEnum}s:LOWC %0.15lg"), Type, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RefLevelLowCurrent(Type, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_ConductionCalculation(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_ConductionCalculation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ConductionCalculation"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_ConductionCalculation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ConductionCalculation"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ConductionCalculation"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.ConductionCalculation"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSwitchingLossConductionCalculationVoltage;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:CONDCALC?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_ConductionCalculation(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_ConductionCalculation(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_ConductionCalculation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_ConductionCalculation"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ConductionCalculation"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ConductionCalculation"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.ConductionCalculation"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:CONDCALC %{Tkdpo2k3k4kPowerSwitchingLossConductionCalculationEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_ConductionCalculation(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RDSOnValue(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RDSOnValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RDSOnValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_RDSOnValue"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RDSOnValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RDSOnValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.RDSOnValue"));
		if (!pSimData->GetValue(val))
		{
			*val = 2.000000E-002;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:RDS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_RDSOnValue(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RDSOnValue(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RDSOnValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_RDSOnValue"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RDSOnValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RDSOnValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.RDSOnValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:RDS %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_RDSOnValue(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_VCESatValue(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_VCESatValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VCESatValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_VCESatValue"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VCESatValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VCESatValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.VCESatValue"));
		if (!pSimData->GetValue(val))
		{
			*val = 2.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:VCE?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_VCESatValue(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_VCESatValue(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_VCESatValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_VCESatValue"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VCESatValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VCESatValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.VCESatValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:VCE %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_VCESatValue(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_MeasDisplayType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_MeasDisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MeasDisplayType"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_MeasDisplayType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MeasDisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MeasDisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.MeasDisplayType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayALL;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:DIS?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_MeasDisplayType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_MeasDisplayType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_MeasDisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("put_MeasDisplayType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MeasDisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MeasDisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum>(_T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss.MeasDisplayType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:DIS %{Tkdpo2k3k4kPowerSwitchingLossMeasurementDisplayEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_put_MeasDisplayType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_NumberOfCycles(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSwitchingLoss), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_NumberOfCycles"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfCycles"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSwitchingLoss"), _T("get_NumberOfCycles"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfCycles"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfCycles"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SWL:NUMCYC?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSwitchingLoss_get_NumberOfCycles(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_SetParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsFrequencyReferenceEnum FrequencyReference, double FixedReference, long NumberOfHarmonics, Tkdpo2k3k4kPowerHarmonicsSourceEnum HarmonicsSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("SetParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("SetParameters"), &hr, IN_PARAM(FrequencyReference), IN_PARAM(FixedReference), IN_PARAM(NumberOfHarmonics), IN_PARAM(HarmonicsSource), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:FREQR %{Tkdpo2k3k4kPowerHarmonicsFrequencyReferenceEnum}s;:POW:HARM:FREQR:FIXEDFREQV %0.15lg;:POW:HARM:NR_HARM %d;:POW:HARM:SOUR %{Tkdpo2k3k4kPowerHarmonicsSourceEnum}s"), FrequencyReference, FixedReference, NumberOfHarmonics, HarmonicsSource);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_SetParameters(FrequencyReference, FixedReference, NumberOfHarmonics, HarmonicsSource);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_GetParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsFrequencyReferenceEnum* FrequencyReference, double* FixedReference, long* NumberOfHarmonics, Tkdpo2k3k4kPowerHarmonicsSourceEnum* HarmonicsSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("GetParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (FrequencyReference == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetParameters"), _T("FrequencyReference"));
	if (FixedReference == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetParameters"), _T("FixedReference"));
	if (NumberOfHarmonics == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetParameters"), _T("NumberOfHarmonics"));
	if (HarmonicsSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetParameters"), _T("HarmonicsSource"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("GetParameters"), &hr, OUT_PARAM(FrequencyReference), OUT_PARAM(FixedReference), OUT_PARAM(NumberOfHarmonics), OUT_PARAM(HarmonicsSource), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:FREQR?;:POW:HARM:FREQR:FIXEDFREQV?;:POW:HARM:NR_HARM?;:POW:HARM:SOUR?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHarmonicsFrequencyReferenceEnum}[^;];%lg;%d;%{Tkdpo2k3k4kPowerHarmonicsSourceEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_GetParameters(FrequencyReference, FixedReference, NumberOfHarmonics, HarmonicsSource);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_ConfigureIEC(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsIECClassEnum Class, VARIANT_BOOL Filter, double FundamentalCurrent, VARIANT_BOOL Grouping, double InputPower, double LineFrequency, double ObservationPeriod, double PowerFactor)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ConfigureIEC"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ConfigureIEC"), &hr, IN_PARAM(Class), IN_PARAM(Filter), IN_PARAM(FundamentalCurrent), IN_PARAM(Grouping), IN_PARAM(InputPower), IN_PARAM(LineFrequency), IN_PARAM(ObservationPeriod), IN_PARAM(PowerFactor), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureIEC"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureIEC"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:STAND IEC;:POW:HARM:IEC:CLA %{Tkdpo2k3k4kPowerHarmonicsIECClassEnum}s;FIL %{VARIANT_BOOL}s;FUND %0.15lg;GROUP %{VARIANT_BOOL}s;INPUTPOW %0.15lg;LINEFREQ %0.15lg;OBSPER %0.15lg;POWERFAC %0.15lg"), Class, Filter, FundamentalCurrent, Grouping, InputPower, LineFrequency, ObservationPeriod, PowerFactor);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_ConfigureIEC(Class, Filter, FundamentalCurrent, Grouping, InputPower, LineFrequency, ObservationPeriod, PowerFactor);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_ReadIEC(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsIECClassEnum* Class, VARIANT_BOOL* Filter, double* FundamentalCurrent, VARIANT_BOOL* Grouping, double* InputPower, double* LineFrequency, double* ObservationPeriod, double* PowerFactor)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ReadIEC"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Class == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("Class"));
	if (Filter == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("Filter"));
	if (FundamentalCurrent == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("FundamentalCurrent"));
	if (Grouping == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("Grouping"));
	if (InputPower == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("InputPower"));
	if (LineFrequency == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("LineFrequency"));
	if (ObservationPeriod == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("ObservationPeriod"));
	if (PowerFactor == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadIEC"), _T("PowerFactor"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ReadIEC"), &hr, OUT_PARAM(Class), OUT_PARAM(Filter), OUT_PARAM(FundamentalCurrent), OUT_PARAM(Grouping), OUT_PARAM(InputPower), OUT_PARAM(LineFrequency), OUT_PARAM(ObservationPeriod), OUT_PARAM(PowerFactor), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadIEC"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadIEC"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:IEC:CLA?;FIL?;FUND?;GROUP?;INPUTPOW?;LINEFREQ?;OBSPER?;POWERFAC?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHarmonicsIECClassEnum}[^;];%{VARIANT_BOOL}[^;];%lg;%{VARIANT_BOOL}[^;];%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_ReadIEC(Class, Filter, FundamentalCurrent, Grouping, InputPower, LineFrequency, ObservationPeriod, PowerFactor);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_ConfigureMIL(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsMILCurrentCalculatingEnum FundamentalCurrentCalculating, double UserCurrent, double LineFrequency, Tkdpo2k3k4kPowerHamronicsMILPowerLevelEnum PowerLevel)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ConfigureMIL"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ConfigureMIL"), &hr, IN_PARAM(FundamentalCurrentCalculating), IN_PARAM(UserCurrent), IN_PARAM(LineFrequency), IN_PARAM(PowerLevel), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureMIL"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureMIL"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:STAND MIL;:POW:HARM:MIL:LINEFREQ %0.15lg;POWERLEV %{Tkdpo2k3k4kPowerHamronicsMILPowerLevelEnum}s;FUND:CALC %{Tkdpo2k3k4kPowerHarmonicsMILCurrentCalculatingEnum}s;USER:CURR %0.15lg"), LineFrequency, PowerLevel, FundamentalCurrentCalculating, UserCurrent);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_ConfigureMIL(FundamentalCurrentCalculating, UserCurrent, LineFrequency, PowerLevel);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_ReadMIL(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsMILCurrentCalculatingEnum* FundamentalCurrentCalculating, double* UserCurrent, double* LineFrequency, Tkdpo2k3k4kPowerHamronicsMILPowerLevelEnum* PowerLevel)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ReadMIL"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (FundamentalCurrentCalculating == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMIL"), _T("FundamentalCurrentCalculating"));
	if (UserCurrent == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMIL"), _T("UserCurrent"));
	if (LineFrequency == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMIL"), _T("LineFrequency"));
	if (PowerLevel == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMIL"), _T("PowerLevel"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("ReadMIL"), &hr, OUT_PARAM(FundamentalCurrentCalculating), OUT_PARAM(UserCurrent), OUT_PARAM(LineFrequency), OUT_PARAM(PowerLevel), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadMIL"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadMIL"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:MIL:LINEFREQ?;POWERLEV?;FUND:CALC?;USER:CURR?"));
		strResp = _T("%lg;%{Tkdpo2k3k4kPowerHamronicsMILPowerLevelEnum}[^;];%{Tkdpo2k3k4kPowerHarmonicsMILCurrentCalculatingEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_ReadMIL(FundamentalCurrentCalculating, UserCurrent, LineFrequency, PowerLevel);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_SaveResultsToFile(Tkdpo2k3k4k* pT, BSTR Filename)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("SaveResultsToFile"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("SaveResultsToFile"), &hr, IN_PARAM(Filename), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SaveResultsToFile"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SaveResultsToFile"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:SAV %$Bs"), Filename);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_SaveResultsToFile(Filename);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_Standard(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsStandardEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_Standard"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Standard"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHarmonicsStandardEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_Standard"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Standard"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Standard"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsStandardEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsStandardEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.Standard"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerHarmonicsStandardNone;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:STAND?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHarmonicsStandardEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_Standard(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_put_Standard(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsStandardEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_Standard"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_Standard"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Standard"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Standard"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsStandardEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsStandardEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.Standard"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:STAND %{Tkdpo2k3k4kPowerHarmonicsStandardEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_put_Standard(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_DisplaySet(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_DisplaySet"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplaySet"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_DisplaySet"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplaySet"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplaySet"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.DisplaySet"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerHarmonicsDisplaySetAll;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POWER:HARMONICS:DISP:SELECT?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_DisplaySet(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_put_DisplaySet(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_DisplaySet"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_DisplaySet"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplaySet"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplaySet"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.DisplaySet"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POWER:HARMONICS:DISP:SELECT %{Tkdpo2k3k4kPowerHarmonicsDisplaySetEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_put_DisplaySet(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_DisplayType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_DisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayType"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_DisplayType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.DisplayType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerHarmonicsDisplayTypeGraph;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:DISP:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_DisplayType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_put_DisplayType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_DisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("put_DisplayType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisHarmonics.DisplayType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:DISP:TYP %{Tkdpo2k3k4kPowerHarmonicsDisplayTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_put_DisplayType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_OverallResults(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_OverallResults"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_OverallResults"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_OverallResults"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_OverallResults"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_OverallResults"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:PASSF?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_OverallResults(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_RMSResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_RMSResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RMSResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_RMSResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RMSResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RMSResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:RMS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_RMSResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_THDFResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_THDFResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_THDFResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_THDFResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_THDFResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_THDFResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:THDF?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_THDFResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_THDRResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_THDRResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_THDRResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_THDRResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_THDRResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_THDRResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:THDR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_THDRResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicFrequencyResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicFrequencyResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicFrequencyResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicFrequencyResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicFrequencyResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicFrequencyResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 2.400000E+004;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:FREQ?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicFrequencyResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicPhaseResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicPhaseResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicPhaseResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicPhaseResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicPhaseResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicPhaseResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:PHAS?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicPhaseResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicAbsoluteMagnitudeResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicAbsoluteMagnitudeResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicAbsoluteMagnitudeResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicAbsoluteMagnitudeResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicAbsoluteMagnitudeResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicAbsoluteMagnitudeResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:RMS:ABS?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicAbsoluteMagnitudeResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicPercentageMagnitudeResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicPercentageMagnitudeResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicPercentageMagnitudeResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicPercentageMagnitudeResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicPercentageMagnitudeResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicPercentageMagnitudeResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 3.000000E+001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:RMS:PERC?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicPercentageMagnitudeResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HamronicIECMaxResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HamronicIECMaxResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HamronicIECMaxResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HamronicIECMaxResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HamronicIECMaxResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HamronicIECMaxResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:IECMAX?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HamronicIECMaxResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicLimitResult(Tkdpo2k3k4k* pT, long Harmonic, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicLimitResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicLimitResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicLimitResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicLimitResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicLimitResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:LIM?"), Harmonic);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicLimitResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECClassALimitResult(Tkdpo2k3k4k* pT, long Harmonic, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECClassALimitResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicIECClassALimitResult"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECClassALimitResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:TEST:IEC:CLASSALIM?"), Harmonic);
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECClassALimitResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECNormalLimitResult(Tkdpo2k3k4k* pT, long Harmonic, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECNormalLimitResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicIECNormalLimitResult"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECNormalLimitResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicIECNormalLimitResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicIECNormalLimitResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:TEST:IEC:NORMAL?"), Harmonic);
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECNormalLimitResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECHigherLimitResult(Tkdpo2k3k4k* pT, long Harmonic, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECHigherLimitResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicIECHigherLimitResult"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicIECHigherLimitResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicIECHigherLimitResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicIECHigherLimitResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:TEST:IEC:POHCLIM?"), Harmonic);
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicIECHigherLimitResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicMILNormalLimitResult(Tkdpo2k3k4k* pT, long Harmonic, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicMILNormalLimitResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HarmonicMILNormalLimitResult"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_HarmonicMILNormalLimitResult"), &hr, IN_PARAM(Harmonic), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicMILNormalLimitResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HarmonicMILNormalLimitResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:HAR%d:TEST:MIL:NORMAL?"), Harmonic);
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_HarmonicMILNormalLimitResult(Harmonic, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECFundamentalCurrentResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECFundamentalCurrentResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECFundamentalCurrentResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECFundamentalCurrentResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECFundamentalCurrentResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECFundamentalCurrentResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:FUND?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECFundamentalCurrentResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECHarmonic3Result(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECHarmonic3Result"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECHarmonic3Result"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECHarmonic3Result"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECHarmonic3Result"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECHarmonic3Result"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:HARM3ALT?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECHarmonic3Result(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECHarmonic5Result(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerHamronicsPassFailEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECHarmonic5Result"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECHarmonic5Result"), _T("val"));
	*val = (Tkdpo2k3k4kPowerHamronicsPassFailEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECHarmonic5Result"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECHarmonic5Result"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECHarmonic5Result"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerHamronicsPassFailPASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:HARM5ALT?"));
		strResp = _T("%{Tkdpo2k3k4kPowerHamronicsPassFailEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECHarmonic5Result(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPOHCResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPOHCResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECPOHCResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPOHCResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPOHCResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPOHCResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:POHC?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPOHCResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPOHLResult(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPOHLResult"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECPOHLResult"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPOHLResult"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPOHLResult"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPOHLResult"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:POHL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPOHLResult(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECInputPower(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECInputPower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECInputPower"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECInputPower"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECInputPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECInputPower"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:POW?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECInputPower(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPowerFactor(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisHarmonics), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPowerFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IECPowerFactor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisHarmonics"), _T("get_IECPowerFactor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPowerFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_IECPowerFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:HARM:RES:IEC:POWERF?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisHarmonics_get_IECPowerFactor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_DoVerticalAutoSet(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("DoVerticalAutoSet"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("DoVerticalAutoSet"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("DoVerticalAutoSet"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("DoVerticalAutoSet"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP VERTAUTO"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_DoVerticalAutoSet();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_SetOffsetToZero(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("SetOffsetToZero"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("SetOffsetToZero"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetOffsetToZero"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetOffsetToZero"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP VERTDEF"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_SetOffsetToZero();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerRippleSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kPowerRippleSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerRippleSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerRippleSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysisRipple.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerRippleSourceVoltage;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kPowerRippleSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerRippleSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerRippleSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerRippleSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysisRipple.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:SOU %{Tkdpo2k3k4kPowerRippleSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_Value(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Value"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Value"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Value"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Value"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Value"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:RES:AMPL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_Value(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_Max(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Max"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Max"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Max"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Max"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Max"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:RES:MAX?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_Max(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_Mean(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Mean"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mean"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Mean"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mean"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Mean"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:RES:MEAN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_Mean(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_Min(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Min"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Min"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_Min"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Min"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Min"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:RES:MIN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_Min(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisRipple_get_StandardDeviation(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisRipple), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_StandardDeviation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StandardDeviation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisRipple"), _T("get_StandardDeviation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StandardDeviation"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_StandardDeviation"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E-001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:RIPP:RES:STD?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisRipple_get_StandardDeviation(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisModulation_get_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerModulationSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisModulation), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("get_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source"), _T("val"));
	*val = (Tkdpo2k3k4kPowerModulationSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("get_Source"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerModulationSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerModulationSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysisModulation.Source"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerModulationSourceVoltage;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:MOD:SOU?"));
		strResp = _T("%{Tkdpo2k3k4kPowerModulationSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisModulation_get_Source(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisModulation_put_Source(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerModulationSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisModulation), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("put_Source"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("put_Source"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Source"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerModulationSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerModulationSourceEnum>(_T("ITkdpo2k3k4kPowerAnalysisModulation.Source"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:MOD:SOU %{Tkdpo2k3k4kPowerModulationSourceEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisModulation_put_Source(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisModulation_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerModulationTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisModulation), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kPowerModulationTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerModulationTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerModulationTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisModulation.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerModulationTypePWIdth;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:MOD:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kPowerModulationTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisModulation_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisModulation_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerModulationTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisModulation), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisModulation"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerModulationTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerModulationTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisModulation.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:MOD:TYP %{Tkdpo2k3k4kPowerModulationTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisModulation_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ConfigureAxes(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum Type, double YaxesMax, double YaxesMin, double XaxesMax, double XaxesMin)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ConfigureAxes"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ConfigureAxes"), &hr, IN_PARAM(Type), IN_PARAM(YaxesMax), IN_PARAM(YaxesMin), IN_PARAM(XaxesMax), IN_PARAM(XaxesMin), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAxes"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAxes"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:PLOTTYP %{Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum}s;:POW:SOA:%{Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum}s:YMAX %0.15lg;YMIN %0.15lg;XMAX %0.15lg;XMIN %0.15lg"), Type, Type, YaxesMax, YaxesMin, XaxesMax, XaxesMin);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ConfigureAxes(Type, YaxesMax, YaxesMin, XaxesMax, XaxesMin);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ReadAxes(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum Type, double* YaxesMax, double* YaxesMin, double* XaxesMax, double* XaxesMin)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ReadAxes"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (YaxesMax == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAxes"), _T("YaxesMax"));
	if (YaxesMin == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAxes"), _T("YaxesMin"));
	if (XaxesMax == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAxes"), _T("XaxesMax"));
	if (XaxesMin == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAxes"), _T("XaxesMin"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ReadAxes"), &hr, IN_PARAM(Type), OUT_PARAM(YaxesMax), OUT_PARAM(YaxesMin), OUT_PARAM(XaxesMax), OUT_PARAM(XaxesMin), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAxes"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAxes"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:%{Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum}s:YMAX?;YMIN?;XMAX?;XMIN?"), Type);
		strResp = _T("%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ReadAxes(Type, YaxesMax, YaxesMin, XaxesMax, XaxesMin);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ConfigureMaskLimits(Tkdpo2k3k4k* pT, double MaxVoltage, double MaxCurrent, double MaxPower)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ConfigureMaskLimits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ConfigureMaskLimits"), &hr, IN_PARAM(MaxVoltage), IN_PARAM(MaxCurrent), IN_PARAM(MaxPower), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureMaskLimits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureMaskLimits"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:MASK:STATE LIMITS;MAXA %0.15lg;MAXV %0.15lg;MAXW %0.15lg"), MaxCurrent, MaxVoltage, MaxPower);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ConfigureMaskLimits(MaxVoltage, MaxCurrent, MaxPower);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ReadMaskLimits(Tkdpo2k3k4k* pT, double* MaxVoltage, double* MaxCurrent, double* MaxPower)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ReadMaskLimits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (MaxVoltage == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMaskLimits"), _T("MaxVoltage"));
	if (MaxCurrent == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMaskLimits"), _T("MaxCurrent"));
	if (MaxPower == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadMaskLimits"), _T("MaxPower"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("ReadMaskLimits"), &hr, OUT_PARAM(MaxVoltage), OUT_PARAM(MaxCurrent), OUT_PARAM(MaxPower), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadMaskLimits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadMaskLimits"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:MASK:MAXA?;MAXV?;MAXW?"));
		strResp = _T("%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_ReadMaskLimits(MaxVoltage, MaxCurrent, MaxPower);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_SetMaskPoints(Tkdpo2k3k4k* pT, SAFEARRAY** Volts, SAFEARRAY** Amps)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("SetMaskPoints"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("SetMaskPoints"), &hr, IN_PARAM(*Volts), IN_PARAM(*Amps), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetMaskPoints"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetMaskPoints"));
		}
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_SetMaskPoints(Volts, Amps);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_GetMaskPoints(Tkdpo2k3k4k* pT, SAFEARRAY** Volts, SAFEARRAY** Amps)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("GetMaskPoints"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Volts == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMaskPoints"), _T("Volts"));
	if (Amps == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetMaskPoints"), _T("Amps"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("GetMaskPoints"), &hr, OUT_PARAM(Volts), OUT_PARAM(Amps), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetMaskPoints"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetMaskPoints"));
		}
	}

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_GetMaskPoints(Volts, Amps);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_NumberOfPoints(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_NumberOfPoints"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfPoints"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_NumberOfPoints"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfPoints"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfPoints"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:MASK:NR_PT?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_NumberOfPoints(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_PlotType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_PlotType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_PlotType"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_PlotType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PlotType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_PlotType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.PlotType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeLOG;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:PLOTTYP?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_PlotType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_PlotType(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_PlotType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_PlotType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_PlotType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_PlotType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.PlotType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:PLOTTYP %{Tkdpo2k3k4kPowerSafeOperatingAreaPlotTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_PlotType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ActionOnViolation(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ActionOnViolation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ActionOnViolation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ActionOnViolation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ActionOnViolation"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ActionOnViolation"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.ActionOnViolation"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:MASK:STOPO?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ActionOnViolation(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_ActionOnViolation(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_ActionOnViolation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_ActionOnViolation"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ActionOnViolation"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ActionOnViolation"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.ActionOnViolation"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:MASK:STOPO %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_ActionOnViolation(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_MaskState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_MaskState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MaskState"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_MaskState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MaskState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MaskState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.MaskState"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateLIMITS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POWER:SOA:MASK:STATE?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_MaskState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_MaskState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_MaskState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("put_MaskState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MaskState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MaskState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum>(_T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea.MaskState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POWER:SOA:MASK:STATE %{Tkdpo2k3k4kPowerSafeOperatingAreaMaskStateEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_put_MaskState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultFailureSamples(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultFailureSamples"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ResultFailureSamples"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultFailureSamples"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultFailureSamples"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultFailureSamples"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:RES:FAIL:QTY?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultFailureSamples(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultWaveformsAcquired(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultWaveformsAcquired"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ResultWaveformsAcquired"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultWaveformsAcquired"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultWaveformsAcquired"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultWaveformsAcquired"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POW:SOA:RES:NUMAC?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultWaveformsAcquired(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultTestState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kPowerSafeOperatingAreaResultStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kPowerAnalysisSafeOperatingArea), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultTestState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ResultTestState"), _T("val"));
	*val = (Tkdpo2k3k4kPowerSafeOperatingAreaResultStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kPowerAnalysisSafeOperatingArea"), _T("get_ResultTestState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultTestState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ResultTestState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kPowerSafeOperatingAreaResultStatePASS;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("POWER:SOA:RESULT:STATE?"));
		strResp = _T("%{Tkdpo2k3k4kPowerSafeOperatingAreaResultStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kPowerAnalysisSafeOperatingArea_get_ResultTestState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_SpectrumTraceDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Type, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_SpectrumTraceDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpectrumTraceDisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_SpectrumTraceDisplayState"), &hr, IN_PARAM(Type), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumTraceDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.SpectrumTraceDisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEL:%{Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum}s?"), Type);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_SpectrumTraceDisplayState(Type, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_put_SpectrumTraceDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Type, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("put_SpectrumTraceDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("put_SpectrumTraceDisplayState"), &hr, IN_PARAM(Type), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumTraceDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.SpectrumTraceDisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEL:%{Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum}s %{VARIANT_BOOL}s"), Type, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_put_SpectrumTraceDisplayState(Type, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_RFVsTimeTraceDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum Type, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_RFVsTimeTraceDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RFVsTimeTraceDisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_RFVsTimeTraceDisplayState"), &hr, IN_PARAM(Type), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RFVsTimeTraceDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.RFVsTimeTraceDisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEL:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s?"), Type);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_RFVsTimeTraceDisplayState(Type, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_put_RFVsTimeTraceDisplayState(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum Type, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("put_RFVsTimeTraceDisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("put_RFVsTimeTraceDisplayState"), &hr, IN_PARAM(Type), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RFVsTimeTraceDisplayState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.RFVsTimeTraceDisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEL:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s %{VARIANT_BOOL}s"), Type, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_put_RFVsTimeTraceDisplayState(Type, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_SquelchState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_SquelchState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SquelchState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_SquelchState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.SquelchState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SQUELCH:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_SquelchState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_put_SquelchState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("put_SquelchState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("put_SquelchState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequency.SquelchState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SQUELCH:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_put_SquelchState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_SquelchThreshold(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_SquelchThreshold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SquelchThreshold"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_SquelchThreshold"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SquelchThreshold"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequency.SquelchThreshold"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SQUELCH:THR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_SquelchThreshold(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_put_SquelchThreshold(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("put_SquelchThreshold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("put_SquelchThreshold"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SquelchThreshold"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequency.SquelchThreshold"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SQUELCH:THR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_put_SquelchThreshold(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_RF(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyRF** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_RF"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RF"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_RF"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequency_get_RF(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_NumberOfAverages(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_NumberOfAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_NumberOfAverages"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_NumberOfAverages"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_NumberOfAverages"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kFrequency.NumberOfAverages"));
		if (!pSimData->GetValue(val))
		{
			*val = 16;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RF_AVE:NUMAV?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_NumberOfAverages(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_put_NumberOfAverages(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("put_NumberOfAverages"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("put_NumberOfAverages"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_NumberOfAverages"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kFrequency.NumberOfAverages"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RF_AVE:NUMAV %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_put_NumberOfAverages(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_AverageCount(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_AverageCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AverageCount"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_AverageCount"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AverageCount"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RF:RF_AVE:COUN?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequency_get_AverageCount(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_Marker(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyMarker** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_Marker"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Marker"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_Marker"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequency_get_Marker(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequency_get_Trace(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyTrace** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequency), _T("ITkdpo2k3k4kFrequency"), _T("get_Trace"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Trace"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequency"), _T("get_Trace"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequency_get_Trace(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_ConfigureVerticalParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum RFTraceType, double Scale, double Position)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("ConfigureVerticalParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("ConfigureVerticalParameters"), &hr, IN_PARAM(RFTraceType), IN_PARAM(Scale), IN_PARAM(Position), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureVerticalParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s:VERT:SCA %0.15lg;POS %0.15lg"), RFTraceType, Scale, Position);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_ConfigureVerticalParameters(RFTraceType, Scale, Position);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_ReadVerticalParameters(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum RFTraceType, double* Scale, double* Position)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("ReadVerticalParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Scale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadVerticalParameters"), _T("Scale"));
	if (Position == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadVerticalParameters"), _T("Position"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("ReadVerticalParameters"), &hr, IN_PARAM(RFTraceType), OUT_PARAM(Scale), OUT_PARAM(Position), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadVerticalParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s:VERT:SCA?;POS?"), RFTraceType);
		strResp = _T("%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_ReadVerticalParameters(RFTraceType, Scale, Position);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_ConfigureManualDetectionMethod(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Type, Tkdpo2k3k4kFrequencyRFDetectionMethodEnum Method)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("ConfigureManualDetectionMethod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("ConfigureManualDetectionMethod"), &hr, IN_PARAM(Type), IN_PARAM(Method), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManualDetectionMethod"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:DETECT:MOD MAN;:RF:DETECT:%{Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum}s %{Tkdpo2k3k4kFrequencyRFDetectionMethodEnum}s"), Type, Method);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_ConfigureManualDetectionMethod(Type, Method);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_ReadManualDetectionMethod(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Type, Tkdpo2k3k4kFrequencyRFDetectionMethodEnum* Method)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("ReadManualDetectionMethod"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Method == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadManualDetectionMethod"), _T("Method"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("ReadManualDetectionMethod"), &hr, IN_PARAM(Type), OUT_PARAM(Method), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManualDetectionMethod"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:DETECT:%{Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum}s?"), Type);
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFDetectionMethodEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_ReadManualDetectionMethod(Type, Method);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_SpectogramState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpectogramState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequencyRF.SpectogramState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTR:STATE?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_get_SpectogramState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_put_SpectogramState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectogramState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectogramState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequencyRF.SpectogramState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTR:STATE %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_put_SpectogramState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_SpectogramNumberOfSlices(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramNumberOfSlices"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpectogramNumberOfSlices"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramNumberOfSlices"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramNumberOfSlices"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTR:NUMSLICE?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_get_SpectogramNumberOfSlices(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_SpectogramSelectSlice(Tkdpo2k3k4k* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramSelectSlice"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpectogramSelectSlice"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectogramSelectSlice"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectogramSelectSlice"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kFrequencyRF.SpectogramSelectSlice"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTR:SLICESEL?"));
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_get_SpectogramSelectSlice(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_put_SpectogramSelectSlice(Tkdpo2k3k4k* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectogramSelectSlice"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectogramSelectSlice"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectogramSelectSlice"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kFrequencyRF.SpectogramSelectSlice"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTR:SLICESEL %d"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_put_SpectogramSelectSlice(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_DetectionMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFDetectionModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_DetectionMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DetectionMode"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRFDetectionModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_DetectionMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DetectionMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFDetectionModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFDetectionModeEnum>(_T("ITkdpo2k3k4kFrequencyRF.DetectionMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRFDetectionModeAuto;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:DETECT:MOD?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFDetectionModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_get_DetectionMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_put_DetectionMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFDetectionModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_DetectionMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_DetectionMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DetectionMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFDetectionModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFDetectionModeEnum>(_T("ITkdpo2k3k4kFrequencyRF.DetectionMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:DETECT:MOD %{Tkdpo2k3k4kFrequencyRFDetectionModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_put_DetectionMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_SpectrumMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectrumMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpectrumMode"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencySpectrumModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_SpectrumMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpectrumMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencySpectrumModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencySpectrumModeEnum>(_T("ITkdpo2k3k4kFrequencyRF.SpectrumMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencySpectrumModeFREErun;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTRUMM?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencySpectrumModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_get_SpectrumMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_put_SpectrumMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectrumMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("put_SpectrumMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpectrumMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencySpectrumModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencySpectrumModeEnum>(_T("ITkdpo2k3k4kFrequencyRF.SpectrumMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPECTRUMM %{Tkdpo2k3k4kFrequencySpectrumModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRF_put_SpectrumMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_FrequencyAndSpan(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyRFFrequencyAndSpan** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_FrequencyAndSpan"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrequencyAndSpan"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_FrequencyAndSpan"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequencyRF_get_FrequencyAndSpan(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_Amplitude(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyRFAmplitude** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_Amplitude"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Amplitude"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_Amplitude"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequencyRF_get_Amplitude(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRF_get_Bandwidth(Tkdpo2k3k4k* pT, ITkdpo2k3k4kFrequencyRFBandwidth** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRF), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_Bandwidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Bandwidth"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRF"), _T("get_Bandwidth"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kFrequencyRF_get_Bandwidth(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_CenterFrequency(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_CenterFrequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CenterFrequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_CenterFrequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_CenterFrequency"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.CenterFrequency"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.500000E+009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:FREQ?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_CenterFrequency(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_CenterFrequency(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_CenterFrequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_CenterFrequency"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_CenterFrequency"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.CenterFrequency"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:FREQ %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_CenterFrequency(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Span(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Span"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Span"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Span"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Span"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Span"));
		if (!pSimData->GetValue(val))
		{
			*val = 3.000000E+009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPAN?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Span(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Span(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Span"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Span"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Span"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Span"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPAN %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Span(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Start(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Start"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Start"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Start"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Start"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Start"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:STAR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Start(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Start(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Start"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Start"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Start"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Start"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:STAR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Start(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Stop(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Stop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Stop"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("get_Stop"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Stop"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Stop"));
		if (!pSimData->GetValue(val))
		{
			*val = 3.000000E+009;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:STOP?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_get_Stop(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Stop(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFFrequencyAndSpan), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Stop"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan"), _T("put_Stop"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Stop"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFFrequencyAndSpan.Stop"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:STOP %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFFrequencyAndSpan_put_Stop(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_SetAutoRefLevel(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("SetAutoRefLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("SetAutoRefLevel"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAutoRefLevel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RF:REFL AUTO"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_SetAutoRefLevel();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_get_ReferenceLevel(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_ReferenceLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ReferenceLevel"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_ReferenceLevel"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ReferenceLevel"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.ReferenceLevel"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:REFL?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_get_ReferenceLevel(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_put_ReferenceLevel(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_ReferenceLevel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_ReferenceLevel"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ReferenceLevel"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.ReferenceLevel"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:REFL %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_put_ReferenceLevel(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalPosition(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalPosition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalPosition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalPosition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalPosition"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:POS?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalPosition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalPosition(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalPosition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalPosition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalPosition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:POS %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalPosition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalScale(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalScale"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalScale"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SCA?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalScale(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalScale"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalScale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SCA %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalUnits(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalUnits"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("get_VerticalUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalUnits"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalUnits"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRFVerticalUnitsDBM;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:UNI?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_get_VerticalUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalUnits(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFAmplitude), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFAmplitude"), _T("put_VerticalUnits"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalUnits"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum>(_T("ITkdpo2k3k4kFrequencyRFAmplitude.VerticalUnits"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:UNI %{Tkdpo2k3k4kFrequencyRFVerticalUnitsEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFAmplitude_put_VerticalUnits(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_get_RBWMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRBWModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_RBWMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RBWMode"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRBWModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_RBWMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBWMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRBWModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRBWModeEnum>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.RBWMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRBWModeAuto;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RBW:MOD?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRBWModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_get_RBWMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_put_RBWMode(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRBWModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_RBWMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_RBWMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBWMode"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRBWModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRBWModeEnum>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.RBWMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RBW:MOD %{Tkdpo2k3k4kFrequencyRBWModeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_put_RBWMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_get_RBW(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_RBW"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RBW"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_RBW"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_RBW"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.RBW"));
		if (!pSimData->GetValue(val))
		{
			*val = 3.000000E+006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RBW?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_get_RBW(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_put_RBW(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_RBW"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_RBW"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_RBW"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.RBW"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:RBW %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_put_RBW(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_get_SpanRBWRatio(Tkdpo2k3k4k* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_SpanRBWRatio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpanRBWRatio"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_SpanRBWRatio"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpanRBWRatio"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.SpanRBWRatio"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+003;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPANR?"));
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_get_SpanRBWRatio(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_put_SpanRBWRatio(Tkdpo2k3k4k* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_SpanRBWRatio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_SpanRBWRatio"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpanRBWRatio"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.SpanRBWRatio"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:SPANR %0.15lg"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_put_SpanRBWRatio(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_get_Window(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFWindowEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_Window"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Window"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRFWindowEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("get_Window"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Window"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFWindowEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFWindowEnum>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.Window"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRFWindowKAIser;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:WIN?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFWindowEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_get_Window(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyRFBandwidth_put_Window(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFWindowEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyRFBandwidth), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_Window"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyRFBandwidth"), _T("put_Window"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Window"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFWindowEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFWindowEnum>(_T("ITkdpo2k3k4kFrequencyRFBandwidth.Window"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:WIN %{Tkdpo2k3k4kFrequencyRFWindowEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyRFBandwidth_put_Window(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ConfigureChannelPower(Tkdpo2k3k4k* pT, double Bandwidth)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureChannelPower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureChannelPower"), &hr, IN_PARAM(Bandwidth), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureChannelPower"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:TYP CP;:RF:MEASU:CP:CHANBW %0.15lg"), Bandwidth);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ConfigureChannelPower(Bandwidth);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ReadChannelPower(Tkdpo2k3k4k* pT, double* Bandwidth, double* Power)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadChannelPower"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Bandwidth == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadChannelPower"), _T("Bandwidth"));
	if (Power == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadChannelPower"), _T("Power"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadChannelPower"), &hr, OUT_PARAM(Bandwidth), OUT_PARAM(Power), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadChannelPower"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:CP:CHANBW?;:RF:MEASU:CP:POW?"));
		strResp = _T("%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ReadChannelPower(Bandwidth, Power);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ConfigureACPR(Tkdpo2k3k4k* pT, long AdjacentChannels, double ChannelBandwidth, double ChannelSpacing)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureACPR"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureACPR"), &hr, IN_PARAM(AdjacentChannels), IN_PARAM(ChannelBandwidth), IN_PARAM(ChannelSpacing), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureACPR"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:TYP ACPR;:RF:MEASU:ACPR:ADJACENTPAIR %d;CHANSPAC %0.15lg;CHANBW %0.15lg"), AdjacentChannels, ChannelSpacing, ChannelBandwidth);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ConfigureACPR(AdjacentChannels, ChannelBandwidth, ChannelSpacing);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ReadACPR(Tkdpo2k3k4k* pT, long* AdjacentChannels, double* ChannelBandwidth, double* ChannelSpacing, double* Power, double* LowerArea1Ratio, double* LowerArea2Ratio, double* LowerArea3Ratio, double* UpperArea1Ratio, double* UpperArea2Ratio, double* UpperArea3Ratio)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadACPR"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (AdjacentChannels == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("AdjacentChannels"));
	if (ChannelBandwidth == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("ChannelBandwidth"));
	if (ChannelSpacing == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("ChannelSpacing"));
	if (Power == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("Power"));
	if (LowerArea1Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("LowerArea1Ratio"));
	if (LowerArea2Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("LowerArea2Ratio"));
	if (LowerArea3Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("LowerArea3Ratio"));
	if (UpperArea1Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("UpperArea1Ratio"));
	if (UpperArea2Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("UpperArea2Ratio"));
	if (UpperArea3Ratio == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadACPR"), _T("UpperArea3Ratio"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadACPR"), &hr, OUT_PARAM(AdjacentChannels), OUT_PARAM(ChannelBandwidth), OUT_PARAM(ChannelSpacing), OUT_PARAM(Power), OUT_PARAM(LowerArea1Ratio), OUT_PARAM(LowerArea2Ratio), OUT_PARAM(LowerArea3Ratio), OUT_PARAM(UpperArea1Ratio), OUT_PARAM(UpperArea2Ratio), OUT_PARAM(UpperArea3Ratio), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadACPR"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RF:MEASU:ACPR:ADJACENTPAIR?;CHANBW?;CHANSPAC?;POW?;LA1DB?;LA2DB?;LA3DB?;UA1DB?;UA2DB?;UA3DB?"));
		strResp = _T("%d;%lg;%lg;%lg;%lg;%lg;%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ReadACPR(AdjacentChannels, ChannelBandwidth, ChannelSpacing, Power, LowerArea1Ratio, LowerArea2Ratio, LowerArea3Ratio, UpperArea1Ratio, UpperArea2Ratio, UpperArea3Ratio);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ConfigureOBW(Tkdpo2k3k4k* pT, double AnalysisBandwidth, double PercentageDown)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureOBW"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ConfigureOBW"), &hr, IN_PARAM(AnalysisBandwidth), IN_PARAM(PercentageDown), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureOBW"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:TYP OBW;:RF:MEASU:OBW:CHANBW %0.15lg;PERCENT %0.15lg"), AnalysisBandwidth, PercentageDown);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ConfigureOBW(AnalysisBandwidth, PercentageDown);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_ReadOBW(Tkdpo2k3k4k* pT, double* AnalysisBandwidth, double* PercentageDown, double* LowerFrequency, double* UpperFrequency, double* Power)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadOBW"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (AnalysisBandwidth == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadOBW"), _T("AnalysisBandwidth"));
	if (PercentageDown == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadOBW"), _T("PercentageDown"));
	if (LowerFrequency == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadOBW"), _T("LowerFrequency"));
	if (UpperFrequency == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadOBW"), _T("UpperFrequency"));
	if (Power == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadOBW"), _T("Power"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("ReadOBW"), &hr, OUT_PARAM(AnalysisBandwidth), OUT_PARAM(PercentageDown), OUT_PARAM(LowerFrequency), OUT_PARAM(UpperFrequency), OUT_PARAM(Power), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadOBW"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("RF:MEASU:OBW:CHANBW?;PERCENT?;LOWERF?;UPPERF?;POW?"));
		strResp = _T("%lg;%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_ReadOBW(AnalysisBandwidth, PercentageDown, LowerFrequency, UpperFrequency, Power);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementsFrequency.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRFMeasurementTypeNONe;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementsFrequency_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementsFrequency), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementsFrequency"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementsFrequency.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":RF:MEASU:TYP %{Tkdpo2k3k4kFrequencyRFMeasurementTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementsFrequency_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_MoveRefToCentre(Tkdpo2k3k4k* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("MoveRefToCentre"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("MoveRefToCentre"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("MoveRefToCentre"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:REFER CENTER"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_MoveRefToCentre();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_ReadReference(Tkdpo2k3k4k* pT, double* Frequency, double* Amplitude)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadReference"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Frequency == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReference"), _T("Frequency"));
	if (Amplitude == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadReference"), _T("Amplitude"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadReference"), &hr, OUT_PARAM(Frequency), OUT_PARAM(Amplitude), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadReference"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:REFER:FREQ?;AMPLITUDE?"));
		strResp = _T("%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_ReadReference(Frequency, Amplitude);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_ReadManual(Tkdpo2k3k4k* pT, long Marker, double* HorizontalValue, double* HorizontalDelta, double* VerticalValue, double* VerticalDelta)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadManual"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HorizontalValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadManual"), _T("HorizontalValue"));
	if (HorizontalDelta == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadManual"), _T("HorizontalDelta"));
	if (VerticalValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadManual"), _T("VerticalValue"));
	if (VerticalDelta == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadManual"), _T("VerticalDelta"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadManual"), &hr, IN_PARAM(Marker), OUT_PARAM(HorizontalValue), OUT_PARAM(HorizontalDelta), OUT_PARAM(VerticalValue), OUT_PARAM(VerticalDelta), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadManual"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:M%d:FREQ:ABS?;DELT?;:MARKER:M%d:AMPL:ABS?;DELT?"), Marker, Marker);
		strResp = _T("%lg;%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_ReadManual(Marker, HorizontalValue, HorizontalDelta, VerticalValue, VerticalDelta);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_ConfigureManual(Tkdpo2k3k4k* pT, long Marker, double HorizontalValue)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ConfigureManual"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ConfigureManual"), &hr, IN_PARAM(Marker), IN_PARAM(HorizontalValue), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureManual"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:MAN ON;:MARKER:M%d:FREQ:ABS %0.15lg"), Marker, HorizontalValue);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_ConfigureManual(Marker, HorizontalValue);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_ConfigurePeak(Tkdpo2k3k4k* pT, long MaximumMarkers, double Threshold, double Excursion)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ConfigurePeak"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ConfigurePeak"), &hr, IN_PARAM(MaximumMarkers), IN_PARAM(Threshold), IN_PARAM(Excursion), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigurePeak"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARKER:PEAK:STATE 1;MAXIMUM %d;THRESHOLD %0.15lg;EXCURSION %0.15lg"), MaximumMarkers, Threshold, Excursion);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_ConfigurePeak(MaximumMarkers, Threshold, Excursion);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_ReadPeak(Tkdpo2k3k4k* pT, VARIANT_BOOL* State, long* MaximumMarkers, double* Threshold, double* Excursion)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadPeak"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (State == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPeak"), _T("State"));
	if (MaximumMarkers == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPeak"), _T("MaximumMarkers"));
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPeak"), _T("Threshold"));
	if (Excursion == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPeak"), _T("Excursion"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("ReadPeak"), &hr, OUT_PARAM(State), OUT_PARAM(MaximumMarkers), OUT_PARAM(Threshold), OUT_PARAM(Excursion), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadPeak"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MARKER:PEAK:STATE?;MAXIMUM?;THRESHOLD?;EXCURSION?"));
		strResp = _T("%{VARIANT_BOOL}[^;];%d;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_ReadPeak(State, MaximumMarkers, Threshold, Excursion);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_get_ManualState(Tkdpo2k3k4k* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("get_ManualState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ManualState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("get_ManualState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ManualState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequencyMarker.ManualState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:MAN?"));
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_get_ManualState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_put_ManualState(Tkdpo2k3k4k* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("put_ManualState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("put_ManualState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ManualState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kFrequencyMarker.ManualState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:MAN %{VARIANT_BOOL}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_put_ManualState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_get_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFMarkerTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kFrequencyRFMarkerTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFMarkerTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFMarkerTypeEnum>(_T("ITkdpo2k3k4kFrequencyMarker.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kFrequencyRFMarkerTypeAbsolute;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:TYP?"));
		strResp = _T("%{Tkdpo2k3k4kFrequencyRFMarkerTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyMarker_put_Type(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencyRFMarkerTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyMarker), _T("ITkdpo2k3k4kFrequencyMarker"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyMarker"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Type"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kFrequencyRFMarkerTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kFrequencyRFMarkerTypeEnum>(_T("ITkdpo2k3k4kFrequencyMarker.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MARKER:TYP %{Tkdpo2k3k4kFrequencyRFMarkerTypeEnum}s"), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyMarker_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyTrace_FetchY(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Source, SAFEARRAY** TraceArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyTrace), _T("ITkdpo2k3k4kFrequencyTrace"), _T("FetchY"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (TraceArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchY"), _T("TraceArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchY"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchY"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyTrace"), _T("FetchY"), &hr, IN_PARAM(Source), OUT_PARAM(TraceArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("FetchY"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyTrace_FetchY(Source, TraceArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kFrequencyTrace_ReadY(Tkdpo2k3k4k* pT, Tkdpo2k3k4kFrequencySpectrumTraceTypeEnum Source, SAFEARRAY** TraceArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4k::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kFrequencyTrace), _T("ITkdpo2k3k4kFrequencyTrace"), _T("ReadY"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (TraceArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadY"), _T("TraceArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadY"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadY"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kFrequencyTrace"), _T("ReadY"), &hr, IN_PARAM(Source), OUT_PARAM(TraceArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadY"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kFrequencyTrace_ReadY(Source, TraceArray, InitialX, XIncrement);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_Configure(Tkdpo2k3k4kChannel* pT, double Position, double Scale, double Offset, double Deskew, Tkdpo2k3k4kChannelCouplingEnum Coupling, Tkdpo2k3k4kChannelTerminationEnum Termination, Tkdpo2k3k4kChannelBandwidthEnum Bandwidth, VARIANT_BOOL DisplayState)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("Configure"), &hr, IN_PARAM(Position), IN_PARAM(Scale), IN_PARAM(Offset), IN_PARAM(Deskew), IN_PARAM(Coupling), IN_PARAM(Termination), IN_PARAM(Bandwidth), IN_PARAM(DisplayState), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:POSITION %0.15lg;SCALE %0.15lg;OFFSET %0.15lg;DESKEW %0.15lg;COUPLING %{Tkdpo2k3k4kChannelCouplingEnum}s;TERMINATION %{Tkdpo2k3k4kChannelTerminationEnum}s;BANDWIDTH %{Tkdpo2k3k4kChannelBandwidthEnum}s;:SELECT:CH%d %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, Position, Scale, Offset, Deskew, Coupling, Termination, Bandwidth, pT->GetInstanceIndex()+1, DisplayState);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_Configure(Position, Scale, Offset, Deskew, Coupling, Termination, Bandwidth, DisplayState);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_Read(Tkdpo2k3k4kChannel* pT, double* Position, double* Scale, double* Offset, double* Deskew, Tkdpo2k3k4kChannelCouplingEnum* Coupling, Tkdpo2k3k4kChannelTerminationEnum* Termination, double* Bandwidth, VARIANT_BOOL* DisplayState)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Position == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Position"));
	if (Scale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Scale"));
	if (Offset == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Offset"));
	if (Deskew == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Deskew"));
	if (Coupling == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Coupling"));
	if (Termination == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Termination"));
	if (Bandwidth == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Bandwidth"));
	if (DisplayState == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("DisplayState"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("Read"), &hr, OUT_PARAM(Position), OUT_PARAM(Scale), OUT_PARAM(Offset), OUT_PARAM(Deskew), OUT_PARAM(Coupling), OUT_PARAM(Termination), OUT_PARAM(Bandwidth), OUT_PARAM(DisplayState), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(""));
		strResp = _T("%lg %lg %lg %lg %{Tkdpo2k3k4kChannelCouplingEnum}s %{Tkdpo2k3k4kChannelTerminationEnum}s %lg %{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_Read(Position, Scale, Offset, Deskew, Coupling, Termination, Bandwidth, DisplayState);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_ReadProbeDetails(Tkdpo2k3k4kChannel* pT, BSTR* Type, double* Resistance, double* Gain, BSTR* SerialNumber, BSTR* Unit, double* ExternalAttenuation, double* ExternalAttenuationDB, Tkdpo2k3k4kChannelCalibrationEnum* Calibration)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("ReadProbeDetails"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Type == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("Type"));
	if (Resistance == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("Resistance"));
	if (Gain == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("Gain"));
	if (SerialNumber == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("SerialNumber"));
	if (Unit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("Unit"));
	if (ExternalAttenuation == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("ExternalAttenuation"));
	if (ExternalAttenuationDB == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("ExternalAttenuationDB"));
	if (Calibration == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadProbeDetails"), _T("Calibration"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("ReadProbeDetails"), &hr, OUT_PARAM(Type), OUT_PARAM(Resistance), OUT_PARAM(Gain), OUT_PARAM(SerialNumber), OUT_PARAM(Unit), OUT_PARAM(ExternalAttenuation), OUT_PARAM(ExternalAttenuationDB), OUT_PARAM(Calibration), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:GAIN?;RESISTANCE?;UNITS?;ID:TYPE?;SERNUMBER?;:CH%d:PROBEFUNC:EXTATTEN?;EXTDBATTEN?;:CH%d:PROBECAL?;"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%lg;%lg;%$B[^;];%$B[^;];%$B[^;];%lg;%lg;%{Tkdpo2k3k4kChannelCalibrationEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_ReadProbeDetails(Type, Resistance, Gain, SerialNumber, Unit, ExternalAttenuation, ExternalAttenuationDB, Calibration);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_SetAllDeskewsToRecommendedValues(Tkdpo2k3k4kChannel* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("SetAllDeskewsToRecommendedValues"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("SetAllDeskewsToRecommendedValues"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAllDeskewsToRecommendedValues"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetAllDeskewsToRecommendedValues"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("DES SETALL"));

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_SetAllDeskewsToRecommendedValues();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_InvertWaveform(Tkdpo2k3k4kChannel* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("InvertWaveform"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("InvertWaveform"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:INV ON"), pT->GetInstanceIndex()+1);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_InvertWaveform();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_SetTekVPIProbeAutoZero(Tkdpo2k3k4kChannel* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeAutoZero"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeAutoZero"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:AUTOZ EXEC"), pT->GetInstanceIndex()+1);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_SetTekVPIProbeAutoZero();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_SetTekVPIProbeCommand(Tkdpo2k3k4kChannel* pT, BSTR Command, BSTR State)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeCommand"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeCommand"), &hr, IN_PARAM(Command), IN_PARAM(State), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:COMMAND %$BQs,%$BQs"), pT->GetInstanceIndex()+1, Command, State);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_SetTekVPIProbeCommand(Command, State);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_SetTekVPIProbeDegauss(Tkdpo2k3k4kChannel* pT)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeDegauss"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("SetTekVPIProbeDegauss"), &hr, NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:DEGAU EXEC"), pT->GetInstanceIndex()+1);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_SetTekVPIProbeDegauss();
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Bandwidth(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Bandwidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Bandwidth"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Bandwidth"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 5.000000E+006;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:BANDWIDTH?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Bandwidth(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Bandwidth(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Bandwidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Bandwidth"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:BANDWIDTH %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Bandwidth(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_BandwidthEnum(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelBandwidthEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_BandwidthEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_BandwidthEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:BANDWIDTH %{Tkdpo2k3k4kChannelBandwidthEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_BandwidthEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Coupling(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelCouplingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Coupling"), _T("val"));
	*val = (Tkdpo2k3k4kChannelCouplingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Coupling"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelCouplingEnum>(_T("ITkdpo2k3k4kChannel.Coupling"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kChannelCouplingDC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:COUPLING?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kChannelCouplingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Coupling(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Coupling(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelCouplingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Coupling"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelCouplingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelCouplingEnum>(_T("ITkdpo2k3k4kChannel.Coupling"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:COUPLING %{Tkdpo2k3k4kChannelCouplingEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Coupling(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Deskew(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Deskew"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Deskew"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Deskew"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Deskew"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:DESKEW?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Deskew(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Deskew(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Deskew"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Deskew"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Deskew"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:DESKEW %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Deskew(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_DisplayState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_DisplayState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.DisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_TRUE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SELECT:CH%d?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_DisplayState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_DisplayState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_DisplayState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.DisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SELECT:CH%d %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_DisplayState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_LabelName(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_LabelName"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LabelName"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_LabelName"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.LabelName"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:LABEL?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_LabelName(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_LabelName(Tkdpo2k3k4kChannel* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_LabelName"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_LabelName"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.LabelName"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:LABEL%$BQs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_LabelName(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Offset(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Offset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Offset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Offset"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Offset"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:OFFSET?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Offset(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Offset(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Offset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Offset"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Offset"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:OFFSET %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Offset(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Position(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:POSITION?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Position(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:POSITION %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeGain(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeGain"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeGain"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeGain"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+000;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:GAIN?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeGain(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeResistance(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeResistance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeResistance"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeResistance"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:RESISTANCE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeResistance(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeSerialNumber(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeSerialNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeSerialNumber"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeSerialNumber"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:ID:SERNUMBER?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeSerialNumber(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeType(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeType"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ProbeType\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:ID:TYPE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeUnits(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"ProbeUnits\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:UNITS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_VerticalScale(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_VerticalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E-001;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:SCALE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_VerticalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_VerticalScale(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_VerticalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:SCALE %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_VerticalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_TerminationEnum(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelTerminationEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_TerminationEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_TerminationEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:TERMINATION %{Tkdpo2k3k4kChannelTerminationEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_TerminationEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_ProbeSignal(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelProbeSignalEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeSignal"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeSignal"), _T("val"));
	*val = (Tkdpo2k3k4kChannelProbeSignalEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_ProbeSignal"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>(_T("ITkdpo2k3k4kChannel.ProbeSignal"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kChannelProbeSignalPASS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:SIGNAL?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kChannelProbeSignalEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_ProbeSignal(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_ProbeSignal(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kChannelProbeSignalEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_ProbeSignal"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_ProbeSignal"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kChannelProbeSignalEnum>(_T("ITkdpo2k3k4kChannel.ProbeSignal"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PROBE:SIGNAL %{Tkdpo2k3k4kChannelProbeSignalEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_ProbeSignal(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_AmpsViaVoltsState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_AmpsViaVoltsState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AmpsViaVoltsState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_AmpsViaVoltsState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AmpsViaVoltsState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AmpsViaVoltsState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.AmpsViaVoltsState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:AMPSVIAVOLT:ENA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_AmpsViaVoltsState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_AmpsViaVoltsState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_AmpsViaVoltsState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_AmpsViaVoltsState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AmpsViaVoltsState"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AmpsViaVoltsState"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.AmpsViaVoltsState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:AMPSVIAVOLT:ENA %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_AmpsViaVoltsState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_AmpsViaVoltsFactor(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_AmpsViaVoltsFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AmpsViaVoltsFactor"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_AmpsViaVoltsFactor"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AmpsViaVoltsFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AmpsViaVoltsFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.AmpsViaVoltsFactor"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:AMPSVIAVOLT:FAC?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_AmpsViaVoltsFactor(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_AmpsViaVoltsFactor(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_AmpsViaVoltsFactor"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_AmpsViaVoltsFactor"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AmpsViaVoltsFactor"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AmpsViaVoltsFactor"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.AmpsViaVoltsFactor"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:AMPSVIAVOLT:FAC %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_AmpsViaVoltsFactor(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Impedance(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Impedance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Impedance"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Impedance"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Impedance"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.Impedance"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"0");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:IMP?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Impedance(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Impedance(Tkdpo2k3k4kChannel* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Impedance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Impedance"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Impedance"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Impedance"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.Impedance"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:IMP %$Bs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Impedance(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_VerticalSensitivity(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_VerticalSensitivity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalSensitivity"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_VerticalSensitivity"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_VerticalSensitivity"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.VerticalSensitivity"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:VOL?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_VerticalSensitivity(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_VerticalSensitivity(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_VerticalSensitivity"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_VerticalSensitivity"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalSensitivity"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_VerticalSensitivity"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.VerticalSensitivity"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:VOL %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_VerticalSensitivity(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Yunits(Tkdpo2k3k4kChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Yunits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Yunits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Yunits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.Yunits"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"V\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:YUN?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Yunits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_Yunits(Tkdpo2k3k4kChannel* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_Yunits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_Yunits"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kChannel.Yunits"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:YUN %$BQs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_Yunits(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_TekVPIProbeDegaussState(Tkdpo2k3k4kChannel* pT, Tkdpo2k3k4kProbeDegaussStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_TekVPIProbeDegaussState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TekVPIProbeDegaussState"), _T("val"));
	*val = (Tkdpo2k3k4kProbeDegaussStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_TekVPIProbeDegaussState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = Tkdpo2k3k4kProbeDegaussStateNEEDED;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:DEGAU:STATE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kProbeDegaussStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_TekVPIProbeDegaussState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_TekVPIProbeRange(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_TekVPIProbeRange"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TekVPIProbeRange"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_TekVPIProbeRange"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.TekVPIProbeRange"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:FORCEDR?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_TekVPIProbeRange(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_TekVPIProbeRange(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_TekVPIProbeRange"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_TekVPIProbeRange"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kChannel.TekVPIProbeRange"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:PRO:FORCEDR %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_TekVPIProbeRange(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_Termination(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_Termination"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Termination"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_Termination"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+006;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:TERMINATION?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_Termination(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_get_InvertState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("get_InvertState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InvertState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("get_InvertState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.InvertState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:INV?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_get_InvertState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kChannel_put_InvertState(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kChannel), _T("ITkdpo2k3k4kChannel"), _T("put_InvertState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kChannel"), _T("put_InvertState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kChannel.InvertState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:INV %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kChannel_put_InvertState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_FetchWaveform(Tkdpo2k3k4kChannel* pT, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("FetchWaveform"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveform"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("FetchWaveform"), &hr, OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_FetchWaveform(WaveformArray, InitialX, XIncrement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_FetchWaveformMeasurement(Tkdpo2k3k4kChannel* pT, IviScopeMeasurementEnum MeasFunction, double* Measurement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("FetchWaveformMeasurement"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Measurement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMeasurement"), _T("Measurement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("FetchWaveformMeasurement"), &hr, IN_PARAM(MeasFunction), OUT_PARAM(Measurement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_FetchWaveformMeasurement(MeasFunction, Measurement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_FetchWaveformMinMax(Tkdpo2k3k4kChannel* pT, SAFEARRAY** MinWaveform, SAFEARRAY** MaxWaveform, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("FetchWaveformMinMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (MinWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("MinWaveform"));
	if (MaxWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("MaxWaveform"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("FetchWaveformMinMax"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("FetchWaveformMinMax"), &hr, OUT_PARAM(MinWaveform), OUT_PARAM(MaxWaveform), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_FetchWaveformMinMax(MinWaveform, MaxWaveform, InitialX, XIncrement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_ReadWaveform(Tkdpo2k3k4kChannel* pT, long MaxTimeMilliseconds, SAFEARRAY** WaveformArray, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("ReadWaveform"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (WaveformArray == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("WaveformArray"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveform"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("ReadWaveform"), &hr, IN_PARAM(MaxTimeMilliseconds), OUT_PARAM(WaveformArray), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_ReadWaveform(MaxTimeMilliseconds, WaveformArray, InitialX, XIncrement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_ReadWaveformMeasurement(Tkdpo2k3k4kChannel* pT, IviScopeMeasurementEnum MeasFunction, long MaxTimeMilliseconds, double* Measurement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("ReadWaveformMeasurement"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Measurement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMeasurement"), _T("Measurement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("ReadWaveformMeasurement"), &hr, IN_PARAM(MeasFunction), IN_PARAM(MaxTimeMilliseconds), OUT_PARAM(Measurement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_ReadWaveformMeasurement(MeasFunction, MaxTimeMilliseconds, Measurement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeMeasurement_ReadWaveformMinMax(Tkdpo2k3k4kChannel* pT, long MaxTimeMilliseconds, SAFEARRAY** MinWaveform, SAFEARRAY** MaxWaveform, double* InitialX, double* XIncrement)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeMeasurement), _T("IIviScopeMeasurement"), _T("ReadWaveformMinMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (MinWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("MinWaveform"));
	if (MaxWaveform == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("MaxWaveform"));
	if (InitialX == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("InitialX"));
	if (XIncrement == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadWaveformMinMax"), _T("XIncrement"));
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeMeasurement"), _T("ReadWaveformMinMax"), &hr, IN_PARAM(MaxTimeMilliseconds), OUT_PARAM(MinWaveform), OUT_PARAM(MaxWaveform), OUT_PARAM(InitialX), OUT_PARAM(XIncrement), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeMeasurement_ReadWaveformMinMax(MaxTimeMilliseconds, MinWaveform, MaxWaveform, InitialX, XIncrement);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_Configure(Tkdpo2k3k4kChannel* pT, double Range, double Offset, IviScopeVerticalCouplingEnum Coupling, double ProbeAttenuation, VARIANT_BOOL Enabled)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("Configure"), &hr, IN_PARAM(Range), IN_PARAM(Offset), IN_PARAM(Coupling), IN_PARAM(ProbeAttenuation), IN_PARAM(Enabled), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":CH%d:OFFSET %0.15lg;COUPLING %{IviScopeVerticalCouplingEnum}s"), pT->GetInstanceIndex()+1, Offset, Coupling);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_Configure(Range, Offset, Coupling, ProbeAttenuation, Enabled);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_ConfigureCharacteristics(Tkdpo2k3k4kChannel* pT, double InputImpedance, double InputFrequencyMax)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("ConfigureCharacteristics"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("ConfigureCharacteristics"), &hr, IN_PARAM(InputImpedance), IN_PARAM(InputFrequencyMax), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:TERMINATION %0.15lg;BANDWIDTH %0.15lg"), pT->GetInstanceIndex()+1, InputImpedance, InputFrequencyMax);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_ConfigureCharacteristics(InputImpedance, InputFrequencyMax);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_ProbeSense(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_ProbeSense"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeSense"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_ProbeSense"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_ProbeSense(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_Coupling(Tkdpo2k3k4kChannel* pT, IviScopeVerticalCouplingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Coupling"), _T("val"));
	*val = (IviScopeVerticalCouplingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_Coupling"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = IviScopeVerticalCouplingDC;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:COUPLING?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{IviScopeVerticalCouplingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_get_Coupling(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_Coupling(Tkdpo2k3k4kChannel* pT, IviScopeVerticalCouplingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_Coupling"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_Coupling"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:COUPLING %{IviScopeVerticalCouplingEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_put_Coupling(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_Enabled(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_Enabled"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Enabled"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_Enabled"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_Enabled(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_Enabled(Tkdpo2k3k4kChannel* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_Enabled"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_Enabled"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_put_Enabled(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_InputFrequencyMax(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_InputFrequencyMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InputFrequencyMax"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_InputFrequencyMax"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_InputFrequencyMax(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_InputFrequencyMax(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_InputFrequencyMax"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_InputFrequencyMax"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_put_InputFrequencyMax(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_InputImpedance(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_InputImpedance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_InputImpedance"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_InputImpedance"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+006;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:TERMINATION?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_get_InputImpedance(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_InputImpedance(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_InputImpedance"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_InputImpedance"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("CH%d:TERMINATION %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->IIviScopeChannel_put_InputImpedance(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_Offset(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_Offset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Offset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_Offset"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_Offset(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_Offset(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_Offset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_Offset"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_put_Offset(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_ProbeAttenuation(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_ProbeAttenuation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ProbeAttenuation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_ProbeAttenuation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_ProbeAttenuation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_ProbeAttenuation(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_ProbeAttenuation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_ProbeAttenuation"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_put_ProbeAttenuation(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_get_Range(Tkdpo2k3k4kChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("get_Range"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Range"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("get_Range"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_get_Range(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::IIviScopeChannel_put_Range(Tkdpo2k3k4kChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(IIviScopeChannel), _T("IIviScopeChannel"), _T("put_Range"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("IIviScopeChannel"), _T("put_Range"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->IIviScopeChannel_put_Range(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureI2C(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum ClockSource, Tkdpo2k3k4kBusSourceEnum DataSource, Tkdpo2k3k4kBusI2CRWInAddressEnum RWInAddress)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureI2C"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureI2C"), &hr, IN_PARAM(ClockSource), IN_PARAM(DataSource), IN_PARAM(RWInAddress), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE I2C;:BUS:B%d:I2C:CLOCK:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:I2C:DATA:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:I2C:ADDR:RWINC %{Tkdpo2k3k4kBusI2CRWInAddressEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, ClockSource, pT->GetInstanceIndex()+1, DataSource, pT->GetInstanceIndex()+1, RWInAddress);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureI2C(ClockSource, DataSource, RWInAddress);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadI2C(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* ClockSource, Tkdpo2k3k4kBusSourceEnum* DataSource, Tkdpo2k3k4kBusI2CRWInAddressEnum* RWInAddress)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadI2C"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (ClockSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadI2C"), _T("ClockSource"));
	if (DataSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadI2C"), _T("DataSource"));
	if (RWInAddress == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadI2C"), _T("RWInAddress"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadI2C"), &hr, OUT_PARAM(ClockSource), OUT_PARAM(DataSource), OUT_PARAM(RWInAddress), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":BUS:B%d:I2C:CLOCK:SOURCE?;:BUS:B%d:I2C:DATA:SOURCE?;:BUS:B%d:I2C:ADDR:RWINC?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusI2CRWInAddressEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadI2C(ClockSource, DataSource, RWInAddress);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureAudioInputs(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kAudioBusTypeEnum Type, Tkdpo2k3k4kBusSourceEnum ClockSource, Tkdpo2k3k4kBusSourceEnum DataSource, Tkdpo2k3k4kBusSourceEnum WordSelectSource, Tkdpo2k3k4kBusSourceEnum FrameSyncSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureAudioInputs"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureAudioInputs"), &hr, IN_PARAM(Type), IN_PARAM(ClockSource), IN_PARAM(DataSource), IN_PARAM(WordSelectSource), IN_PARAM(FrameSyncSource), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAudioInputs"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAudioInputs"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE AUDIO;:BUS:B%d:AUD:TYP %{Tkdpo2k3k4kAudioBusTypeEnum}s ;:BUS:B%d:AUD:CLOC:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:AUD:DAT:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:AUD:WORDS:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:AUD:FRAMES:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Type, pT->GetInstanceIndex()+1, ClockSource, pT->GetInstanceIndex()+1, DataSource, pT->GetInstanceIndex()+1, WordSelectSource, pT->GetInstanceIndex()+1, FrameSyncSource);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureAudioInputs(Type, ClockSource, DataSource, WordSelectSource, FrameSyncSource);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadAudioInputs(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kAudioBusTypeEnum* Type, Tkdpo2k3k4kBusSourceEnum* ClockSource, Tkdpo2k3k4kBusSourceEnum* DataSource, Tkdpo2k3k4kBusSourceEnum* WordSelectSource, Tkdpo2k3k4kBusSourceEnum* FrameSyncSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadAudioInputs"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Type == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudioInputs"), _T("Type"));
	if (ClockSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudioInputs"), _T("ClockSource"));
	if (DataSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudioInputs"), _T("DataSource"));
	if (WordSelectSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudioInputs"), _T("WordSelectSource"));
	if (FrameSyncSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudioInputs"), _T("FrameSyncSource"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadAudioInputs"), &hr, OUT_PARAM(Type), OUT_PARAM(ClockSource), OUT_PARAM(DataSource), OUT_PARAM(WordSelectSource), OUT_PARAM(FrameSyncSource), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAudioInputs"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAudioInputs"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:AUD:TYP?;:BUS:B%d:AUD:CLOC:SOU?;:BUS:B%d:AUD:DAT:SOU?;:BUS:B%d:AUD:WORDS:SOU?;:BUS:B%d:AUD:FRAMES:SOU?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kAudioBusTypeEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadAudioInputs(Type, ClockSource, DataSource, WordSelectSource, FrameSyncSource);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureAudio(Tkdpo2k3k4kBus* pT, long BitDelay, Tkdpo2k3k4kBusBitOrderEnum BitOrder, long BitsPerChannel, Tkdpo2k3k4kAudioPolarityEnum ClockPolarity, Tkdpo2k3k4kAudioDataPolarityEnum DataPolarity, long BitsPerWord, Tkdpo2k3k4kDisplayFormatEnum DisplayFormat, Tkdpo2k3k4kAudioPolarityEnum FrameSyncPolarity, Tkdpo2k3k4kAudioDataPolarityEnum WordSelectPolarity, long ChannelsPerFrame)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureAudio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureAudio"), &hr, IN_PARAM(BitDelay), IN_PARAM(BitOrder), IN_PARAM(BitsPerChannel), IN_PARAM(ClockPolarity), IN_PARAM(DataPolarity), IN_PARAM(BitsPerWord), IN_PARAM(DisplayFormat), IN_PARAM(FrameSyncPolarity), IN_PARAM(WordSelectPolarity), IN_PARAM(ChannelsPerFrame), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAudio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureAudio"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE AUDIO;:BUS:B%d:AUD:BITD %d ;:BUS:B%d:AUD:BITO %{Tkdpo2k3k4kBusBitOrderEnum}s ;:BUS:B%d:AUD:CHAN:SIZ %d ;:BUS:B%d:AUD:CLOC:POL %{Tkdpo2k3k4kAudioPolarityEnum}s ;:BUS:B%d:AUD:DAT:POL %{Tkdpo2k3k4kAudioDataPolarityEnum}s ;:BUS:B%d:AUD:DAT:SIZ %d ;:BUS:B%d:AUD:DIS:FORM %{Tkdpo2k3k4kDisplayFormatEnum}s ;:BUS:B%d:AUD:FRAMES:POL %{Tkdpo2k3k4kAudioPolarityEnum}s ;:BUS:B%d:AUD:WORDS:POL %{Tkdpo2k3k4kAudioDataPolarityEnum}s ;:BUS:B%d:AUD:FRAME:SIZ %d"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, BitDelay, pT->GetInstanceIndex()+1, BitOrder, pT->GetInstanceIndex()+1, BitsPerChannel, pT->GetInstanceIndex()+1, ClockPolarity, pT->GetInstanceIndex()+1, DataPolarity, pT->GetInstanceIndex()+1, BitsPerWord, pT->GetInstanceIndex()+1, DisplayFormat, pT->GetInstanceIndex()+1, FrameSyncPolarity, pT->GetInstanceIndex()+1, WordSelectPolarity, pT->GetInstanceIndex()+1, ChannelsPerFrame);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureAudio(BitDelay, BitOrder, BitsPerChannel, ClockPolarity, DataPolarity, BitsPerWord, DisplayFormat, FrameSyncPolarity, WordSelectPolarity, ChannelsPerFrame);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadAudio(Tkdpo2k3k4kBus* pT, long* BitDelay, Tkdpo2k3k4kBusBitOrderEnum* BitOrder, long* BitsPerChannel, Tkdpo2k3k4kAudioPolarityEnum* ClockPolarity, Tkdpo2k3k4kAudioDataPolarityEnum* DataPolarity, long* BitsPerWord, Tkdpo2k3k4kDisplayFormatEnum* DisplayFormat, Tkdpo2k3k4kAudioPolarityEnum* FrameSyncPolarity, Tkdpo2k3k4kAudioDataPolarityEnum* WordSelectPolarity, long* ChannelsPerFrame)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadAudio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (BitDelay == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("BitDelay"));
	if (BitOrder == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("BitOrder"));
	if (BitsPerChannel == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("BitsPerChannel"));
	if (ClockPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("ClockPolarity"));
	if (DataPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("DataPolarity"));
	if (BitsPerWord == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("BitsPerWord"));
	if (DisplayFormat == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("DisplayFormat"));
	if (FrameSyncPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("FrameSyncPolarity"));
	if (WordSelectPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("WordSelectPolarity"));
	if (ChannelsPerFrame == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAudio"), _T("ChannelsPerFrame"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadAudio"), &hr, OUT_PARAM(BitDelay), OUT_PARAM(BitOrder), OUT_PARAM(BitsPerChannel), OUT_PARAM(ClockPolarity), OUT_PARAM(DataPolarity), OUT_PARAM(BitsPerWord), OUT_PARAM(DisplayFormat), OUT_PARAM(FrameSyncPolarity), OUT_PARAM(WordSelectPolarity), OUT_PARAM(ChannelsPerFrame), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAudio"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadAudio"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:AUD:BITD?;:BUS:B%d:AUD:BITO?;:BUS:B%d:AUD:CHAN:SIZ?;:BUS:B%d:AUD:CLOC:POL?;:BUS:B%d:AUD:DAT:POL?;:BUS:B%d:AUD:DAT:SIZ?;:BUS:B%d:AUD:DIS:FORM?;:BUS:B%d:AUD:FRAMES:POL?;:BUS:B%d:AUD:WORDS:POL?;:BUS:B%d:AUD:FRAME:SIZ?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%d;%{Tkdpo2k3k4kBusBitOrderEnum}[^;];%d;%{Tkdpo2k3k4kAudioPolarityEnum}[^;];%{Tkdpo2k3k4kAudioDataPolarityEnum}[^;];%d;%{Tkdpo2k3k4kDisplayFormatEnum}[^;];%{Tkdpo2k3k4kAudioPolarityEnum}[^;];%{Tkdpo2k3k4kAudioDataPolarityEnum}[^;];%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadAudio(BitDelay, BitOrder, BitsPerChannel, ClockPolarity, DataPolarity, BitsPerWord, DisplayFormat, FrameSyncPolarity, WordSelectPolarity, ChannelsPerFrame);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureCAN(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum Source, long SamplePoint, Tkdpo2k3k4kCANProbeTypeEnum SignalType, long BitRate)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureCAN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureCAN"), &hr, IN_PARAM(Source), IN_PARAM(SamplePoint), IN_PARAM(SignalType), IN_PARAM(BitRate), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE CAN;:BUS:B%d:CAN:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:CAN:SAMPLE %d ;:BUS:B%d:CAN:PRO %{Tkdpo2k3k4kCANProbeTypeEnum}s ;:BUS:B%d:CAN:BITR %d"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, SamplePoint, pT->GetInstanceIndex()+1, SignalType, pT->GetInstanceIndex()+1, BitRate);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureCAN(Source, SamplePoint, SignalType, BitRate);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadCAN(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* Source, long* SamplePoint, Tkdpo2k3k4kCANProbeTypeEnum* SignalType, long* BitRate)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadCAN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCAN"), _T("Source"));
	if (SamplePoint == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCAN"), _T("SamplePoint"));
	if (SignalType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCAN"), _T("SignalType"));
	if (BitRate == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCAN"), _T("BitRate"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadCAN"), &hr, OUT_PARAM(Source), OUT_PARAM(SamplePoint), OUT_PARAM(SignalType), OUT_PARAM(BitRate), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:CAN:SOU?;:BUS:B%d:CAN:SAMPLE?;:BUS:B%d:CAN:PRO?;:BUS:B%d:CAN:BITR?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%d;%{Tkdpo2k3k4kCANProbeTypeEnum}[^;];%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadCAN(Source, SamplePoint, SignalType, BitRate);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureFlexray(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum Source, Tkdpo2k3k4kFlexrayChannelEnum IDFormat, Tkdpo2k3k4kFlexraySignalEnum Standard, long BitRate)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureFlexray"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureFlexray"), &hr, IN_PARAM(Source), IN_PARAM(IDFormat), IN_PARAM(Standard), IN_PARAM(BitRate), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFlexray"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE FLEX;:BUS:B%d:FLEX:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:FLEX:CH %{Tkdpo2k3k4kFlexrayChannelEnum}s ;:BUS:B%d:FLEX:SIG %{Tkdpo2k3k4kFlexraySignalEnum}s ;:BUS:B%d:FLEX:BITR %d"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, IDFormat, pT->GetInstanceIndex()+1, Standard, pT->GetInstanceIndex()+1, BitRate);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureFlexray(Source, IDFormat, Standard, BitRate);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadFlexray(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* Source, Tkdpo2k3k4kFlexrayChannelEnum* IDFormat, Tkdpo2k3k4kFlexraySignalEnum* Standard, long* BitRate)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadFlexray"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFlexray"), _T("Source"));
	if (IDFormat == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFlexray"), _T("IDFormat"));
	if (Standard == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFlexray"), _T("Standard"));
	if (BitRate == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFlexray"), _T("BitRate"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadFlexray"), &hr, OUT_PARAM(Source), OUT_PARAM(IDFormat), OUT_PARAM(Standard), OUT_PARAM(BitRate), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFlexray"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFlexray"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:FLEX:SOU?;:BUS:B%d:FLEX:CH?;:BUS:B%d:FLEX:SIG?;:BUS:B%d:FLEX:BITR?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kFlexrayChannelEnum}[^;];%{Tkdpo2k3k4kFlexraySignalEnum}s;%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadFlexray(Source, IDFormat, Standard, BitRate);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureLIN(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum Source, Tkdpo2k3k4kLINIDFormatEnum IDFormat, long BitRate, Tkdpo2k3k4kLINPolarityEnum Polarity, long SamplePoint, Tkdpo2k3k4kLINStandardEnum Standard)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureLIN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureLIN"), &hr, IN_PARAM(Source), IN_PARAM(IDFormat), IN_PARAM(BitRate), IN_PARAM(Polarity), IN_PARAM(SamplePoint), IN_PARAM(Standard), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE LIN;:BUS:B%d:LIN:SOU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:LIN:BITR %d ;:BUS:B%d:LIN:IDFOR %{Tkdpo2k3k4kLINIDFormatEnum}s ;:BUS:B%d:LIN:POLAR %{Tkdpo2k3k4kLINPolarityEnum}s ;:BUS:B%d:LIN:SAMPLE %d ;:BUS:B%d:LIN:STAND %{Tkdpo2k3k4kLINStandardEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, BitRate, pT->GetInstanceIndex()+1, IDFormat, pT->GetInstanceIndex()+1, Polarity, pT->GetInstanceIndex()+1, SamplePoint, pT->GetInstanceIndex()+1, Standard);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureLIN(Source, IDFormat, BitRate, Polarity, SamplePoint, Standard);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadLIN(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* Source, Tkdpo2k3k4kLINIDFormatEnum* IDFormat, long* BitRate, Tkdpo2k3k4kLINPolarityEnum* Polarity, long* SamplePoint, Tkdpo2k3k4kLINStandardEnum* Standard)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadLIN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("Source"));
	if (IDFormat == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("IDFormat"));
	if (BitRate == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("BitRate"));
	if (Polarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("Polarity"));
	if (SamplePoint == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("SamplePoint"));
	if (Standard == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLIN"), _T("Standard"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadLIN"), &hr, OUT_PARAM(Source), OUT_PARAM(IDFormat), OUT_PARAM(BitRate), OUT_PARAM(Polarity), OUT_PARAM(SamplePoint), OUT_PARAM(Standard), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:LIN:SOU?;:BUS:B%d:LIN:BITR?;:BUS:B%d:LIN:IDFOR?;:BUS:B%d:LIN:POLAR?;:BUS:B%d:LIN:SAMPLE?;:BUS:B%d:LIN:STAND?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%d;%{Tkdpo2k3k4kLINIDFormatEnum}[^;];%{Tkdpo2k3k4kLINPolarityEnum}[^;];%d;%{Tkdpo2k3k4kLINStandardEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadLIN(Source, IDFormat, BitRate, Polarity, SamplePoint, Standard);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureSPI(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum Clocksource, Tkdpo2k3k4kBusSPIClockPolarityEnum ClockPolarity, long DataSize, Tkdpo2k3k4kBusSourceEnum DataMISOSource, Tkdpo2k3k4kBusSPIDataPolarityEnum DataMISOPolarity, Tkdpo2k3k4kBusSPIBitOrderEnum BitOrder, Tkdpo2k3k4kBusSourceEnum SlaveSelectSource, Tkdpo2k3k4kBusSPISlaveSelectPolarityEnum SlaveSelectPolarity, Tkdpo2k3k4kBusSourceEnum DataMOSISource, Tkdpo2k3k4kBusSPIDataPolarityEnum DataMOSIPolarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureSPI"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureSPI"), &hr, IN_PARAM(Clocksource), IN_PARAM(ClockPolarity), IN_PARAM(DataSize), IN_PARAM(DataMISOSource), IN_PARAM(DataMISOPolarity), IN_PARAM(BitOrder), IN_PARAM(SlaveSelectSource), IN_PARAM(SlaveSelectPolarity), IN_PARAM(DataMOSISource), IN_PARAM(DataMOSIPolarity), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureSPI"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureSPI"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE SPI;:BUS:B%d:SPI:CLOCK:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:SPI:CLOCK:POLARITY %{Tkdpo2k3k4kBusSPIClockPolarityEnum}s;:BUS:B%d:SPI:DATA:SIZE %d;:BUS:B%d:SPI:DATA:IN:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:SPI:DATA:IN:POL %{Tkdpo2k3k4kBusSPIDataPolarityEnum}s;:BUS:B%d:SPI:BITO %{Tkdpo2k3k4kBusSPIBitOrderEnum}s;:BUS:B%d:SPI:SELECT:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:SPI:SELECT:POL %{Tkdpo2k3k4kBusSPISlaveSelectPolarityEnum}s;:BUS:B%d:SPI:DATA:OUT:SOURCE %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:SPI:DATA:OUT:POLARITY %{Tkdpo2k3k4kBusSPIDataPolarityEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Clocksource, pT->GetInstanceIndex()+1, ClockPolarity, pT->GetInstanceIndex()+1, DataSize, pT->GetInstanceIndex()+1, DataMISOSource, pT->GetInstanceIndex()+1, DataMISOPolarity, pT->GetInstanceIndex()+1, BitOrder, pT->GetInstanceIndex()+1, SlaveSelectSource, pT->GetInstanceIndex()+1, SlaveSelectPolarity, pT->GetInstanceIndex()+1, DataMOSISource, pT->GetInstanceIndex()+1, DataMOSIPolarity);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureSPI(Clocksource, ClockPolarity, DataSize, DataMISOSource, DataMISOPolarity, BitOrder, SlaveSelectSource, SlaveSelectPolarity, DataMOSISource, DataMOSIPolarity);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadSPI(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* Clocksource, Tkdpo2k3k4kBusSPIClockPolarityEnum* ClockPolarity, long* DataSize, Tkdpo2k3k4kBusSourceEnum* DataMISOSource, Tkdpo2k3k4kBusSPIDataPolarityEnum* DataMISOPolarity, Tkdpo2k3k4kBusSPIBitOrderEnum* BitOrder, Tkdpo2k3k4kBusSourceEnum* SlaveSelectSource, Tkdpo2k3k4kBusSPISlaveSelectPolarityEnum* SlaveSelectPolarity, Tkdpo2k3k4kBusSourceEnum* DataMOSISource, Tkdpo2k3k4kBusSPIDataPolarityEnum* DataMOSIPolarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadSPI"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Clocksource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("Clocksource"));
	if (ClockPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("ClockPolarity"));
	if (DataSize == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("DataSize"));
	if (DataMISOSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("DataMISOSource"));
	if (DataMISOPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("DataMISOPolarity"));
	if (BitOrder == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("BitOrder"));
	if (SlaveSelectSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("SlaveSelectSource"));
	if (SlaveSelectPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("SlaveSelectPolarity"));
	if (DataMOSISource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("DataMOSISource"));
	if (DataMOSIPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSPI"), _T("DataMOSIPolarity"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadSPI"), &hr, OUT_PARAM(Clocksource), OUT_PARAM(ClockPolarity), OUT_PARAM(DataSize), OUT_PARAM(DataMISOSource), OUT_PARAM(DataMISOPolarity), OUT_PARAM(BitOrder), OUT_PARAM(SlaveSelectSource), OUT_PARAM(SlaveSelectPolarity), OUT_PARAM(DataMOSISource), OUT_PARAM(DataMOSIPolarity), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadSPI"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadSPI"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":BUS:B%d:SPI:CLOCK:SOURCE?;:BUS:B%d:SPI:CLOCK:POLARITY?;:BUS:B%d:SPI:DATA:SIZE?;:BUS:B%d:SPI:DATA:IN:SOURCE?;:BUS:B%d:SPI:DATA:IN:POL?;:BUS:B%d:SPI:BITO?;:BUS:B%d:SPI:SELECT:SOURCE?;:BUS:B%d:SPI:SELECT:POL?;:BUS:B%d:SPI:DATA:OUT:SOURCE?;:BUS:B%d:SPI:DATA:OUT:POLARITY?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSPIClockPolarityEnum}[^;];%d;%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSPIDataPolarityEnum}[^;];%{Tkdpo2k3k4kBusSPIBitOrderEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;]; %{Tkdpo2k3k4kBusSPISlaveSelectPolarityEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSPIDataPolarityEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadSPI(Clocksource, ClockPolarity, DataSize, DataMISOSource, DataMISOPolarity, BitOrder, SlaveSelectSource, SlaveSelectPolarity, DataMOSISource, DataMOSIPolarity);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureRS232(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum RXSource, Tkdpo2k3k4kBusRS232PolarityEnum InputPolarity, double Bitrate, long DataBits, Tkdpo2k3k4kBusRS232ParityEnum InputParity, Tkdpo2k3k4kBusSourceEnum TXSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureRS232"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureRS232"), &hr, IN_PARAM(RXSource), IN_PARAM(InputPolarity), IN_PARAM(Bitrate), IN_PARAM(DataBits), IN_PARAM(InputParity), IN_PARAM(TXSource), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":BUS:B%d:RS232C:RX:SOU %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:RS232C:POL %{Tkdpo2k3k4kBusRS232PolarityEnum}s;:BUS:B%d:RS232C:BITR %0.15lg;:BUS:B%d:RS232C:DATAB %d;:BUS:B%d:RS232C:PAR %{Tkdpo2k3k4kBusRS232ParityEnum}s;:BUS:B%d:RS232C:TX:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, RXSource, pT->GetInstanceIndex()+1, InputPolarity, pT->GetInstanceIndex()+1, Bitrate, pT->GetInstanceIndex()+1, DataBits, pT->GetInstanceIndex()+1, InputParity, pT->GetInstanceIndex()+1, TXSource);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureRS232(RXSource, InputPolarity, Bitrate, DataBits, InputParity, TXSource);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadRS232(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* RXSource, Tkdpo2k3k4kBusRS232PolarityEnum* InputPolarity, double* Bitrate, long* DataBits, Tkdpo2k3k4kBusRS232ParityEnum* InputParity, Tkdpo2k3k4kBusSourceEnum* TXSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadRS232"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (RXSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("RXSource"));
	if (InputPolarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("InputPolarity"));
	if (Bitrate == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("Bitrate"));
	if (DataBits == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("DataBits"));
	if (InputParity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("InputParity"));
	if (TXSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRS232"), _T("TXSource"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadRS232"), &hr, OUT_PARAM(RXSource), OUT_PARAM(InputPolarity), OUT_PARAM(Bitrate), OUT_PARAM(DataBits), OUT_PARAM(InputParity), OUT_PARAM(TXSource), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":BUS:B%d:RS232C:POL?;BITR?;DATAB?;PAR?;RX:SOU?;:BUS:B%d:RS232C:TX:SOU?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusRS232PolarityEnum}[^;];%lg;%d;%{Tkdpo2k3k4kBusRS232ParityEnum}s;%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadRS232(RXSource, InputPolarity, Bitrate, DataBits, InputParity, TXSource);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ReadUSB(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* DifferentialSource, Tkdpo2k3k4kBusUSBProbeEnum* Probe, Tkdpo2k3k4kBusUSBBitrateEnum* Bitrate, Tkdpo2k3k4kBusSourceEnum* DPLUSSource, Tkdpo2k3k4kBusSourceEnum* DMINUSSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ReadUSB"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (DifferentialSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadUSB"), _T("DifferentialSource"));
	if (Probe == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadUSB"), _T("Probe"));
	if (Bitrate == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadUSB"), _T("Bitrate"));
	if (DPLUSSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadUSB"), _T("DPLUSSource"));
	if (DMINUSSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadUSB"), _T("DMINUSSource"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ReadUSB"), &hr, OUT_PARAM(DifferentialSource), OUT_PARAM(Probe), OUT_PARAM(Bitrate), OUT_PARAM(DPLUSSource), OUT_PARAM(DMINUSSource), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadUSB"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadUSB"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadUSB"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadUSB"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:USB:SOU:DIFF?;:BUS:B%d:USB:PRO?;:BUS:B%d:USB:BITR?;:BUS:B%d:USB:SOU:DPLU?;:BUS:B%d:USB:SOU:DMIN?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusUSBProbeEnum}[^;];%{Tkdpo2k3k4kBusUSBBitrateEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;];%{Tkdpo2k3k4kBusSourceEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ReadUSB(DifferentialSource, Probe, Bitrate, DPLUSSource, DMINUSSource);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_ConfigureUSB(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum DifferentialSource, Tkdpo2k3k4kBusUSBProbeEnum Probe, Tkdpo2k3k4kBusUSBBitrateEnum Bitrate, Tkdpo2k3k4kBusSourceEnum DPLUSSource, Tkdpo2k3k4kBusSourceEnum DMINUSSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("ConfigureUSB"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("ConfigureUSB"), &hr, IN_PARAM(DifferentialSource), IN_PARAM(Probe), IN_PARAM(Bitrate), IN_PARAM(DPLUSSource), IN_PARAM(DMINUSSource), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE USB;:BUS:B%d:USB:SOU:DIFF %{Tkdpo2k3k4kBusSourceEnum}s;:BUS:B%d:USB:PRO %{Tkdpo2k3k4kBusUSBProbeEnum}s;:BUS:B%d:USB:BITR %{Tkdpo2k3k4kBusUSBBitrateEnum}s;:BUS:B%d:USB:SOU:DPLU %{Tkdpo2k3k4kBusSourceEnum}s ;:BUS:B%d:USB:SOU:DMIN %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, DifferentialSource, pT->GetInstanceIndex()+1, Probe, pT->GetInstanceIndex()+1, Bitrate, pT->GetInstanceIndex()+1, DPLUSSource, pT->GetInstanceIndex()+1, DMINUSSource);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_ConfigureUSB(DifferentialSource, Probe, Bitrate, DPLUSSource, DMINUSSource);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_GetLowThresholdChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("GetLowThresholdChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetLowThresholdChannel"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("GetLowThresholdChannel"), &hr, IN_PARAM(InputSource), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:LOW:CH%{Tkdpo2k3k4kChannelEnum}s?"), InputSource);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_GetLowThresholdChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_GetThresholdChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("GetThresholdChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetThresholdChannel"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("GetThresholdChannel"), &hr, IN_PARAM(InputSource), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetThresholdChannel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetThresholdChannel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:THR:CH%{Tkdpo2k3k4kChannelEnum}s?"), InputSource);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_GetThresholdChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_SetLowThreshholdChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("SetLowThreshholdChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("SetLowThreshholdChannel"), &hr, IN_PARAM(InputSource), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:LOW:CH%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), InputSource, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_SetLowThreshholdChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_SetThresholdChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("SetThresholdChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("SetThresholdChannel"), &hr, IN_PARAM(InputSource), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetThresholdChannel"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("SetThresholdChannel"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:THR:CH%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), InputSource, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_SetThresholdChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_SetThresholdDigitalChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kDigitalChannelEnum InputSource, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("SetThresholdDigitalChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("SetThresholdDigitalChannel"), &hr, IN_PARAM(InputSource), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:THR:D%{Tkdpo2k3k4kDigitalChannelEnum}s %0.15lg"), InputSource, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_SetThresholdDigitalChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_GetThresholdDigitalChannel(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kDigitalChannelEnum InputSource, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("GetThresholdDigitalChannel"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetThresholdDigitalChannel"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("GetThresholdDigitalChannel"), &hr, IN_PARAM(InputSource), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:THR:D%{Tkdpo2k3k4kDigitalChannelEnum}s?"), InputSource);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_GetThresholdDigitalChannel(InputSource, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_SetUpperThreshhold(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("SetUpperThreshhold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("SetUpperThreshhold"), &hr, IN_PARAM(InputSource), IN_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:UPP:CH%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), InputSource, Threshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_SetUpperThreshhold(InputSource, Threshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_GetUpperThreshhold(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kChannelEnum InputSource, double* Threshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("GetUpperThreshhold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetUpperThreshhold"), _T("Threshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("GetUpperThreshhold"), &hr, IN_PARAM(InputSource), OUT_PARAM(Threshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:UPP:CH%{Tkdpo2k3k4kChannelEnum}s?"), InputSource);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_GetUpperThreshhold(InputSource, Threshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_SaveEventTable(Tkdpo2k3k4kBus* pT, BSTR Filename)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("SaveEventTable"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("SaveEventTable"), &hr, IN_PARAM(Filename), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SAV:EVENT:BUS%d %$Bs"), pT->GetInstanceIndex()+1, Filename);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_SaveEventTable(Filename);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_CANBitRateEnum(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kCANBitRateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_CANBitRateEnum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_CANBitRateEnum"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:CAN:BITR %{Tkdpo2k3k4kCANBitRateEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_CANBitRateEnum(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_Position(Tkdpo2k3k4kBus* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kBus.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:POS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_Position(Tkdpo2k3k4kBus* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kBus.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:POS %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_Label(Tkdpo2k3k4kBus* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Label"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_Label"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kBus.Label"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"Parallel\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:LAB?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_Label(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_Label(Tkdpo2k3k4kBus* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_Label"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kBus.Label"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:LAB %$BQs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_Label(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_Type(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kBusTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusTypeEnum>(_T("ITkdpo2k3k4kBus.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusTypePARALLEL;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_Type(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusTypeEnum>(_T("ITkdpo2k3k4kBus.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:TYPE %{Tkdpo2k3k4kBusTypeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_State(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = (Tkdpo2k3k4kBusStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusStateEnum>(_T("ITkdpo2k3k4kBus.State"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusStateOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:STATE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_State(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusStateEnum>(_T("ITkdpo2k3k4kBus.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:STATE %{Tkdpo2k3k4kBusStateEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_DisplayType(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusDisplayTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_DisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayType"), _T("val"));
	*val = (Tkdpo2k3k4kBusDisplayTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_DisplayType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusDisplayTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusDisplayTypeEnum>(_T("ITkdpo2k3k4kBus.DisplayType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusDisplayTypeBUS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:DIS:TYP?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusDisplayTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_DisplayType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_DisplayType(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusDisplayTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_DisplayType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_DisplayType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusDisplayTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusDisplayTypeEnum>(_T("ITkdpo2k3k4kBus.DisplayType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:DIS:TYP %{Tkdpo2k3k4kBusDisplayTypeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_DisplayType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_IsClockedParallelBus(Tkdpo2k3k4kBus* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_IsClockedParallelBus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IsClockedParallelBus"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_IsClockedParallelBus"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kBus.IsClockedParallelBus"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:ISCLOCK?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_IsClockedParallelBus(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_IsClockedParallelBus(Tkdpo2k3k4kBus* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_IsClockedParallelBus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_IsClockedParallelBus"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kBus.IsClockedParallelBus"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:ISCLOCK %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_IsClockedParallelBus(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_DisplayFormat(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusDisplayFormatEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_DisplayFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayFormat"), _T("val"));
	*val = (Tkdpo2k3k4kBusDisplayFormatEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_DisplayFormat"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusDisplayFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusDisplayFormatEnum>(_T("ITkdpo2k3k4kBus.DisplayFormat"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusDisplayFormatHexadecimal;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:DIS:FORMA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusDisplayFormatEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_DisplayFormat(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_DisplayFormat(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusDisplayFormatEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_DisplayFormat"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_DisplayFormat"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusDisplayFormatEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusDisplayFormatEnum>(_T("ITkdpo2k3k4kBus.DisplayFormat"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:DIS:FORMA %{Tkdpo2k3k4kBusDisplayFormatEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_DisplayFormat(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_ParallelBusClockSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBusClockSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelBusClockSource"), _T("val"));
	*val = (Tkdpo2k3k4kBusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBusClockSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.ParallelBusClockSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:SOU?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_ParallelBusClockSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_ParallelBusClockSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBusClockSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBusClockSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.ParallelBusClockSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_ParallelBusClockSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_ParallelBusClockEdge(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusParallelBusClockEdgeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBusClockEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelBusClockEdge"), _T("val"));
	*val = (Tkdpo2k3k4kBusParallelBusClockEdgeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBusClockEdge"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockEdge"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockEdge"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBusClockEdge"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusParallelBusClockEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusParallelBusClockEdgeEnum>(_T("ITkdpo2k3k4kBus.ParallelBusClockEdge"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusParallelBusClockEdgeEither;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:EDGE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusParallelBusClockEdgeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_ParallelBusClockEdge(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_ParallelBusClockEdge(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusParallelBusClockEdgeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBusClockEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBusClockEdge"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockEdge"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockEdge"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBusClockEdge"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusParallelBusClockEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusParallelBusClockEdgeEnum>(_T("ITkdpo2k3k4kBus.ParallelBusClockEdge"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:CLOCK:EDGE %{Tkdpo2k3k4kBusParallelBusClockEdgeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_ParallelBusClockEdge(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_RS232Delimiter(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusRS232DelimiterEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_RS232Delimiter"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232Delimiter"), _T("val"));
	*val = (Tkdpo2k3k4kBusRS232DelimiterEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_RS232Delimiter"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusRS232DelimiterEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusRS232DelimiterEnum>(_T("ITkdpo2k3k4kBus.RS232Delimiter"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusRS232DelimiterLF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:DELIM?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusRS232DelimiterEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_RS232Delimiter(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_RS232Delimiter(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusRS232DelimiterEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_RS232Delimiter"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_RS232Delimiter"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusRS232DelimiterEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusRS232DelimiterEnum>(_T("ITkdpo2k3k4kBus.RS232Delimiter"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:DELIM %{Tkdpo2k3k4kBusRS232DelimiterEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_RS232Delimiter(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_RS232DisplayMode(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusRS232DisplayModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_RS232DisplayMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232DisplayMode"), _T("val"));
	*val = (Tkdpo2k3k4kBusRS232DisplayModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_RS232DisplayMode"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusRS232DisplayModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusRS232DisplayModeEnum>(_T("ITkdpo2k3k4kBus.RS232DisplayMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusRS232DisplayModeFrame;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:DIS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusRS232DisplayModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_RS232DisplayMode(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_RS232DisplayMode(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusRS232DisplayModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_RS232DisplayMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_RS232DisplayMode"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusRS232DisplayModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusRS232DisplayModeEnum>(_T("ITkdpo2k3k4kBus.RS232DisplayMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:DIS %{Tkdpo2k3k4kBusRS232DisplayModeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_RS232DisplayMode(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_RS232TXSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_RS232TXSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232TXSource"), _T("val"));
	*val = (Tkdpo2k3k4kBusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_RS232TXSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.RS232TXSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:TX:SOU?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_RS232TXSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_RS232TXSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_RS232TXSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_RS232TXSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.RS232TXSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:TX:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_RS232TXSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_RS232RXSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_RS232RXSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232RXSource"), _T("val"));
	*val = (Tkdpo2k3k4kBusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_RS232RXSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.RS232RXSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:RX:SOU?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_RS232RXSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_RS232RXSource(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_RS232RXSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_RS232RXSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.RS232RXSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:RS232C:RX:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_RS232RXSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_ParallelBitSource(Tkdpo2k3k4kBus* pT, long Bit, Tkdpo2k3k4kBusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBitSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelBitSource"), _T("val"));
	*val = (Tkdpo2k3k4kBusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_ParallelBitSource"), &hr, IN_PARAM(Bit), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBitSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBitSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelBitSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.ParallelBitSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusSourceD0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:BIT%d:SOU?"), pT->GetInstanceIndex()+1, Bit);
		strResp = _T("%{Tkdpo2k3k4kBusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_ParallelBitSource(Bit, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_ParallelBitSource(Tkdpo2k3k4kBus* pT, long Bit, Tkdpo2k3k4kBusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBitSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_ParallelBitSource"), &hr, IN_PARAM(Bit), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBitSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBitSource"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelBitSource"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSourceEnum>(_T("ITkdpo2k3k4kBus.ParallelBitSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:BIT%d:SOU %{Tkdpo2k3k4kBusSourceEnum}s"), pT->GetInstanceIndex()+1, Bit, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_ParallelBitSource(Bit, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_ParallelWidth(Tkdpo2k3k4kBus* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_ParallelWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelWidth"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_ParallelWidth"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelWidth"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelWidth"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelWidth"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kBus.ParallelWidth"));
		if (!pSimData->GetValue(val))
		{
			*val = 16;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:WID?"), pT->GetInstanceIndex()+1);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_ParallelWidth(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_ParallelWidth(Tkdpo2k3k4kBus* pT, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_ParallelWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_ParallelWidth"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelWidth"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelWidth"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelWidth"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kBus.ParallelWidth"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:PAR:WID %d"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_ParallelWidth(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_SPIFraming(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSPIFramingEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_SPIFraming"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SPIFraming"), _T("val"));
	*val = (Tkdpo2k3k4kBusSPIFramingEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_SPIFraming"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSPIFramingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSPIFramingEnum>(_T("ITkdpo2k3k4kBus.SPIFraming"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kBusSPIFramingSS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:SPI:FRAMING?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kBusSPIFramingEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_SPIFraming(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_SPIFraming(Tkdpo2k3k4kBus* pT, Tkdpo2k3k4kBusSPIFramingEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_SPIFraming"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_SPIFraming"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kBusSPIFramingEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kBusSPIFramingEnum>(_T("ITkdpo2k3k4kBus.SPIFraming"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:SPI:FRAMING %{Tkdpo2k3k4kBusSPIFramingEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_SPIFraming(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_get_SPIIdleTime(Tkdpo2k3k4kBus* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("get_SPIIdleTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SPIIdleTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("get_SPIIdleTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kBus.SPIIdleTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:SPI:IDLET?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_get_SPIIdleTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kBus_put_SPIIdleTime(Tkdpo2k3k4kBus* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kBus::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kBus), _T("ITkdpo2k3k4kBus"), _T("put_SPIIdleTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kBus"), _T("put_SPIIdleTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kBus.SPIIdleTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("BUS:B%d:SPI:IDLET %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kBus_put_SPIIdleTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_Configure(Tkdpo2k3k4kMath* pT, BSTR Expression, double VerticalPosition, double VerticalScale, double HorizontalPosition, double HorizontalScale, VARIANT_BOOL DisplayState, Tkdpo2k3k4kMathTypeEnum Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("Configure"), &hr, IN_PARAM(Expression), IN_PARAM(VerticalPosition), IN_PARAM(VerticalScale), IN_PARAM(HorizontalPosition), IN_PARAM(HorizontalScale), IN_PARAM(DisplayState), IN_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:DEF %$BQs;:MATH%d:VERT:POS %0.15lg;:MATH%d:VERT:SCA %0.15lg;:MATH%d:HOR:POS %0.15lg;:MATH%d:HOR:SCA %0.15lg;:SEL:MATH%d %{VARIANT_BOOL}s;:MATH:TYP %{Tkdpo2k3k4kMathTypeEnum}s"), pT->GetInstanceIndex()+1, Expression, pT->GetInstanceIndex()+1, VerticalPosition, pT->GetInstanceIndex()+1, VerticalScale, pT->GetInstanceIndex()+1, HorizontalPosition, pT->GetInstanceIndex()+1, HorizontalScale, pT->GetInstanceIndex()+1, DisplayState, Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_Configure(Expression, VerticalPosition, VerticalScale, HorizontalPosition, HorizontalScale, DisplayState, Type);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_Read(Tkdpo2k3k4kMath* pT, BSTR* Expression, double* VerticalPosition, double* VerticalScale, BSTR* VerticalUnits, double* HorizontalPosition, double* HorizontalScale, BSTR* HorizontalUnits, VARIANT_BOOL* DisplayState, Tkdpo2k3k4kMathTypeEnum* Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Expression == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Expression"));
	if (VerticalPosition == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("VerticalPosition"));
	if (VerticalScale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("VerticalScale"));
	if (VerticalUnits == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("VerticalUnits"));
	if (HorizontalPosition == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("HorizontalPosition"));
	if (HorizontalScale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("HorizontalScale"));
	if (HorizontalUnits == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("HorizontalUnits"));
	if (DisplayState == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("DisplayState"));
	if (Type == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Type"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("Read"), &hr, OUT_PARAM(Expression), OUT_PARAM(VerticalPosition), OUT_PARAM(VerticalScale), OUT_PARAM(VerticalUnits), OUT_PARAM(HorizontalPosition), OUT_PARAM(HorizontalScale), OUT_PARAM(HorizontalUnits), OUT_PARAM(DisplayState), OUT_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:DEF?;:MATH%d:VERT:POS?;:MATH%d:VERT:SCA?;UNITS?;:MATH%d:HOR:POS?;:MATH%d:HOR:SCA?;UNITS?;:SEL:MATH%d?;:MATH%d:TYP?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs;%lg;%lg;%$Bs;%lg;%lg;%$Bs;%{VARIANT_BOOL}[^;];%{Tkdpo2k3k4kMathTypeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_Read(Expression, VerticalPosition, VerticalScale, VerticalUnits, HorizontalPosition, HorizontalScale, HorizontalUnits, DisplayState, Type);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_DisplayState(Tkdpo2k3k4kMath* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayState"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_DisplayState"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMath.DisplayState"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEL:MATH%d?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_DisplayState(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_DisplayState(Tkdpo2k3k4kMath* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_DisplayState"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_DisplayState"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMath.DisplayState"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEL:MATH%d %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_DisplayState(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_Expression(Tkdpo2k3k4kMath* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_Expression"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Expression"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_Expression"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kMath.Expression"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"CH1+CH2\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:DEF?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_Expression(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_Expression(Tkdpo2k3k4kMath* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_Expression"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_Expression"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kMath.Expression"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:DEF %$Bs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_Expression(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_Label(Tkdpo2k3k4kMath* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Label"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_Label"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kMath.Label"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:LAB?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_Label(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_Label(Tkdpo2k3k4kMath* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_Label"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kMath.Label"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:LAB %$BQs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_Label(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_MathVariable(Tkdpo2k3k4kMath* pT, long Variable, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_MathVariable"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MathVariable"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_MathVariable"), &hr, IN_PARAM(Variable), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MathVariable"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_MathVariable"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.MathVariable"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATHVAR:VAR%d?"), Variable);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_MathVariable(Variable, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_MathVariable(Tkdpo2k3k4kMath* pT, long Variable, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_MathVariable"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_MathVariable"), &hr, IN_PARAM(Variable), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MathVariable"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_MathVariable"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.MathVariable"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATHVAR:VAR%d %0.15lg"), Variable, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_MathVariable(Variable, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_HorizontalPosition(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalPosition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalPosition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.HorizontalPosition"));
		if (!pSimData->GetValue(val))
		{
			*val = 5.000000E+001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:HOR:POS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_HorizontalPosition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_HorizontalPosition(Tkdpo2k3k4kMath* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_HorizontalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_HorizontalPosition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.HorizontalPosition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:HOR:POS %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_HorizontalPosition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_HorizontalScale(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.HorizontalScale"));
		if (!pSimData->GetValue(val))
		{
			*val = 4.000000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:HOR:SCA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_HorizontalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_HorizontalScale(Tkdpo2k3k4kMath* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_HorizontalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_HorizontalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.HorizontalScale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:HOR:SCA %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_HorizontalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_HorizontalUnits(Tkdpo2k3k4kMath* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_HorizontalUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"s\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:HOR:UNI?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_HorizontalUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_VerticalPosition(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_VerticalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalPosition"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_VerticalPosition"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.VerticalPosition"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:VERT:POS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_VerticalPosition(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_VerticalPosition(Tkdpo2k3k4kMath* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_VerticalPosition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_VerticalPosition"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.VerticalPosition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:VERT:POS %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_VerticalPosition(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_VerticalScale(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_VerticalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.VerticalScale"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E-001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:VERT:SCA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_VerticalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_VerticalScale(Tkdpo2k3k4kMath* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_VerticalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kMath.VerticalScale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:VERT:SCA %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_VerticalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_VerticalUnits(Tkdpo2k3k4kMath* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_VerticalUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalUnits"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_VerticalUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"V\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:VERT:UNI?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_VerticalUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_Type(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kMathTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kMathTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMathTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMathTypeEnum>(_T("ITkdpo2k3k4kMath.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMathTypeDual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:TYP?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kMathTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_put_Type(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kMathTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMathTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMathTypeEnum>(_T("ITkdpo2k3k4kMath.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:TYP %{Tkdpo2k3k4kMathTypeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMath_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMath_get_Spectral(Tkdpo2k3k4kMath* pT, ITkdpo2k3k4kMathSpectral** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMath), _T("ITkdpo2k3k4kMath"), _T("get_Spectral"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Spectral"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMath"), _T("get_Spectral"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kMath_get_Spectral(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_GetEndPointGatingIndicator(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("GetEndPointGatingIndicator"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetEndPointGatingIndicator"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("GetEndPointGatingIndicator"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetEndPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetEndPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetEndPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetEndPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetEndPointGatingIndicator"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:GAT:INDIC:END?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_GetEndPointGatingIndicator(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_GetStartPointGatingIndicator(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("GetStartPointGatingIndicator"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetStartPointGatingIndicator"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("GetStartPointGatingIndicator"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetStartPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetStartPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetStartPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetStartPointGatingIndicator"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetStartPointGatingIndicator"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:GAT:INDIC:STAR?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_GetStartPointGatingIndicator(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_GetNyquistFrequency(Tkdpo2k3k4kMath* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("GetNyquistFrequency"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetNyquistFrequency"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("GetNyquistFrequency"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetNyquistFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetNyquistFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetNyquistFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetNyquistFrequency"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("GetNyquistFrequency"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:NYQUISTF?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_GetNyquistFrequency(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_get_DisplayGatingIndicators(Tkdpo2k3k4kMath* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("get_DisplayGatingIndicators"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DisplayGatingIndicators"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("get_DisplayGatingIndicators"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DisplayGatingIndicators"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMathSpectral.DisplayGatingIndicators"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:GAT:INDIC?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_get_DisplayGatingIndicators(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_put_DisplayGatingIndicators(Tkdpo2k3k4kMath* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("put_DisplayGatingIndicators"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("put_DisplayGatingIndicators"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayGatingIndicators"));
		}
		else if (pT->InstrumentInFamily(_T("MDO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DisplayGatingIndicators"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMathSpectral.DisplayGatingIndicators"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:GAT:INDIC %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_put_DisplayGatingIndicators(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_get_Window(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kSpectralWindowEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("get_Window"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Window"), _T("val"));
	*val = (Tkdpo2k3k4kSpectralWindowEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("get_Window"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSpectralWindowEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSpectralWindowEnum>(_T("ITkdpo2k3k4kMathSpectral.Window"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSpectralWindowHanning;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:WIN?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSpectralWindowEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_get_Window(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_put_Window(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kSpectralWindowEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("put_Window"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("put_Window"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSpectralWindowEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSpectralWindowEnum>(_T("ITkdpo2k3k4kMathSpectral.Window"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:WIN %{Tkdpo2k3k4kSpectralWindowEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_put_Window(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_get_MagnitudeUnits(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kSpectralMagUnitEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("get_MagnitudeUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_MagnitudeUnits"), _T("val"));
	*val = (Tkdpo2k3k4kSpectralMagUnitEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("get_MagnitudeUnits"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSpectralMagUnitEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSpectralMagUnitEnum>(_T("ITkdpo2k3k4kMathSpectral.MagnitudeUnits"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSpectralMagUnitDB;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:MAG?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSpectralMagUnitEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_get_MagnitudeUnits(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMathSpectral_put_MagnitudeUnits(Tkdpo2k3k4kMath* pT, Tkdpo2k3k4kSpectralMagUnitEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMath::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMathSpectral), _T("ITkdpo2k3k4kMathSpectral"), _T("put_MagnitudeUnits"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMathSpectral"), _T("put_MagnitudeUnits"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSpectralMagUnitEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSpectralMagUnitEnum>(_T("ITkdpo2k3k4kMathSpectral.MagnitudeUnits"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MATH%d:SPECT:MAG %{Tkdpo2k3k4kSpectralMagUnitEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMathSpectral_put_MagnitudeUnits(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_Configure(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum Source, Tkdpo2k3k4kMeasurementTypeEnum Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("Configure"), &hr, IN_PARAM(Source), IN_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s"), pT->GetInstanceIndex()+1, Source, Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_Configure(Source, Type);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_ConfigureDelay(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum Direction, Tkdpo2k3k4kMeasurementEdgeEnum Edge1, Tkdpo2k3k4kMeasurementEdgeEnum Edge2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ConfigureDelay"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ConfigureDelay"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), IN_PARAM(Direction), IN_PARAM(Edge1), IN_PARAM(Edge2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE DELAY;DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s;EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), pT->GetInstanceIndex()+1, Source1, Source2, Direction, Edge1, Edge2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_ConfigureDelay(Source1, Source2, Direction, Edge1, Edge2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_ConfigurePhase(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ConfigurePhase"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ConfigurePhase"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE PHASE"), pT->GetInstanceIndex()+1, Source1, Source2);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_ConfigurePhase(Source1, Source2);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_Read(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum* Source1, Tkdpo2k3k4kSourceEnum* Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum* Direction, Tkdpo2k3k4kMeasurementEdgeEnum* Edge1, Tkdpo2k3k4kMeasurementEdgeEnum* Edge2, Tkdpo2k3k4kMeasurementTypeEnum* Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source1"));
	if (Source2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Source2"));
	if (Direction == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Direction"));
	if (Edge1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Edge1"));
	if (Edge2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Edge2"));
	if (Type == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Type"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("Read"), &hr, OUT_PARAM(Source1), OUT_PARAM(Source2), OUT_PARAM(Direction), OUT_PARAM(Edge1), OUT_PARAM(Edge2), OUT_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1?;SOURCE2?;TYPE?;DELAY:DIRECTION?;EDGE1?;EDGE2?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kMeasurementTypeEnum}[^;];%{Tkdpo2k3k4kMeasurementDelayDirectionEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_Read(Source1, Source2, Direction, Edge1, Edge2, Type);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_ReadValue(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum Source1, Tkdpo2k3k4kSourceEnum Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum Direction, Tkdpo2k3k4kMeasurementEdgeEnum Edge1, Tkdpo2k3k4kMeasurementEdgeEnum Edge2, Tkdpo2k3k4kMeasurementTypeEnum Type, double* Val, BSTR* Unit)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ReadValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadValue"), _T("Val"));
	if (Unit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadValue"), _T("Unit"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ReadValue"), &hr, IN_PARAM(Source1), IN_PARAM(Source2), IN_PARAM(Direction), IN_PARAM(Edge1), IN_PARAM(Edge2), IN_PARAM(Type), OUT_PARAM(Val), OUT_PARAM(Unit), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":MEASUREMENT:MEAS%d:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s;SOURCE2 %{Tkdpo2k3k4kSourceEnum}s;TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s;DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s;EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s;:MEASUREMENT:MEAS%d:VALUE?;UNIT?"), pT->GetInstanceIndex()+1, Source1, Source2, Type, Direction, Edge1, Edge2, pT->GetInstanceIndex()+1);
		strResp = _T("%lg;%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_ReadValue(Source1, Source2, Direction, Edge1, Edge2, Type, Val, Unit);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_ReadDelay(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum* Source1, Tkdpo2k3k4kSourceEnum* Source2, Tkdpo2k3k4kMeasurementDelayDirectionEnum* Direction, Tkdpo2k3k4kMeasurementEdgeEnum* Edge1, Tkdpo2k3k4kMeasurementEdgeEnum* Edge2)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ReadDelay"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Source1"));
	if (Source2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Source2"));
	if (Direction == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Direction"));
	if (Edge1 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Edge1"));
	if (Edge2 == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadDelay"), _T("Edge2"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("ReadDelay"), &hr, OUT_PARAM(Source1), OUT_PARAM(Source2), OUT_PARAM(Direction), OUT_PARAM(Edge1), OUT_PARAM(Edge2), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1?;SOURCE2?;TYPE DELAY;DELAY:DIRECTION?;EDGE1?;EDGE2?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kSourceEnum}[^;];%{Tkdpo2k3k4kMeasurementDelayDirectionEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;];%{Tkdpo2k3k4kMeasurementEdgeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_ReadDelay(Source1, Source2, Direction, Edge1, Edge2);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Count(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Count"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Count"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Count"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 1.000000E+003;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:COUNT?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Count(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_DelayDirection(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementDelayDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayDirection"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementDelayDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayDirection"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementDelayDirectionForward;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:DIRECTION?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_DelayDirection(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_DelayDirection(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementDelayDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayDirection"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementDelayDirectionEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:DIRECTION %{Tkdpo2k3k4kMeasurementDelayDirectionEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_DelayDirection(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_DelayEdge1(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementEdgeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayEdge1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayEdge1"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementEdgeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayEdge1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayEdge1"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementEdgeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:EDGE1?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kMeasurementEdgeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_DelayEdge1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_DelayEdge1(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementEdgeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayEdge1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayEdge1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayEdge1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:EDGE1 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_DelayEdge1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_DelayEdge2(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementEdgeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayEdge2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DelayEdge2"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementEdgeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_DelayEdge2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayEdge2"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementEdgeRise;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:EDGE2?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kMeasurementEdgeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_DelayEdge2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_DelayEdge2(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementEdgeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayEdge2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_DelayEdge2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementEdgeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.DelayEdge2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:DELAY:EDGE2 %{Tkdpo2k3k4kMeasurementEdgeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_DelayEdge2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Maximum(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Maximum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Maximum"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Maximum"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:MAXIMUM?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Maximum(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Mean(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Mean"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Mean"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Mean"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:MEAN?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Mean(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Minimum(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Minimum"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Minimum"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Minimum"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:MINIMUM?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Minimum(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Source1(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Source1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source1"), _T("val"));
	*val = (Tkdpo2k3k4kSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Source1"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Source1"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSourceCH1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Source1(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_Source1(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Source1"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Source1"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Source1"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE1 %{Tkdpo2k3k4kSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_Source1(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Source2(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Source2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Source2"), _T("val"));
	*val = (Tkdpo2k3k4kSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Source2"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Source2"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSourceCH2;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE2?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Source2(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_Source2(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Source2"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Source2"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSourceEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Source2"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:SOURCE2 %{Tkdpo2k3k4kSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_Source2(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_StandardDeviation(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_StandardDeviation"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_StandardDeviation"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_StandardDeviation"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:STDDEV?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_StandardDeviation(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_State(Tkdpo2k3k4kMeasurementSlot* pT, VARIANT_BOOL* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMeasurementSlot.State"));
		if (!pSimData->GetValue(val))
		{
			*val = VARIANT_FALSE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:STATE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{VARIANT_BOOL}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_State(Tkdpo2k3k4kMeasurementSlot* pT, VARIANT_BOOL val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<VARIANT_BOOL>* pSimData = pT->GetOrCreateCacheEntry<VARIANT_BOOL>(_T("ITkdpo2k3k4kMeasurementSlot.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:STATE %{VARIANT_BOOL}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Type(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Type"), _T("val"));
	*val = (Tkdpo2k3k4kMeasurementTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Type"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Type"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kMeasurementTypePeriod;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:TYPE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kMeasurementTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Type(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_put_Type(Tkdpo2k3k4kMeasurementSlot* pT, Tkdpo2k3k4kMeasurementTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Type"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("put_Type"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kMeasurementTypeEnum>(_T("ITkdpo2k3k4kMeasurementSlot.Type"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:TYPE %{Tkdpo2k3k4kMeasurementTypeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_put_Type(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Units(Tkdpo2k3k4kMeasurementSlot* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Units"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Units"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Units"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = ::SysAllocString(L"\"\"");

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:UNITS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Units(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kMeasurementSlot_get_Value(Tkdpo2k3k4kMeasurementSlot* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kMeasurementSlot::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kMeasurementSlot), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Value"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Value"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kMeasurementSlot"), _T("get_Value"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("MEASUREMENT:MEAS%d:VALUE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kMeasurementSlot_get_Value(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_Copy(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchCopyEnum Type)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("Copy"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("Copy"), &hr, IN_PARAM(Type), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:COPY %{Tkdpo2k3k4kSearchCopyEnum}s"), pT->GetInstanceIndex()+1, Type);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_Copy(Type);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureEdge(Tkdpo2k3k4kSearch* pT, double Level, Tkdpo2k3k4kSearchSource3Enum Source, Tkdpo2k3k4kTriggerSlopeEnum Slope)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureEdge"), &hr, IN_PARAM(Level), IN_PARAM(Source), IN_PARAM(Slope), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYP EDGE;:SEARCH:SEARCH%d:TRIG:A:EDGE:SLO %{Tkdpo2k3k4kTriggerSlopeEnum}s;:SEARCH:SEARCH%d:TRIG:A:EDGE:SOU %{Tkdpo2k3k4kSearchSource3Enum}s ;:SEARCH:SEARCH%d:TRIG:A:LEV %0.15lg"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Slope, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Level);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureEdge(Level, Source, Slope);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureRunt(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum Source, Tkdpo2k3k4kTriggerRuntConditionEnum When, Tkdpo2k3k4kTriggerRuntPolarityEnum Polarity, double Width)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureRunt"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureRunt"), &hr, IN_PARAM(Source), IN_PARAM(When), IN_PARAM(Polarity), IN_PARAM(Width), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:RUNT:SOU %{Tkdpo2k3k4kSearchSource2Enum}s;:SEARCH:SEARCH%d:TRIG:A:RUNT:WHE %{Tkdpo2k3k4kTriggerRuntConditionEnum}s;:SEARCH:SEARCH%d:TRIG:A:RUNT:WID %0.15lg;:SEARCH:SEARCH%d:TRIG:A:RUNT:POL %{Tkdpo2k3k4kTriggerRuntPolarityEnum}s"), pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, When, pT->GetInstanceIndex()+1, Width, pT->GetInstanceIndex()+1, Polarity);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureRunt(Source, When, Polarity, Width);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureSetupHold(Tkdpo2k3k4kSearch* pT, double Level, Tkdpo2k3k4kSearchSource3Enum Source, Tkdpo2k3k4kTriggerSlopeEnum ClockEdge, Tkdpo2k3k4kSearchSource3Enum ClockSource, double HoldTime, double SetTime, double ClockLevel)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureSetupHold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureSetupHold"), &hr, IN_PARAM(Level), IN_PARAM(Source), IN_PARAM(ClockEdge), IN_PARAM(ClockSource), IN_PARAM(HoldTime), IN_PARAM(SetTime), IN_PARAM(ClockLevel), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYPE SETHOLD;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:DATA:THRESHOLD %0.15lg;SOURCE %{Tkdpo2k3k4kSearchSource3Enum}s;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:CLOCK:THRESHOLD %0.15lg;SOURCE %{Tkdpo2k3k4kSearchSource3Enum}s;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:HOLDTIME %0.15lg;SETTIME %0.15lg;CLOCK:EDGE %{Tkdpo2k3k4kTriggerSlopeEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Level, Source, pT->GetInstanceIndex()+1, ClockLevel, ClockSource, pT->GetInstanceIndex()+1, HoldTime, SetTime, ClockEdge);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureSetupHold(Level, Source, ClockEdge, ClockSource, HoldTime, SetTime, ClockLevel);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureTransition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum Source, double DeltaTime, Tkdpo2k3k4kTriggerTransitionConditionEnum When, Tkdpo2k3k4kTriggerPulsePolarityEnum Polarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureTransition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureTransition"), &hr, IN_PARAM(Source), IN_PARAM(DeltaTime), IN_PARAM(When), IN_PARAM(Polarity), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYP TRANSITIONSEARCH:SEARCH%d:TRIGGER:A:PULSEW:SOURCE %{Tkdpo2k3k4kSearchSource2Enum}s;:SEARCH:SEARCH%d:TRIGGER:A:TRANSITION:DELTATIME %0.15lg;WHEN %{Tkdpo2k3k4kTriggerTransitionConditionEnum}s;POLARITY %{Tkdpo2k3k4kTriggerPulsePolarityEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, DeltaTime, When, Polarity);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureTransition(Source, DeltaTime, When, Polarity);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigurePulseWidth(Tkdpo2k3k4kSearch* pT, double Level, Tkdpo2k3k4kSearchSource3Enum Source, Tkdpo2k3k4kTriggerPulseWidthConditionEnum Condition, Tkdpo2k3k4kTriggerWidthPolarityEnum Polarity, double HighLimit, double LowLimit)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigurePulseWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigurePulseWidth"), &hr, IN_PARAM(Level), IN_PARAM(Source), IN_PARAM(Condition), IN_PARAM(Polarity), IN_PARAM(HighLimit), IN_PARAM(LowLimit), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYPE PULSEW;:SEARCH:SEARCH%d:TRIG:A:PULSEW:SOU %{Tkdpo2k3k4kSearchSource3Enum}s;:SEARCH:SEARCH%d:TRIG:A:PULSEW:WID %0.15lg;:SEARCH:SEARCH%d:TRIG:A:PULSEW:WHE %{Tkdpo2k3k4kTriggerPulseWidthConditionEnum}s;:SEARCH:SEARCH%d:TRIGGER:A:PULSEW:POL %{Tkdpo2k3k4kTriggerWidthPolarityEnum}s;:SEARCH:SEARCH%d:TRIG:A:UPP:%{Tkdpo2k3k4kSearchSource3Enum}s %0.15lg;:SEARCH:SEARCH%d:TRIG:A:LOW:%{Tkdpo2k3k4kSearchSource3Enum}s %0.15lg"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Level, pT->GetInstanceIndex()+1, Condition, pT->GetInstanceIndex()+1, Polarity, pT->GetInstanceIndex()+1, Source, HighLimit, pT->GetInstanceIndex()+1, Source, LowLimit);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigurePulseWidth(Level, Source, Condition, Polarity, HighLimit, LowLimit);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadEdge(Tkdpo2k3k4kSearch* pT, double* Level, Tkdpo2k3k4kSearchSource3Enum* Source, Tkdpo2k3k4kTriggerSlopeEnum* Slope)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadEdge"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadEdge"), _T("Level"));
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadEdge"), _T("Source"));
	if (Slope == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadEdge"), _T("Slope"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadEdge"), &hr, OUT_PARAM(Level), OUT_PARAM(Source), OUT_PARAM(Slope), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:EDGE:SLO?;:SEARCH:SEARCH%d:TRIG:A:EDGE:SOU?;:SEARCH:SEARCH%d:TRIG:A:LEV?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kTriggerSlopeEnum}[^;];%{Tkdpo2k3k4kSearchSource3Enum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadEdge(Level, Source, Slope);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadRunt(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum* Source, Tkdpo2k3k4kTriggerRuntConditionEnum* When, Tkdpo2k3k4kTriggerRuntPolarityEnum* Polarity, double* Width)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadRunt"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRunt"), _T("Source"));
	if (When == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRunt"), _T("When"));
	if (Polarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRunt"), _T("Polarity"));
	if (Width == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadRunt"), _T("Width"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadRunt"), &hr, OUT_PARAM(Source), OUT_PARAM(When), OUT_PARAM(Polarity), OUT_PARAM(Width), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:RUNT:SOU?;:SEARCH:SEARCH%d:TRIGGER:A:RUNT:WHEN?;:SEARCH:SEARCH%d:TRIGGER:A:RUNT:POLARITY?;:SEARCH:SEARCH%d:TRIGGER:A:RUNT:WIDTH?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchSource2Enum}[^;];%{Tkdpo2k3k4kTriggerRuntConditionEnum}[^;];%{Tkdpo2k3k4kTriggerRuntPolarityEnum}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadRunt(Source, When, Polarity, Width);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadSetupHold(Tkdpo2k3k4kSearch* pT, double* Level, Tkdpo2k3k4kSearchSource3Enum* Source, Tkdpo2k3k4kTriggerSlopeEnum* ClockEdge, Tkdpo2k3k4kSearchSource3Enum* Clocksource, double* HoldTime, double* SetTime, double* ClockLevel)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadSetupHold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("Level"));
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("Source"));
	if (ClockEdge == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("ClockEdge"));
	if (Clocksource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("Clocksource"));
	if (HoldTime == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("HoldTime"));
	if (SetTime == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("SetTime"));
	if (ClockLevel == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHold"), _T("ClockLevel"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadSetupHold"), &hr, OUT_PARAM(Level), OUT_PARAM(Source), OUT_PARAM(ClockEdge), OUT_PARAM(Clocksource), OUT_PARAM(HoldTime), OUT_PARAM(SetTime), OUT_PARAM(ClockLevel), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:DATA:THRESHOLD?;SOURCE?;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:CLOCK:THRESHOLD?;SOURCE?;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:HOLDTIME?;SETTIME?;CLOCK:EDGE?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%lg;%{Tkdpo2k3k4kSearchSource3Enum}[^;];%lg;%{Tkdpo2k3k4kSearchSource3Enum}[^;];%lg;%lg;%{Tkdpo2k3k4kTriggerSlopeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadSetupHold(Level, Source, ClockEdge, Clocksource, HoldTime, SetTime, ClockLevel);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadPulseWidth(Tkdpo2k3k4kSearch* pT, double* Level, Tkdpo2k3k4kSearchSource3Enum* Source, Tkdpo2k3k4kTriggerPulseWidthConditionEnum* Condition, Tkdpo2k3k4kTriggerWidthPolarityEnum* Polarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadPulseWidth"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPulseWidth"), _T("Level"));
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPulseWidth"), _T("Source"));
	if (Condition == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPulseWidth"), _T("Condition"));
	if (Polarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadPulseWidth"), _T("Polarity"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadPulseWidth"), &hr, OUT_PARAM(Level), OUT_PARAM(Source), OUT_PARAM(Condition), OUT_PARAM(Polarity), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIG:A:PULSEW:SOU?;:SEARCH:SEARCH%d:TRIG:A:PULSEW:WID?;:SEARCH:SEARCH%d:TRIG:A:PULSEW:WHE?;:SEARCH:SEARCH%d:TRIGGER:A:PULSEW:POL?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchSource3Enum}[^;];%lg;%{Tkdpo2k3k4kTriggerPulseWidthConditionEnum}[^;];%{Tkdpo2k3k4kTriggerWidthPolarityEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadPulseWidth(Level, Source, Condition, Polarity);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadTransition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum* Source, double* DeltaTime, Tkdpo2k3k4kTriggerTransitionConditionEnum* When, Tkdpo2k3k4kTriggerPulsePolarityEnum* Polarity)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadTransition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadTransition"), _T("Source"));
	if (DeltaTime == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadTransition"), _T("DeltaTime"));
	if (When == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadTransition"), _T("When"));
	if (Polarity == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadTransition"), _T("Polarity"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadTransition"), &hr, OUT_PARAM(Source), OUT_PARAM(DeltaTime), OUT_PARAM(When), OUT_PARAM(Polarity), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:PULSEW:SOURCE?;:SEARCH:SEARCH%d:TRIGGER:A:TRANSITION:DELTATIME?;WHEN?;POLARITY?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchSource2Enum}[^;];%lg;%{Tkdpo2k3k4kTriggerTransitionConditionEnum}[^;];%{Tkdpo2k3k4kTriggerPulsePolarityEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadTransition(Source, DeltaTime, When, Polarity);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureLogicSearchSource(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum Source, Tkdpo2k3k4kTriggerLogicInputChannelEnum Input, double Threshold, Tkdpo2k3k4kTriggerLogicInputChannelEnum PatternInput)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicSearchSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicSearchSource"), &hr, IN_PARAM(Source), IN_PARAM(Input), IN_PARAM(Threshold), IN_PARAM(PatternInput), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:LOGIC:INPUT:%{Tkdpo2k3k4kSearchSource2Enum}s %{Tkdpo2k3k4kTriggerLogicInputChannelEnum}s;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:THRESHOLD:%{Tkdpo2k3k4kSearchSource2Enum}s %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:PAT:INPUT:%{Tkdpo2k3k4kSearchSource2Enum}s %{Tkdpo2k3k4kTriggerLogicInputChannelEnum}s"), pT->GetInstanceIndex()+1, Source, Input, pT->GetInstanceIndex()+1, Source, Threshold, pT->GetInstanceIndex()+1, Source, PatternInput);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureLogicSearchSource(Source, Input, Threshold, PatternInput);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadLogicSearchSource(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource2Enum Source, Tkdpo2k3k4kTriggerLogicInputChannelEnum* Input, double* Threshold, Tkdpo2k3k4kTriggerLogicInputChannelEnum* PatternInput)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicSearchSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Input == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicSearchSource"), _T("Input"));
	if (Threshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicSearchSource"), _T("Threshold"));
	if (PatternInput == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicSearchSource"), _T("PatternInput"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicSearchSource"), &hr, IN_PARAM(Source), OUT_PARAM(Input), OUT_PARAM(Threshold), OUT_PARAM(PatternInput), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:LOGIC:INPUT:%{Tkdpo2k3k4kSearchSource2Enum}s?;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:THRESHOLD:%{Tkdpo2k3k4kSearchSource2Enum}s?;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:PAT:INPUT:%{Tkdpo2k3k4kSearchSource2Enum}s?"), pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source);
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicInputChannelEnum}[^;];%lg;%{Tkdpo2k3k4kTriggerLogicInputChannelEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadLogicSearchSource(Source, Input, Threshold, PatternInput);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureLogicPattern(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTriggerPatternConditionEnum Condition, double LessLimit, double MoreLimit, Tkdpo2k3k4kTriggerPatternTypeEnum PatternType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicPattern"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicPattern"), &hr, IN_PARAM(Condition), IN_PARAM(LessLimit), IN_PARAM(MoreLimit), IN_PARAM(PatternType), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYPE LOGI;:SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN %{Tkdpo2k3k4kTriggerPatternConditionEnum}s;:SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN:LESSLIMIT %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN:MORELIMIT %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:FUNCTION %{Tkdpo2k3k4kTriggerPatternTypeEnum}s"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, Condition, pT->GetInstanceIndex()+1, LessLimit, pT->GetInstanceIndex()+1, MoreLimit, pT->GetInstanceIndex()+1, PatternType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureLogicPattern(Condition, LessLimit, MoreLimit, PatternType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadLogicPattern(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTriggerPatternConditionEnum* Condition, double* LessLimit, double* MoreLimit, Tkdpo2k3k4kTriggerPatternTypeEnum* PatternType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicPattern"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Condition == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicPattern"), _T("Condition"));
	if (LessLimit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicPattern"), _T("LessLimit"));
	if (MoreLimit == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicPattern"), _T("MoreLimit"));
	if (PatternType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicPattern"), _T("PatternType"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicPattern"), &hr, OUT_PARAM(Condition), OUT_PARAM(LessLimit), OUT_PARAM(MoreLimit), OUT_PARAM(PatternType), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN?;:SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN:LESSLIMIT?;:SEARCH:SEARCH%d:TRIGGER:A:LOGI:PATTERN:WHEN:MORELIMIT?;:SEARCH:SEARCH%d:TRIGGER:A:LOGIC:FUNCTION?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kTriggerPatternConditionEnum}[^;];%lg;%lg;%{Tkdpo2k3k4kTriggerPatternTypeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadLogicPattern(Condition, LessLimit, MoreLimit, PatternType);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureLogicClock(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTriggerLogicClockSourceEnum Source, Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum EdgeType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicClock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureLogicClock"), &hr, IN_PARAM(Source), IN_PARAM(EdgeType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:LOGI:INP:CLOC:SOU %{Tkdpo2k3k4kTriggerLogicClockSourceEnum}s;:SEARCH:SEARCH%d:TRIG:A:LOGI:INP:CLOC:EDGE %{Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum}s"), pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, EdgeType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureLogicClock(Source, EdgeType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadLogicClock(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTriggerLogicClockSourceEnum* Source, Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum* EdgeType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicClock"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Source == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicClock"), _T("Source"));
	if (EdgeType == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadLogicClock"), _T("EdgeType"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadLogicClock"), &hr, OUT_PARAM(Source), OUT_PARAM(EdgeType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:LOGI:INP:CLOC:SOU?;:SEARCH:SEARCH%d:TRIG:A:LOGI:INP:CLOC:EDGE?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kTriggerLogicClockSourceEnum}[^;];%{Tkdpo2k3k4kTriggerLogicClockEdgeTypeEnum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadLogicClock(Source, EdgeType);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadSetupHoldSearchSource(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchSource3Enum* Clocksource, Tkdpo2k3k4kSearchSource3Enum* DataSource)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadSetupHoldSearchSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Clocksource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHoldSearchSource"), _T("Clocksource"));
	if (DataSource == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadSetupHoldSearchSource"), _T("DataSource"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadSetupHoldSearchSource"), &hr, OUT_PARAM(Clocksource), OUT_PARAM(DataSource), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:CLOCK:SOURCE?;:SEARCH:SEARCH%d:TRIGGER:A:SETHOLD:DATA:SOURCE?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchSource3Enum}[^;];%{Tkdpo2k3k4kSearchSource3Enum}[^;]");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadSetupHoldSearchSource(Clocksource, DataSource);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureAIndependentParameters(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kChannelEnum Source, double Level, double UpperThreshold, double LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureAIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureAIndependentParameters"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(UpperThreshold), IN_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:LEVEL:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s %0.15lg"), pT->GetInstanceIndex()+1, Source, Level, pT->GetInstanceIndex()+1, Source, UpperThreshold, pT->GetInstanceIndex()+1, Source, LowerThreshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureAIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadAIndependentParameters(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kChannelEnum Source, double* Level, double* UpperThreshold, double* LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadAIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("Level"));
	if (UpperThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("UpperThreshold"));
	if (LowerThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadAIndependentParameters"), _T("LowerThreshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadAIndependentParameters"), &hr, IN_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(UpperThreshold), OUT_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:LEVEL:%{Tkdpo2k3k4kChannelEnum}s?;:SEARCH:SEARCH%d:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?;:SEARCH:SEARCH%d:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kChannelEnum}s?"), pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source);
		strResp = _T("%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadAIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ConfigureARFIndependentParameters(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum Source, double Level, double UpperThreshold, double LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ConfigureARFIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ConfigureARFIndependentParameters"), &hr, IN_PARAM(Source), IN_PARAM(Level), IN_PARAM(UpperThreshold), IN_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureARFIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:LEVEL:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s %0.15lg;:SEARCH:SEARCH%d:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s %0.15lg"), pT->GetInstanceIndex()+1, Source, Level, pT->GetInstanceIndex()+1, Source, UpperThreshold, pT->GetInstanceIndex()+1, Source, LowerThreshold);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ConfigureARFIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_ReadARFIndependentParameters(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kFrequencyRFTraceTypeEnum Source, double* Level, double* UpperThreshold, double* LowerThreshold)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("ReadARFIndependentParameters"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Level == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadARFIndependentParameters"), _T("Level"));
	if (UpperThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadARFIndependentParameters"), _T("UpperThreshold"));
	if (LowerThreshold == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadARFIndependentParameters"), _T("LowerThreshold"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("ReadARFIndependentParameters"), &hr, IN_PARAM(Source), OUT_PARAM(Level), OUT_PARAM(UpperThreshold), OUT_PARAM(LowerThreshold), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
		else if (pT->InstrumentInFamily(_T("MSO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadARFIndependentParameters"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIGGER:A:LEVEL:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s?;:SEARCH:SEARCH%d:TRIGGER:A:UPPERTHRESHOLD:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s?;:SEARCH:SEARCH%d:TRIGGER:A:LOWERTHRESHOLD:%{Tkdpo2k3k4kFrequencyRFTraceTypeEnum}s?"), pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source, pT->GetInstanceIndex()+1, Source);
		strResp = _T("%lg;%lg;%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_ReadARFIndependentParameters(Source, Level, UpperThreshold, LowerThreshold);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_get_SearchType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("get_SearchType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SearchType"), _T("val"));
	*val = (Tkdpo2k3k4kSearchTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("get_SearchType"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSearchTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSearchTypeEnum>(_T("ITkdpo2k3k4kSearch.SearchType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSearchTypeEdge;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:TYP?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_get_SearchType(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_put_SearchType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("put_SearchType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("put_SearchType"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSearchTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSearchTypeEnum>(_T("ITkdpo2k3k4kSearch.SearchType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:TYP %{Tkdpo2k3k4kSearchTypeEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_put_SearchType(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_get_State(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = (Tkdpo2k3k4kSearchStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSearchStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSearchStateEnum>(_T("ITkdpo2k3k4kSearch.State"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kSearchStateOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:STATE?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kSearchStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_put_State(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kSearchStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kSearchStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kSearchStateEnum>(_T("ITkdpo2k3k4kSearch.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:STATE %{Tkdpo2k3k4kSearchStateEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_get_Total(Tkdpo2k3k4kSearch* pT, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("get_Total"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Total"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("get_Total"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		*val = 0;

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TOTAL?"), pT->GetInstanceIndex()+1);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearch_get_Total(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearch_get_Bus(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBus** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearch), _T("ITkdpo2k3k4kSearch"), _T("get_Bus"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Bus"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearch"), _T("get_Bus"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearch_get_Bus(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_Configure(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kBusTypeEnum BusType)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("Configure"), &hr, IN_PARAM(BusSource), IN_PARAM(BusType), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":SEARCH:SEARCH%d:TRIGGER:A:TYPE BUS;:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:TYPE %{Tkdpo2k3k4kBusTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, BusType);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBus_Configure(BusSource, BusType);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_BusSource(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_BusSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_BusSource"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusSourceEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_BusSource"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>(_T("ITkdpo2k3k4kSearchBus.BusSource"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusSourceB1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:SOU?"), pT->GetInstanceIndex()+1);
		strResp = _T("%{Tkdpo2k3k4kTrigABusSourceEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBus_get_BusSource(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_put_BusSource(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("put_BusSource"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("put_BusSource"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSourceEnum>(_T("ITkdpo2k3k4kSearchBus.BusSource"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:SOU %{Tkdpo2k3k4kTrigABusSourceEnum}s"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBus_put_BusSource(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_ParallelData(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_ParallelData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ParallelData"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_ParallelData"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ParallelData"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBus.ParallelData"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:PAR:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBus_get_ParallelData(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_put_ParallelData(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("put_ParallelData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("put_ParallelData"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO4000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ParallelData"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBus.ParallelData"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:PAR:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBus_put_ParallelData(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_Audio(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusAudio** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_Audio"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Audio"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_Audio"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_Audio(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_USB(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusUSB** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_USB"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_USB"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_USB"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_USB(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_SPI(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusSPI** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_SPI"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SPI"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_SPI"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_SPI(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_RS232(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusRS232** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_RS232"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RS232"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_RS232"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_RS232(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_LIN(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusLIN** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_LIN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_LIN"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_LIN"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_LIN(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_I2C(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusI2C** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_I2C"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_I2C"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_I2C"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_I2C(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_Flexray(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusFlexray** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_Flexray"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Flexray"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_Flexray"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_Flexray(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBus_get_CAN(Tkdpo2k3k4kSearch* pT, ITkdpo2k3k4kSearchBusCAN** val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBus), _T("ITkdpo2k3k4kSearchBus"), _T("get_CAN"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_CAN"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBus"), _T("get_CAN"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		hr = pT->ITkdpo2k3k4kSearchBus_get_CAN(val);
	}
	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>(_T("ITkdpo2k3k4kSearchBusAudio.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioConditionEnum>(_T("ITkdpo2k3k4kSearchBusAudio.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:COND %{Tkdpo2k3k4kTrigABusAudioConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusAudio.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:HIVAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusAudio.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:HIVAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_DataOffset(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOffset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataOffset"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusAudio.DataOffset"));
		if (!pSimData->GetValue(val))
		{
			*val = 0;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:OFFS?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_DataOffset(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataOffset"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusAudio.DataOffset"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:OFFS %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioDataQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>(_T("ITkdpo2k3k4kSearchBusAudio.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioDataQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:QUAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioDataQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataQualifierEnum>(_T("ITkdpo2k3k4kSearchBusAudio.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:QUAL %{Tkdpo2k3k4kTrigABusAudioDataQualifierEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusAudio.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXXXXXXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusAudio.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:VAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_get_DataWord(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataWord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataWord"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("get_DataWord"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataWord"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataWord"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>(_T("ITkdpo2k3k4kSearchBusAudio.DataWord"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusAudioDataAlignmentEither;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:WORD?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_get_DataWord(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusAudio_put_DataWord(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusAudio), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataWord"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusAudio"), _T("put_DataWord"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataWord"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataWord"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum>(_T("ITkdpo2k3k4kSearchBusAudio.DataWord"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:AUD:DAT:WORD %{Tkdpo2k3k4kTrigABusAudioDataAlignmentEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusAudio_put_DataWord(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>(_T("ITkdpo2k3k4kSearchBusUSB.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBConditionSYNC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBConditionEnum>(_T("ITkdpo2k3k4kSearchBusUSB.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:COND %{Tkdpo2k3k4kTrigABusUSBConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:HIVAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:HIVAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_DataOffset(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOffset"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataOffset"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusUSB.DataOffset"));
		if (!pSimData->GetValue(val))
		{
			*val = -1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:OFFS?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_DataOffset(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataOffset"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataOffset"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataOffset"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusUSB.DataOffset"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:OFFS %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_DataOffset(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_Qualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_Qualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Qualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_Qualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Qualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>(_T("ITkdpo2k3k4kSearchBusUSB.Qualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBQualifierEQUAL;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:QUAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_Qualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_Qualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_Qualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_Qualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Qualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBQualifierEnum>(_T("ITkdpo2k3k4kSearchBusUSB.Qualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:QUAL %{Tkdpo2k3k4kTrigABusUSBQualifierEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_Qualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:VAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataSize"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusUSB.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataSize"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusUSB.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_DataType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBDATATypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBDATATypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_DataType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.DataType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBDATATypeAny;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:TYP?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBDATATypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_DataType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_DataType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBDATATypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_DataType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBDATATypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.DataType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:DAT:TYP %{Tkdpo2k3k4kTrigABusUSBDATATypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_DataType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_AddressHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_AddressHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_AddressHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_AddressHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.AddressHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:HIVAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_AddressHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_AddressHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_AddressHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_AddressHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_AddressHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.AddressHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ADDR:HIVAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_AddressHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_EndPointValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_EndPointValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_EndPointValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_EndPointValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EndPointValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.EndPointValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ENDP:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_EndPointValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_EndPointValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_EndPointValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_EndPointValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EndPointValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.EndPointValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ENDP:VAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_EndPointValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBERRTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBERRTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBERRTypePID;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ERRTYPE?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBERRTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBERRTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBERRTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:ERRTYPE %{Tkdpo2k3k4kTrigABusUSBERRTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_HandshakeType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_HandshakeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HandshakeType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_HandshakeType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_HandshakeType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.HandshakeType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBHandshakeTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:HANDSHAKET?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_HandshakeType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_HandshakeType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_HandshakeType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_HandshakeType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_HandshakeType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.HandshakeType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:HANDSHAKET %{Tkdpo2k3k4kTrigABusUSBHandshakeTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_HandshakeType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_SOFFrameNumber(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_SOFFrameNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SOFFrameNumber"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_SOFFrameNumber"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SOFFrameNumber"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.SOFFrameNumber"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SOFFRAMENUM?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_SOFFrameNumber(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_SOFFrameNumber(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_SOFFrameNumber"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_SOFFrameNumber"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SOFFrameNumber"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusUSB.SOFFrameNumber"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SOFFRAMENUM %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_SOFFrameNumber(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_SpecialType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_SpecialType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_SpecialType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_SpecialType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_SpecialType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.SpecialType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBSpecialTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SPECIALT?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_SpecialType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_SpecialType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_SpecialType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_SpecialType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_SpecialType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.SpecialType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:SPECIALT %{Tkdpo2k3k4kTrigABusUSBSpecialTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_SpecialType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_get_TokenType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBTokenTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_TokenType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TokenType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusUSBTokenTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("get_TokenType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_TokenType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.TokenType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusUSBTokenTypeANY;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:TOKENT?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusUSBTokenTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_get_TokenType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusUSB_put_TokenType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusUSBTokenTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusUSB), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_TokenType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusUSB"), _T("put_TokenType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_TokenType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusUSBTokenTypeEnum>(_T("ITkdpo2k3k4kSearchBusUSB.TokenType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:USB:TOKENT %{Tkdpo2k3k4kTrigABusUSBTokenTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusUSB_put_TokenType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusSPIConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusSPIConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>(_T("ITkdpo2k3k4kSearchBusSPI.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusSPIConditionSS;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusSPIConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusSPIConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusSPIConditionEnum>(_T("ITkdpo2k3k4kSearchBusSPI.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:COND %{Tkdpo2k3k4kTrigABusSPIConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_get_DataINValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataINValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataINValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataINValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusSPI.DataINValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:IN:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_get_DataINValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_put_DataINValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataINValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataINValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusSPI.DataINValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:IN:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_put_DataINValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_get_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusSPI.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_put_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusSPI.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_get_DataOUTValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataOUTValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataOUTValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("get_DataOUTValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusSPI.DataOUTValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:OUT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_get_DataOUTValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusSPI_put_DataOUTValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusSPI), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataOUTValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusSPI"), _T("put_DataOUTValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusSPI.DataOUTValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:SPI:DAT:OUT:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusSPI_put_DataOUTValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusRS232ConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusRS232ConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>(_T("ITkdpo2k3k4kSearchBusRS232.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusRS232ConditionTXStart;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusRS232ConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusRS232ConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusRS232ConditionEnum>(_T("ITkdpo2k3k4kSearchBusRS232.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:COND %{Tkdpo2k3k4kTrigABusRS232ConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_get_RXDataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_RXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RXDataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_RXDataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusRS232.RXDataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_get_RXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_put_RXDataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_RXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_RXDataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusRS232.RXDataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_put_RXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_get_RXDataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_RXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_RXDataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_RXDataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusRS232.RXDataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_get_RXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_put_RXDataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_RXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_RXDataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusRS232.RXDataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:RX:DAT:VAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_put_RXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_get_TXDataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_TXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TXDataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_TXDataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusRS232.TXDataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_get_TXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_put_TXDataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_TXDataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_TXDataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusRS232.TXDataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_put_TXDataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_get_TXDataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_TXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_TXDataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("get_TXDataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusRS232.TXDataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_get_TXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusRS232_put_TXDataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusRS232), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_TXDataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusRS232"), _T("put_TXDataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusRS232.TXDataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:RS232C:TX:DAT:VAL %$Bs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusRS232_put_TXDataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>(_T("ITkdpo2k3k4kSearchBusLIN.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:QUAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataQualifier"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINQualifierEnum>(_T("ITkdpo2k3k4kSearchBusLIN.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:QUAL %{Tkdpo2k3k4kTrigABusLINQualifierEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataHighValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataHighValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.DataHighValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:HIVAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_DataHighValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataHighValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataHighValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_DataHighValue"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.DataHighValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:HIVAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_DataHighValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>(_T("ITkdpo2k3k4kSearchBusLIN.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINConditionSYNCField;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINConditionEnum>(_T("ITkdpo2k3k4kSearchBusLIN.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:COND %{Tkdpo2k3k4kTrigABusLINConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusLIN.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusLIN.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINErrorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusLINErrorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>(_T("ITkdpo2k3k4kSearchBusLIN.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusLINErrorTypeSYNC;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ERRTYPE?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusLINErrorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusLINErrorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusLINErrorTypeEnum>(_T("ITkdpo2k3k4kSearchBusLIN.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ERRTYPE %{Tkdpo2k3k4kTrigABusLINErrorTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_get_IdentifierValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_IdentifierValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_IdentifierValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("get_IdentifierValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.IdentifierValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ID:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_get_IdentifierValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusLIN_put_IdentifierValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusLIN), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_IdentifierValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusLIN"), _T("put_IdentifierValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusLIN.IdentifierValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:LIN:ID:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusLIN_put_IdentifierValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusI2C.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusI2C.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusI2C.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusI2C.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusI2C.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusI2C.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_DataDirection(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CDataDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataDirection"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CDataDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_DataDirection"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>(_T("ITkdpo2k3k4kSearchBusI2C.DataDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CDataDirectionNOCARE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:DIR?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CDataDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_DataDirection(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CDataDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_DataDirection"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CDataDirectionEnum>(_T("ITkdpo2k3k4kSearchBusI2C.DataDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:DAT:DIR %{Tkdpo2k3k4kTrigABusI2CDataDirectionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CTrigConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CTrigConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>(_T("ITkdpo2k3k4kSearchBusI2C.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CTrigConditionSTART;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CTrigConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CTrigConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CTrigConditionEnum>(_T("ITkdpo2k3k4kSearchBusI2C.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:COND %{Tkdpo2k3k4kTrigABusI2CTrigConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_get_AddressMode(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CAddrModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressMode"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusI2CAddrModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("get_AddressMode"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>(_T("ITkdpo2k3k4kSearchBusI2C.AddressMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusI2CAddrModeADDR7;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:MOD?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusI2CAddrModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_get_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusI2C_put_AddressMode(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusI2CAddrModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusI2C), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusI2C"), _T("put_AddressMode"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusI2CAddrModeEnum>(_T("ITkdpo2k3k4kSearchBusI2C.AddressMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:I2C:ADDR:MOD %{Tkdpo2k3k4kTrigABusI2CAddrModeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusI2C_put_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ConfigureCycleCount(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureCycleCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureCycleCount"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Qualifier), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureCycleCount"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:HIVAL %$BQs;:SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;:SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, HighValue, pT->GetInstanceIndex()+1, BusSource, Qualifier, pT->GetInstanceIndex()+1, BusSource, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ConfigureCycleCount(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ReadCycleCount(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadCycleCount"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("HighValue"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("Qualifier"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadCycleCount"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadCycleCount"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Qualifier), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadCycleCount"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:HIVAL?;:SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:QUAL?;:SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:CYCLE:VAL?"), pT->GetInstanceIndex()+1, BusSource, pT->GetInstanceIndex()+1, BusSource, pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ReadCycleCount(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ConfigureData(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, long Offset, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, long Size, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureData"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Offset), IN_PARAM(Qualifier), IN_PARAM(Size), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureData"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:DAT:HIVAL %$BQs;OFFS %d;QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;SIZ %d;VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, HighValue, Offset, Qualifier, Size, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ConfigureData(BusSource, HighValue, Offset, Qualifier, Size, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ReadData(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, long* Offset, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, long* Size, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadData"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("HighValue"));
	if (Offset == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Offset"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Qualifier"));
	if (Size == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Size"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadData"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadData"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Offset), OUT_PARAM(Qualifier), OUT_PARAM(Size), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadData"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:DAT:HIVAL?;OFFS?;QUAL?;SIZ?;VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs;%d;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%d;%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ReadData(BusSource, HighValue, Offset, Qualifier, Size, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ConfigureFrameID(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum Qualifier, BSTR Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureFrameID"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureFrameID"), &hr, IN_PARAM(BusSource), IN_PARAM(HighValue), IN_PARAM(Qualifier), IN_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureFrameID"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMEID:HIVAL %$BQs;QUAL %{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}s;VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, HighValue, Qualifier, Value);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ConfigureFrameID(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ReadFrameID(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* HighValue, Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum* Qualifier, BSTR* Value)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadFrameID"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (HighValue == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("HighValue"));
	if (Qualifier == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("Qualifier"));
	if (Value == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadFrameID"), _T("Value"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadFrameID"), &hr, IN_PARAM(BusSource), OUT_PARAM(HighValue), OUT_PARAM(Qualifier), OUT_PARAM(Value), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadFrameID"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMEID:HIVAL?;QUAL?;VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs;%{Tkdpo2k3k4kTrigABusFlexrayCycleCountEnum}[^;];%s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ReadFrameID(BusSource, HighValue, Qualifier, Value);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ConfigureHeader(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR CRC, BSTR CycleCount, BSTR FrameID, BSTR IndicatorBits, BSTR PayloadLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureHeader"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ConfigureHeader"), &hr, IN_PARAM(BusSource), IN_PARAM(CRC), IN_PARAM(CycleCount), IN_PARAM(FrameID), IN_PARAM(IndicatorBits), IN_PARAM(PayloadLength), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ConfigureHeader"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:HEADER:CRC %$BQs;CYCLE %$BQs;FRAMEID %$BQs;INDB %$BQs;PAYL %$BQs"), pT->GetInstanceIndex()+1, BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ConfigureHeader(BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_ReadHeader(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* CRC, BSTR* CycleCount, BSTR* FrameID, BSTR* IndicatorBits, BSTR* PayloadLength)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadHeader"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (CRC == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("CRC"));
	if (CycleCount == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("CycleCount"));
	if (FrameID == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("FrameID"));
	if (IndicatorBits == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("IndicatorBits"));
	if (PayloadLength == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("ReadHeader"), _T("PayloadLength"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("ReadHeader"), &hr, IN_PARAM(BusSource), OUT_PARAM(CRC), OUT_PARAM(CycleCount), OUT_PARAM(FrameID), OUT_PARAM(IndicatorBits), OUT_PARAM(PayloadLength), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("ReadHeader"));
		}
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:HEADER:CRC?;CYCLE?;FRAMEID?;INDB?;PAYL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs;%$Bs;%$Bs;%$Bs;%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_ReadHeader(BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_Condition"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayConditionEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:COND %{Tkdpo2k3k4kTrigABusFlexrayConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_get_EOFType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_EOFType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_EOFType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_EOFType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_EOFType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.EOFType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayEOFTypeStatic;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:EOFTYPE?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_get_EOFType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_put_EOFType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_EOFType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_EOFType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_EOFType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.EOFType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:EOFTYPE %{Tkdpo2k3k4kTrigABusFlexrayEOFTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_put_EOFType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_get_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_ErrorType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_ErrorType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.ErrorType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayErrorTypeCRCHeader;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:ERRTYPE?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_get_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_put_ErrorType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_ErrorType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_ErrorType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_ErrorType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.ErrorType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:ERRTYPE %{Tkdpo2k3k4kTrigABusFlexrayErrorTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_put_ErrorType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_get_FrameType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrameType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("get_FrameType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("get_FrameType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.FrameType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusFlexrayFrameTypeNormal;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMET?"), BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_get_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusFlexray_put_FrameType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusFlexray), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusFlexray"), _T("put_FrameType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
		if (pT->InstrumentInFamily(_T("DPO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO2000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("DPO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
		else if (pT->InstrumentInFamily(_T("MSO3000 Series")))
		{
			hr = pT->ReportError(IDS_E_TKDPO2K3K4K_MODEL_NOT_SUPPORTED, _T("put_FrameType"));
		}
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum>(_T("ITkdpo2k3k4kSearchBusFlexray.FrameType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:FLEX:FRAMET %{Tkdpo2k3k4kTrigABusFlexrayFrameTypeEnum}s"), BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusFlexray_put_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANConditionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Condition"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANConditionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_Condition"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>(_T("ITkdpo2k3k4kSearchBusCAN.Condition"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANConditionSOF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:COND?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANConditionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_Condition(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANConditionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_Condition"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_Condition"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANConditionEnum>(_T("ITkdpo2k3k4kSearchBusCAN.Condition"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:COND %{Tkdpo2k3k4kTrigABusCANConditionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_Condition(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANQualifierEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataQualifier"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANQualifierEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataQualifier"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>(_T("ITkdpo2k3k4kSearchBusCAN.DataQualifier"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANQualifierEqual;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:QUAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANQualifierEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_DataQualifier(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANQualifierEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataQualifier"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataQualifier"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANQualifierEnum>(_T("ITkdpo2k3k4kSearchBusCAN.DataQualifier"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:QUAL %{Tkdpo2k3k4kTrigABusCANQualifierEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_DataQualifier(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusCAN.DataValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_DataValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusCAN.DataValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_DataValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_DataDirection(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANDataDirectionEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataDirection"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANDataDirectionEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataDirection"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>(_T("ITkdpo2k3k4kSearchBusCAN.DataDirection"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANDataDirectionNOCARE;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:DIR?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANDataDirectionEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_DataDirection(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANDataDirectionEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataDirection"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataDirection"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANDataDirectionEnum>(_T("ITkdpo2k3k4kSearchBusCAN.DataDirection"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:DIR %{Tkdpo2k3k4kTrigABusCANDataDirectionEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_DataDirection(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_DataSize"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_DataSize"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusCAN.DataSize"));
		if (!pSimData->GetValue(val))
		{
			*val = 1;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:SIZ?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%d");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_DataSize(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, long val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataSize"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_DataSize"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<long>* pSimData = pT->GetOrCreateCacheEntry<long>(_T("ITkdpo2k3k4kSearchBusCAN.DataSize"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:DAT:SIZ %d"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_DataSize(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_FrameType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANFrameTypeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_FrameType"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANFrameTypeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_FrameType"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>(_T("ITkdpo2k3k4kSearchBusCAN.FrameType"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANFrameTypeData;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:FRAME?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANFrameTypeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_FrameType(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANFrameTypeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_FrameType"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_FrameType"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANFrameTypeEnum>(_T("ITkdpo2k3k4kSearchBusCAN.FrameType"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:FRAME %{Tkdpo2k3k4kTrigABusCANFrameTypeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_FrameType(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_AddressMode(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANAddressModeEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressMode"), _T("val"));
	*val = (Tkdpo2k3k4kTrigABusCANAddressModeEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_AddressMode"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>(_T("ITkdpo2k3k4kSearchBusCAN.AddressMode"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kTrigABusCANAddressModeStandard;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:MOD?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%{Tkdpo2k3k4kTrigABusCANAddressModeEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_AddressMode(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, Tkdpo2k3k4kTrigABusCANAddressModeEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_AddressMode"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_AddressMode"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kTrigABusCANAddressModeEnum>(_T("ITkdpo2k3k4kSearchBusCAN.AddressMode"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:MOD %{Tkdpo2k3k4kTrigABusCANAddressModeEnum}s"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_AddressMode(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_get_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_AddressValue"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("get_AddressValue"), &hr, IN_PARAM(BusSource), OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusCAN.AddressValue"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"XXXXXXXXXXX\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:VAL?"), pT->GetInstanceIndex()+1, BusSource);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_get_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kSearchBusCAN_put_AddressValue(Tkdpo2k3k4kSearch* pT, Tkdpo2k3k4kTrigABusSourceEnum BusSource, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kSearch::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kSearchBusCAN), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_AddressValue"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kSearchBusCAN"), _T("put_AddressValue"), &hr, IN_PARAM(BusSource), IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kSearchBusCAN.AddressValue"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SEARCH:SEARCH%d:TRIG:A:BUS:%{Tkdpo2k3k4kTrigABusSourceEnum}s:CAN:ADDR:VAL %$BQs"), pT->GetInstanceIndex()+1, BusSource, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kSearchBusCAN_put_AddressValue(BusSource, val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_Configure(Tkdpo2k3k4kReference* pT, double Position, double VerticalScale, double HorizontalScale, VARIANT_BOOL DisplayState, double HorizontalDelayTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("Configure"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("Configure"), &hr, IN_PARAM(Position), IN_PARAM(VerticalScale), IN_PARAM(HorizontalScale), IN_PARAM(DisplayState), IN_PARAM(HorizontalDelayTime), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:SCA %0.15lg;:REF%d:VERT:POS %0.15lg;:REF%d:VERT:SCA %0.15lg;:SELECT:REF%d %{VARIANT_BOOL}s;:REF%d:HOR:DEL:TIM %0.15lg"), pT->GetInstanceIndex()+1, HorizontalScale, pT->GetInstanceIndex()+1, Position, pT->GetInstanceIndex()+1, VerticalScale, pT->GetInstanceIndex()+1, DisplayState, pT->GetInstanceIndex()+1, HorizontalDelayTime);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_Configure(Position, VerticalScale, HorizontalScale, DisplayState, HorizontalDelayTime);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_Read(Tkdpo2k3k4kReference* pT, double* Position, double* VerticalScale, double* HorizontalScale, VARIANT_BOOL* DisplayState, double* HorizontalDelayTime)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("Read"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Position == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("Position"));
	if (VerticalScale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("VerticalScale"));
	if (HorizontalScale == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("HorizontalScale"));
	if (DisplayState == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("DisplayState"));
	if (HorizontalDelayTime == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("Read"), _T("HorizontalDelayTime"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("Read"), &hr, OUT_PARAM(Position), OUT_PARAM(VerticalScale), OUT_PARAM(HorizontalScale), OUT_PARAM(DisplayState), OUT_PARAM(HorizontalDelayTime), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:SCA?;:REF%d:VERT:POS?;:REF%d:VERT:SCA?;:SELECT:REF%d?;:REF%d:HOR:DEL:TIM?"), pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1, pT->GetInstanceIndex()+1);
		strResp = _T("%lg;%lg;%lg;%{VARIANT_BOOL}[^;];%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_Read(Position, VerticalScale, HorizontalScale, DisplayState, HorizontalDelayTime);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_GetDateTime(Tkdpo2k3k4kReference* pT, BSTR* Date, BSTR* Time)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("GetDateTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (Date == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetDateTime"), _T("Date"));
	if (Time == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("GetDateTime"), _T("Time"));
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("GetDateTime"), &hr, OUT_PARAM(Date), OUT_PARAM(Time), NULL);

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:DATE?;TIME?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs;%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_GetDateTime(Date, Time);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_get_HorizontalScale(Tkdpo2k3k4kReference* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("get_HorizontalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("get_HorizontalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.HorizontalScale"));
		if (!pSimData->GetValue(val))
		{
			*val = 4.000000E-006;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:SCA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_get_HorizontalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_put_HorizontalScale(Tkdpo2k3k4kReference* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("put_HorizontalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("put_HorizontalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.HorizontalScale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:SCA %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_put_HorizontalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_get_Position(Tkdpo2k3k4kReference* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 0.000000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:VERT:POS?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_put_Position(Tkdpo2k3k4kReference* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:VERT:POS %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_get_VerticalScale(Tkdpo2k3k4kReference* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("get_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_VerticalScale"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("get_VerticalScale"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.VerticalScale"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.000000E-001;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:VERT:SCA?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_get_VerticalScale(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_put_VerticalScale(Tkdpo2k3k4kReference* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("put_VerticalScale"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("put_VerticalScale"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.VerticalScale"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:VERT:SCA %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_put_VerticalScale(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_get_HorizontalDelayTime(Tkdpo2k3k4kReference* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("get_HorizontalDelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_HorizontalDelayTime"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("get_HorizontalDelayTime"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.HorizontalDelayTime"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.600000E-005;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:DEL:TIM?"), pT->GetInstanceIndex()+1);
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_get_HorizontalDelayTime(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_put_HorizontalDelayTime(Tkdpo2k3k4kReference* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("put_HorizontalDelayTime"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("put_HorizontalDelayTime"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kReference.HorizontalDelayTime"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:HOR:DEL:TIM %0.15lg"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_put_HorizontalDelayTime(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_get_Label(Tkdpo2k3k4kReference* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("get_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Label"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("get_Label"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kReference.Label"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:LAB?"), pT->GetInstanceIndex()+1);
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_get_Label(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kReference_put_Label(Tkdpo2k3k4kReference* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kReference::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kReference), _T("ITkdpo2k3k4kReference"), _T("put_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kReference"), _T("put_Label"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kReference.Label"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("REF%d:LAB %$BQs"), pT->GetInstanceIndex()+1, val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kReference_put_Label(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_get_Label(Tkdpo2k3k4kDigitalChannel* pT, BSTR* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Label"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Label"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kDigitalChannel.Label"));
		if (!pSimData->GetValue(val))
		{
			*val = ::SysAllocString(L"\"\"");
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":D%d:LABEL?"), pT->GetInstanceIndex());
		strResp = _T("%$Bs");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_get_Label(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_put_Label(Tkdpo2k3k4kDigitalChannel* pT, BSTR val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Label"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Label"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<BSTR>* pSimData = pT->GetOrCreateCacheEntry<BSTR>(_T("ITkdpo2k3k4kDigitalChannel.Label"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T(":D%d:LABEL %$BQs"), pT->GetInstanceIndex(), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_put_Label(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_get_Position(Tkdpo2k3k4kDigitalChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Position"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Position"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDigitalChannel.Position"));
		if (!pSimData->GetValue(val))
		{
			*val = 8.000000E-002;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("D%d:POS?"), pT->GetInstanceIndex());
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_get_Position(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_put_Position(Tkdpo2k3k4kDigitalChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Position"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Position"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDigitalChannel.Position"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("D%d:POS %0.15lg"), pT->GetInstanceIndex(), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_put_Position(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_get_State(Tkdpo2k3k4kDigitalChannel* pT, Tkdpo2k3k4kDigitalChannelStateEnum* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_State"), _T("val"));
	*val = (Tkdpo2k3k4kDigitalChannelStateEnum)NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_State"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDigitalChannelStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDigitalChannelStateEnum>(_T("ITkdpo2k3k4kDigitalChannel.State"));
		if (!pSimData->GetValue(val))
		{
			*val = Tkdpo2k3k4kDigitalChannelStateOFF;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SELECT:D%d?"), pT->GetInstanceIndex());
		strResp = _T("%{Tkdpo2k3k4kDigitalChannelStateEnum}s");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_get_State(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_put_State(Tkdpo2k3k4kDigitalChannel* pT, Tkdpo2k3k4kDigitalChannelStateEnum val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_State"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_State"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<Tkdpo2k3k4kDigitalChannelStateEnum>* pSimData = pT->GetOrCreateCacheEntry<Tkdpo2k3k4kDigitalChannelStateEnum>(_T("ITkdpo2k3k4kDigitalChannel.State"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("SELECT:D%d %{Tkdpo2k3k4kDigitalChannelStateEnum}s"), pT->GetInstanceIndex(), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_put_State(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_get_Threshold(Tkdpo2k3k4kDigitalChannel* pT, double* val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Threshold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	if (val == NULL) return pT->ReportError(IDS_E_IVI_NULL_POINTER, _T("get_Threshold"), _T("val"));
	*val = NULL;
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("get_Threshold"), &hr, OUT_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDigitalChannel.Threshold"));
		if (!pSimData->GetValue(val))
		{
			*val = 1.400000E+000;
		}

		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		CString strResp;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("D%d:THRE?"), pT->GetInstanceIndex());
		strResp = _T("%lg");

		pT->PushInstrCommand(strCmd);
		pT->PushInstrResponse(strResp);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_get_Threshold(val);
		}
		pT->PopInstrCommand();
		pT->PopInstrResponse();
	}

	return hr;
}
HRESULT ForwardingShimImpl::ITkdpo2k3k4kDigitalChannel_put_Threshold(Tkdpo2k3k4kDigitalChannel* pT, double val)
{
	HRESULT hr = S_OK;

	Tkdpo2k3k4kDigitalChannel::ObjectLock lock(pT);
	static CCallContext callContext(__uuidof(ITkdpo2k3k4kDigitalChannel), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Threshold"));
	CCallContextManager callContextManager(pT->GetDriver(), &callContext);
	if (!pT->GetInitialized()) return pT->ReportError(IDS_E_IVI_NOT_INITIALIZED);
	SetErrorInfo(0, NULL);
	CMethodTrace mt(pT->GetTracer(), _T("ITkdpo2k3k4kDigitalChannel"), _T("put_Threshold"), &hr, IN_PARAM(val), NULL);

	if (SUCCEEDED(hr))
	{
	}

	if (SUCCEEDED(hr) && pT->GetSimulate())
	{
		CCacheEntry<double>* pSimData = pT->GetOrCreateCacheEntry<double>(_T("ITkdpo2k3k4kDigitalChannel.Threshold"));
		pSimData->UpdateValue(val);
		
		return S_OK;
	}

	if (SUCCEEDED(hr))
	{
		CString strCmd;
		hr = CFormattedIo::Printf(strCmd, pT->GetRoot(), _T("D%d:THRE %0.15lg"), pT->GetInstanceIndex(), val);

		pT->PushInstrCommand(strCmd);
		if (SUCCEEDED(hr))
		{
			hr = pT->ITkdpo2k3k4kDigitalChannel_put_Threshold(val);
		}
		pT->PopInstrCommand();
	}

	return hr;
}
